USER COMMAND,INSTRUCTIONS,INPUT,XML BEHAVIOR TREE OUTPUT
"while moving forward, constantly check for low battery and return to charging station if battery is low.","Use only the following behaviors to generate XML Behavior tree based on the user command: {move_forward: 'Action node: Move the agent forward.
Returns: Always returns True, indicating the action was executed.', check_battery: 'Condition node: Check if the battery level is below a certain threshold.
Returns: True if battery is low, otherwise False.', return_to_station: 'Action node: Return to charging station.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.","While moving forward, constantly check for low battery and return to charging station if battery is low.","
<BehaviorTree>
<Sequence>
<Action>move_forward</Action>
<Selector>
<Sequence>
<Condition>check_battery</Condition>
<Action>return_to_station</Action>
<Action>move_forward</Action>
</Sequence>
<Action>move_forward</Action>
</Selector>
</Sequence>
</BehaviorTree>"
"follow designated leader robot, but if leader is obstructed, switch to following another robot in the group.","Use only the following behaviors to generate XML Behavior tree based on the user command: {follow_leader: 'Action node: Follow the designated leader robot.
Returns: Always returns True, indicating the action was executed.', check_obstruction: 'Condition node: Check if the designated leader is obstructed.
Returns: True if leader is obstructed, otherwise False.', reassign_leader: 'Action node: Reassign leader to another robot in the group.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.","Follow designated leader robot, but if leader is obstructed, switch to following another robot in the group.","
<BehaviorTree>
<Selector>
<Sequence>
<Condition>check_obstruction</Condition>
<Action>reassign_leader</Action>
<Action>follow_leader</Action>
</Sequence>
<Action>follow_leader</Action>
</Selector>
</BehaviorTree>"
perform a coordinated search and rescue mission with other robots in the swarm.,Use the following behaviors to generate XML Behavior tree based on the user command: take_off: Action node - Initiate the search mission by taking off. search_area: Action node - Search the designated area for the target. detect_target: Condition node - Check if the target has been found. retrieve_target: Action node - Retrieve the target once found. return_to_base: Action node - Return to base with the retrieved target.,Coordinated search and rescue mission with other robots in the swarm.,"
<BehaviorTree>
<Selector>
<Selector>
<Action>take_off</Action>
<Sequence>
<Condition>detect_target</Condition>
<Action>retrieve_target</Action>
<Action>return_to_base</Action>
</Sequence>
</Selector>
<Sequence>
<Action>search_area</Action>
<Action>search_area</Action>
</Sequence>
</Selector>
</BehaviorTree>"
"if oil spill is detected, deploy cleaning mechanism and remain in that location until spill is completely cleaned.",Use the following behaviors to generate XML Behavior tree based on the user command: detect_oil_spill: Condition node - Check if there is an oil spill in the designated area. deploy_mechanism: Action node - Deploy the cleaning mechanism. clean_spill: Action node - Continue cleaning the spill. check_cleanliness: Condition node - Check if the spill has been completely cleaned. stay_in_place: Action node - Stay in the current location until the spill is cleaned completely.,"If oil spill is detected, deploy cleaning mechanism and remain in that location until spill is completely cleaned.","
<BehaviorTree>
<Selector>
<Sequence>
<Condition>detect_oil_spill</Condition>
<Action>deploy_mechanism</Action>
<Selector>
<Sequence>
<Condition>check_cleanliness</Condition>
<Action>stay_in_place</Action>
<Action>clean_spill</Action>
</Sequence>
<Action>clean_spill</Action>
</Selector>
</Sequence>
<Action>stay_in_place</Action>
</Selector>
</BehaviorTree>"
perform a coordinated mapping mission with other robots in the swarm.,Use the following behaviors to generate XML Behavior tree based on the user command: take_off: Action node - Initiate the mapping mission by taking off. map_area: Action node - Map the designated area. synchronize_maps: Action node - Synchronize the maps from all robots in the group. return_to_base: Action node - Return to base with the completed map.,Coordinated mapping mission with other robots in the swarm.,"
<BehaviorTree>
<Sequence>
<Action>take_off</Action>
<Selector>
<Sequence>
<Condition>detect_target</Condition>
<Action>map_area</Action>
<Action>synchronize_maps</Action>
<Action>return_to_base</Action>
</Sequence>
<Action>map_area</Action>
</Selector>
</Sequence>
</BehaviorTree>"
"follow designated route, but if route is blocked, find an alternative route.","Use only the following behaviors to generate XML Behavior tree based on the user command: {follow_route: 'Action node: Follow the designated route.
Returns: Always returns True, indicating the action was executed.', check_blockage: 'Condition node: Check if the designated route is blocked.
Returns: True if route is blocked, otherwise False.', find_alternative_route: 'Action node: Find an alternate route.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.","Follow designated route, but if route is blocked, find an alternative route.","
<BehaviorTree>
<Selector>
<Sequence>
<Condition>check_blockage</Condition>
<Action>find_alternative_route</Action>
<Action>follow_route</Action>
</Sequence>
<Action>follow_route</Action>
</Selector>
</BehaviorTree>"
"while exploring, constantly communicate with other robots in the swarm to share discovered information.","Use only the following behaviors to generate XML Behavior tree based on the user command: {explore: 'Action node: Explore the surrounding area.
Returns: Always returns True, indicating the action was executed.', communicate: 'Action node: Communicate with other robots to share information.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.","While exploring, constantly communicate with other robots in the swarm to share discovered information.","
<BehaviorTree>
<Sequence>
<Action>explore</Action>
<Action>communicate</Action>
</Sequence>
</BehaviorTree>"
perform a coordinated search and destroy mission with other robots in the swarm.,Use the following behaviors to generate XML Behavior tree based on the user command: take_off: Action node - Initiate the search mission by taking off. search_area: Action node - Search the designated area for the target. detect_target: Condition node - Check if the target has been found. destroy_target: Action node - Destroy the target once found. return_to_base: Action node - Return to base with the completed mission.,Coordinated search and destroy mission with other robots in the swarm.,"
<BehaviorTree>
<Sequence>
<Action>take_off</Action>
<Selector>
<Sequence>
<Condition>detect_target</Condition>
<Action>destroy_target</Action>
<Action>return_to_base</Action>
</Sequence>
<Action>search_area</Action>
</Selector>
</Sequence>
</BehaviorTree>"
"if communication with other robots is lost, search for and reestablish communication.","Use only the following behaviors to generate XML Behavior tree based on the user command: {search: 'Action node: Search for the other robots.
Returns: Always returns True, indicating the action was executed.', reestablish_communication: 'Action node: Retrieve and reestablish communication with the other robots.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.","If communication with other robots is lost, search for and reestablish communication.","
<BehaviorTree>
<Sequence>
<Action>search</Action>
<Action>reestablish_communication</Action>
</Sequence>
</BehaviorTree>"
"constantly monitor for any changes in the environment, adjust behaviors accordingly.","Use only the following behaviors to generate XML Behavior tree based on the user command: {monitor: 'Action node: Monitor the environment for changes.
Returns: Always returns True, indicating the action was executed.', adjust_behavior: 'Action node: Adjust behaviors based on changes in the environment.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.","Constantly monitor for any changes in the environment, adjust behaviors accordingly.","
<BehaviorTree>
<Sequence>
<Action>monitor</Action>
<Action>adjust_behavior</Action>
</Sequence>
</BehaviorTree>"
perform a coordinated delivery mission with other robots in the swarm.,Use the following behaviors to generate XML Behavior tree based on the user command: take_off: Action node - Initiate the delivery mission by taking off. pick_up_package: Action node - Pick up the package from the designated location. deliver_package: Action node - Deliver the package to the designated location. synchronize_delivery: Action node - Synchronize with other robots to ensure successful delivery. return_to_base: Action node - Return to base with completed mission.,Coordinated delivery mission with other robots in the swarm.,"
<BehaviorTree>
<Sequence>
<Action>take_off</Action>
<Selector>
<Sequence>
<Condition>detect_package</Condition>
<Action>pick_up_package</Action>
<Action>deliver_package</Action>
<Action>synchronize_delivery</Action>
<Action>return_to_base</Action>
</Sequence>
<Action>deliver_package</Action>
</Selector>
</Sequence>
</BehaviorTree>"
"while monitoring crops, use fertilization and pest control behaviors to maintain healthy plants.",Use the following behaviors to generate XML Behavior tree based on the user command: check_crops: Condition node - Check the health of the crops. fertilize: Action node - Spread fertilizer over the crops. pest_control: Action node - Use pest control methods to protect the crops. crop_monitor: Action node - Continuously monitor the health of the crops.,"While monitoring crops, use fertilization and pest control behaviors to maintain healthy plants.","
<BehaviorTree>
<Sequence>
<Action>crop_monitor</Action>
<Selector>
<Sequence>
<Condition>check_crops</Condition>
<Action>fertilize</Action>
<Action>crop_monitor</Action>
</Sequence>
<Action>pest_control</Action>
</Selector>
</Sequence>
</BehaviorTree>"
utilize formation behaviors to maintain a specific shape while moving.,"Use only the following behaviors to generate XML Behavior tree based on the user command: {maintain_formation: 'Action node: Maintain the specified formation while moving.
Returns: Always returns True, indicating the action was executed.', adjust_formation: 'Action node: Adjust the formation based on input from other robots.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.",Utilize formation behaviors to maintain a specific shape while moving.,"
<BehaviorTree>
<Sequence>
<Action>maintain_formation</Action>
<Action>adjust_formation</Action>
</Sequence>
</BehaviorTree>"
"if temperature drops, deploy heaters to ensure the survival of plants.","Use only the following behaviors to generate XML Behavior tree based on the user command: {check_temperature: 'Condition node: Check the temperature.
Returns: True if temperature is below threshold, otherwise False.', deploy_heaters: 'Action node: Deploy heaters to maintain a suitable temperature.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.","If temperature drops, deploy heaters to ensure the survival of plants.","
<BehaviorTree>
<Sequence>
<Condition>check_temperature</Condition>
<Action>deploy_heaters</Action>
</Sequence>
</BehaviorTree>"
continuously scan for hazardous materials and dispose of them in designated containers.,Use the following behaviors to generate XML Behavior tree based on the user command: scan_environment: Action node - Scan the environment for hazardous materials. detect_hazard: Condition node - Check if a hazardous material is detected. dispose_hazard: Action node - Dispose of the hazardous material in a designated container. repeat_scan: Action node - Continuously scan the environment.,Continuously scan for hazardous materials and dispose of them in designated containers.,"
<BehaviorTree>
<Sequence>
<Action>scan_environment</Action>
<Selector>
<Sequence>
<Condition>detect_hazard</Condition>
<Action>dispose_hazard</Action>
<Action>repeat_scan</Action>
</Sequence>
<Action>repeat_scan</Action>
</Selector>
</Sequence>
</BehaviorTree>"
work together with other robots to construct a path or bridge for safe passage.,Use the following behaviors to generate XML Behavior tree based on the user command: start_project: Action node - Begin the project of constructing a path or bridge. gather_materials: Action node - Collect necessary materials from the surrounding environment. construct: Action node - Build the path or bridge with the materials. check_safety: Condition node - Check the safety of the constructed structure. continue_project: Action node - Continue working together with other robots to complete the project.,Work together with other robots to construct a path or bridge for safe passage.,"
<BehaviorTree>
<Selector>
<Sequence>
<Condition>check_safety</Condition>
<Action>start_project</Action>
<Action>gather_materials</Action>
<Action>construct</Action>
<Action>continue_project</Action>
</Sequence>
<Action>continue_project</Action>
</Selector>
</BehaviorTree>"
"Explore the environment while avoiding obstacles. If an obstacle is detected, navigate around it.",Use the following behaviors to generate XML Behavior tree based on the user command: explore_environment: Action node (same as before). detect_obstacles: Condition node - Checks if any obstacles are detected in the environment. navigate_around_obstacle: Action node - Makes the agent navigate around the detected obstacle.,"Explore the environment while avoiding obstacles. If an obstacle is detected, navigate around it.","
<BehaviorTree>
<Sequence>
<Action>explore_environment</Action>
</Sequence>
<Sequence>
<Condition>detect_obstacles</Condition>
<Action>navigate_around_obstacle</Action>
</Sequence>
</BehaviorTree>"
Gather resources from multiple locations and return them to a designated area.,Use the following behaviors to generate XML Behavior tree based on the user command: gather_resources: Subtree node - Represents a behavior tree for gathering resources from multiple locations. return_resources: Action node - Makes the agent return to a designated area with the collected resources.,Gather resources from multiple locations and return them to a designated area.,"
<BehaviorTree>
<Sequence>
<Action>gather_resources</Action>
<Action>return_resources</Action>
</Sequence>
</BehaviorTree>"
"Attack enemy robots in the vicinity. If outnumbered, retreat and regroup with allies.",Use the following behaviors to generate XML Behavior tree based on the user command: attack_enemies: Action node - Makes the agent engage in combat with enemy robots in the vicinity. outnumbered: Condition node - Checks if the agent is outnumbered by enemy robots. regroup_with_allies: Action node - Makes the agent retreat and regroup with allied robots.,"Attack enemy robots in the vicinity. If outnumbered, retreat and regroup with allies.","
<BehaviorTree>
<Sequence>
<Action>attack_enemies</Action>
<Selector>
<Sequence>
<Condition>outnumbered</Condition>
<Action>regroup_with_allies</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
"Search for a specific target in the environment while watching out for threats. If target is found, approach and attack.",Use the following behaviors to generate XML Behavior tree based on the user command: search_target: Subtree node - Represents a behavior tree for searching the environment for a specific target. watch_for_threats: Action node - Makes the agent constantly scan for potential threats. approach_target: Action node - Makes the agent approach the identified target. attack_target: Action node - Makes the agent engage in combat with the target.,"Search for a specific target in the environment while watching out for threats. If target is found, approach and attack.","
<BehaviorTree>
<Sequence>
<Action>search_target</Action>
<Action>watch_for_threats</Action>
<Selector>
<Sequence>
<Condition>target_found</Condition>
<Action>approach_target</Action>
<Action>attack_target</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
"Retrieve a lost object from a designated location. If unable to find it, ask for assistance from nearby robots.",Use the following behaviors to generate XML Behavior tree based on the user command: retrieve_object: Action node - Makes the agent search for and retrieve a lost object from the designated location. unable_to_find_object: Condition node - Checks if the agent is unable to find the object. ask_for_assistance: Action node - Makes the agent communicate with nearby robots to request assistance.,"Retrieve a lost object from a designated location. If unable to find it, ask for assistance from nearby robots.","
<BehaviorTree>
<Sequence>
<Action>retrieve_object</Action>
<Selector>
<Sequence>
<Condition>unable_to_find_object</Condition>
<Action>ask_for_assistance</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
"Survey the environment and gather data for map creation. If obstructed, scan for alternative routes.",Use the following behaviors to generate XML Behavior tree based on the user command: survey_environment: Action node - Makes the agent move around and gather data for map creation. obstructed: Condition node - Checks if the agent is facing any obstructions. scan_for_alternative_routes: Action node - Makes the agent scan for alternative routes to continue surveying.,"Survey the environment and gather data for map creation. If obstructed, scan for alternative routes.","
<BehaviorTree>
<Sequence>
<Action>survey_environment</Action>
</Sequence>
<Sequence>
<Condition>obstructed</Condition>
<Action>scan_for_alternative_routes</Action>
</Sequence>
</BehaviorTree>"
"Defend the designated base from enemy attacks. If outnumbered, retreat and call for reinforcements.",Use the following behaviors to generate XML Behavior tree based on the user command: defend_base: Action node - Makes the agent engage in combat with enemy robots attacking the designated base. outnumbered: Condition node - Checks if the agent is outnumbered by enemy robots. retreat: Action node - Makes the agent retreat to a safer location. call_for_reinforcements: Action node - Makes the agent request reinforcements from nearby robots.,"Defend the designated base from enemy attacks. If outnumbered, retreat and call for reinforcements.","
<BehaviorTree>
<Sequence>
<Action>defend_base</Action>
<Selector>
<Sequence>
<Condition>outnumbered</Condition>
<Action>retreat</Action>
<Action>call_for_reinforcements</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
"Transport a heavy object to a specific location. If the object is dropped, pick it up and continue moving.",Use the following behaviors to generate XML Behavior tree based on the user command: transport_object: Action node - Makes the agent move while carrying a heavy object to a specific location. object_dropped: Condition node - Checks if the agent has dropped the object. pick_up_object: Action node - Makes the agent pick up the dropped object and continue moving with it.,"Transport a heavy object to a specific location. If the object is dropped, pick it up and continue moving.","
<BehaviorTree>
<Sequence>
<Action>transport_object</Action>
<Sequence>
<Condition>object_dropped</Condition>
<Action>pick_up_object</Action>
<Action>transport_object</Action>
</Sequence>
</Sequence>
</BehaviorTree>"
Work together with other robots to lift and move a large obstacle.,Use the following behaviors to generate XML Behavior tree based on the user command: lift_obstacle: Action node - Makes the agent gather with other robots to lift and move a large obstacle. check_cooperation: Action node - Makes the agent communicate with other robots to ensure cooperation in lifting the obstacle. move_to_destinations: Subtree node - Represents a behavior tree for moving the obstacle to the designated destination.,Work together with other robots to lift and move a large obstacle.,"
<BehaviorTree>
<Sequence>
<Action>lift_obstacle</Action>
<Action>check_cooperation</Action>
<Action>move_to_destinations</Action>
</Sequence>
</BehaviorTree>"
Search for and rescue trapped robots in a disaster-stricken area.,Use the following behaviors to generate XML Behavior tree based on the user command: search_area: Action node - Makes the agent search the disaster-stricken area for any trapped robots. rescue_robot: Action node - Makes the agent use the appropriate tools to rescue a trapped robot. check_rescue_success: Condition node - Checks if the rescue was successful. move_to_next_location: Action node - Makes the agent move to the next designated location to continue the search and rescue mission.,Search for and rescue trapped robots in a disaster-stricken area.,"
<BehaviorTree>
<Sequence>
<Selector>
<Sequence>
<Action>search_area</Action>
<Sequence>
<Condition>robot_found</Condition>
<Action>rescue_robot</Action>
<Selector>
<Sequence>
<Condition>check_rescue_success</Condition>
<Action>move_to_next_location</Action>
</Sequence>
</Selector>
</Sequence>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
Navigate through a maze and reach the end point.,Use the following behaviors to generate XML Behavior tree based on the user command: navigate_maze: Action node - Makes the agent navigate through the maze using its sensors and predefined pathfinding algorithm. check_finished: Condition node - Checks if the agent has reached the end point. move_to_next_step: Action node - Makes the agent move to the next step according to the predefined path.,Navigate through a maze and reach the end point.,"
<BehaviorTree>
<Sequence>
<Action>navigate_maze</Action>
<Sequence>
<Condition>not_finished</Condition>
<Action>move_to_next_step</Action>
</Sequence>
</Sequence>
</BehaviorTree>"
Coordinated movement with other robots to form a specific shape or figure.,Use the following behaviors to generate XML Behavior tree based on the user command: move_to_designated_locations: Subtree node - Represents a behavior tree for each agent to move to the designated location for forming the shape. communicate_and_align: Action node - Makes the agent communicate with other robots to align themselves into the specified shape.,Coordinated movement with other robots to form a specific shape or figure.,"
<BehaviorTree>
<Sequence>
<Action>move_to_designated_locations</Action>
<Selector>
<Sequence>
<Condition>reached_designated_locations</Condition>
<Action>communicate_and_align</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
Collaborate with other robots to build a structure using provided materials.,Use the following behaviors to generate XML Behavior tree based on the user command: search_for_materials: Action node - Makes the agent search and gather the required materials for building the structure. build_structure: Action node - Makes the agent use the gathered materials to build the desired structure. check_completion: Condition node - Checks if the structure has been built successfully.,Collaborate with other robots to build a structure using provided materials.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>search_for_materials</Action>
<Sequence>
<Condition>has_materials</Condition>
<Action>build_structure</Action>
</Sequence>
</Selector>
</Sequence>
<Selector>
<Sequence>
<Condition>check_completion</Condition>
<Action>celebrate</Action>
</Sequence>
</Selector>
</BehaviorTree>"
Search for and collect valuable resources in a designated area.,Use the following behaviors to generate XML Behavior tree based on the user command: search_area: Action node - Makes the agent search a designated area for valuable resources. collect_resource: Action node - Makes the agent collect the valuable resource. check_collect_success: Condition node - Checks if the resource was successfully collected. move_to_next_location: Action node - Makes the agent move to the next designated location to continue the resource collection mission.,Search for and collect valuable resources in a designated area.,"
<BehaviorTree>
<Sequence>
<Selector>
<Sequence>
<Action>search_area</Action>
<Sequence>
<Condition>resource_found</Condition>
<Action>collect_resource</Action>
<Selector>
<Sequence>
<Condition>check_collect_success</Condition>
<Action>move_to_next_location</Action>
</Sequence>
</Selector>
</Sequence>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
Cooperate with other robots to clear debris from a disaster-stricken area.,Use the following behaviors to generate XML Behavior tree based on the user command: clear_debris: Action node - Makes the agent use its tools and sensors to clear debris from the designated area. notify_progress: Action node - Makes the agent communicate with other robots to inform them of the progress made. check_completion: Condition node - Checks if all debris has been cleared from the designated area.,Cooperate with other robots to clear debris from a disaster-stricken area.,"
<BehaviorTree>
<Sequence>
<Action>clear_debris</Action>
<Sequence>
<Condition>not_finished</Condition>
<Action>notify_progress</Action>
</Sequence>
<Selector>
<Sequence>
<Action>check_completion</Action>
<Action>celebrate</Action>
</Sequence>
</Selector>
</BehaviorTree>"
Navigate through a hazardous environment and reach a safe zone.,Use the following behaviors to generate XML Behavior tree based on the user command: navigate_hazardous_area: Action node - Makes the agent navigate through the hazardous environment while avoiding any dangers. check_safe: Condition node - Checks if the agent has reached a safe zone. move_to_next_step: Action node - Makes the agent move to the next step according to the predefined path.,Navigate through a hazardous environment and reach a safe zone.,"
<BehaviorTree>
<Sequence>
<Action>navigate_hazardous_area</Action>
<Sequence>
<Condition>not_safe</Condition>
<Action>move_to_next_step</Action>
</Sequence>
<Selector>
<Sequence>
<Condition>check_safe</Condition>
<Action>celebrate</Action>
</Sequence>
</Selector>
</BehaviorTree>"
Carry out a designated task while communicating and coordinating with other robots in the vicinity.,Use the following behaviors to generate XML Behavior tree based on the user command: carry_out_task: Action node - Makes the agent carry out the designated task while using its sensors and tools. communicate: Action node - Enables the agent to communicate with other robots in the vicinity. coordinate: Action node - Makes the agent coordinate its actions with other robots to efficiently complete the task.,Carry out a designated task while communicating and coordinating with other robots in the vicinity.,"
<BehaviorTree>
<Sequence>
<Selector>
<Sequence>
<Action>carry_out_task</Action>
<Action>communicate</Action>
<Action>coordinate</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>4."
Collect resources from different locations and deposit them at a designated area.,Use the following behaviors to generate XML Behavior tree based on the user command: collect_resources: Action node - Makes the agent collect resources from the environment. deposit_resources: Action node - Makes the agent deposit resources at a designated area. check_designated_area: Condition node - Checks if the agent is at the designated deposit area.,Collect resources from different locations and deposit them at a designated area.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>check_designated_area</Action>
<Action>deposit_resources</Action>
</Sequence>
<Action>collect_resources</Action>
</Selector>
</BehaviorTree>"
"If a member of the swarm gets stuck, activate a rescue protocol to assist them.",Use the following behaviors to generate XML Behavior tree based on the user command: check_swarm_status: Condition node - Checks if any member of the swarm is stuck. activate_rescue_protocol: Action node - Triggers a coordinated rescue protocol to assist the stuck member.,"If a member of the swarm gets stuck, activate a rescue protocol to assist them.","
<BehaviorTree>
<Sequence>
<Condition>check_swarm_status</Condition>
<Action>activate_rescue_protocol</Action>
</Sequence>
</BehaviorTree>"
Prioritize attacking enemies that pose the biggest threat first.,"Use the following behaviors to generate XML Behavior tree based on the user command: prioritze_targets: Action node - Makes the agent prioritize targets based on a set of rules (e.g. threat level, proximity). attack_target: Action node - Makes the agent attack the prioritized target.",Prioritize attacking enemies that pose the biggest threat first.,"
<BehaviorTree>
<Sequence>
<Action>prioritize_targets</Action>
<Action>attack_target</Action>
</Sequence>
</BehaviorTree>"
Avoid obstacles while navigating to a specific location.,Use the following behaviors to generate XML Behavior tree based on the user command: avoid_obstacles: Action node - Makes the agent avoid obstacles while moving to a target location. go_to_location: Action node (same as before). check_for_obstacles: Condition node - Checks for any obstacles in the agent's path.,Avoid obstacles while navigating to a specific location.,"
<BehaviorTree>
<Selector>
<Condition>check_for_obstacles</Condition>
<Sequence>
<Action>avoid_obstacles</Action>
<Action>go_to_location</Action>
</Sequence>
</Selector>
</BehaviorTree>"
Respond to distress calls from other agents in the swarm.,Use the following behaviors to generate XML Behavior tree based on the user command: listen_for_distress_calls: Condition node - Checks for any incoming distress calls from other agents. respond_to_distress_call: Action node - Triggers a coordinated response to assist the agent in distress.,Respond to distress calls from other agents in the swarm.,"
<BehaviorTree>
<Sequence>
<Condition>listen_for_distress_calls</Condition>
<Action>respond_to_distress_call</Action>
</Sequence>
</BehaviorTree>"
Explore the environment while maintaining a safe distance from known threats.,Use the following behaviors to generate XML Behavior tree based on the user command: explore_area: Action node - Makes the agent explore the environment. maintain_safe_distance: Action node - Makes the agent maintain a safe distance from known threats. check_threats: Condition node - Checks for known threats in the environment.,Explore the environment while maintaining a safe distance from known threats.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>check_threats</Action>
<Action>maintain_safe_distance</Action>
</Sequence>
<Action>explore_area</Action>
</Selector>
</BehaviorTree>"
Retrieve a lost teammate and bring them back to the group.,Use the following behaviors to generate XML Behavior tree based on the user command: find_lost_teammate: Action node - Makes the agent search for the lost teammate. retrieve_teammate: Action node - Makes the agent retrieve the lost teammate and bring them back to the group. check_group_status: Condition node - Checks if all members of the group are accounted for.,Retrieve a lost teammate and bring them back to the group.,"
<BehaviorTree>
<Sequence>
<Selector>
<Condition>check_group_status</Condition>
<Sequence>
<Action>find_lost_teammate</Action>
<Action>retrieve_teammate</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
Avoid friendly fire while attacking enemies.,Use the following behaviors to generate XML Behavior tree based on the user command: avoid_friendlies: Action node - Makes the agent avoid friendly units while attacking enemies. attack_target: Action node - Makes the agent attack the specified target. check_friendlies_in_range: Condition node - Checks for friendly units in the agent's attack range.,Avoid friendly fire while attacking enemies.,"
<BehaviorTree>
<Selector>
<Condition>check_friendlies_in_range</Condition>
<Sequence>
<Action>avoid_friendlies</Action>
<Action>attack_target</Action>
</Sequence>
</Selector>
</BehaviorTree>"
Coordinate with other agents to form a defensive formation.,Use the following behaviors to generate XML Behavior tree based on the user command: engage_in_formation: Action node - Makes the agent engage in a coordinated defensive formation with other agents. check_team_status: Condition node - Checks if all members of the team are in formation.,Coordinate with other agents to form a defensive formation.,"
<BehaviorTree>
<Sequence>
<Condition>check_team_status</Condition>
<Action>engage_in_formation</Action>
</Sequence>
</BehaviorTree>"
Prioritize protecting the injured or weaker members of the group.,"Use the following behaviors to generate XML Behavior tree based on the user command: prioritize_targets: Action node - Makes the agent prioritize targets based on a set of rules (e.g. proximity, threat level). protect_target: Action node - Makes the agent protect the prioritized target (e.g. by shielding them). check_team_member_status: Condition node - Checks the status of team members (e.g. health, strength).",Prioritize protecting the injured or weaker members of the group.,"
<BehaviorTree>
<Sequence>
<Action>check_team_member_status</Action>
<Selector>
<Action>protect_target</Action>
<Sequence>
<Action>prioritize_targets</Action>
<Action>protect_target</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
Use specialized behaviors to navigate through complex terrains.,"Use the following behaviors to generate XML Behavior tree based on the user command: navigate_complex_terrains: Action node - Makes the agent use specialized behaviors and strategies to navigate through complex terrains (e.g. climbing, jumping, crawling). check_terrain_difficulty: Condition node - Checks for the difficulty level of the terrain.",Use specialized behaviors to navigate through complex terrains.,"
<BehaviorTree>
<Sequence>
<Action>check_terrain_difficulty</Action>
<Selector>
<Condition>check_team_status</Condition>
<Sequence>
<Action>navigate_complex_terrains</Action>
<Action>take_action_accordingly</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
Perform reconnaissance and gather information about enemy positions.,"Use the following behaviors to generate XML Behavior tree based on the user command: perform_reconnaissance: Action node - Makes the agent use specialized behaviors and strategies to gather information about enemy positions (e.g. stealth, observation). report_information: Action node - Makes the agent report the gathered information to the group leader. check_for_actions_to_take: Condition node - Checks for any specific actions to be taken based on the gathered information.",Perform reconnaissance and gather information about enemy positions.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>perform_reconnaissance</Action>
<Action>report_information</Action>
<Condition>check_for_actions_to_take</Condition>
</Sequence>
<Action>carry_out_task_accordingly</Action>
</Selector>
</BehaviorTree>"
Safeguard valuable resources and prevent theft by enemies.,"Use the following behaviors to generate XML Behavior tree based on the user command: safeguard_resources: Action node - Makes the agent use specialized behaviors and strategies to safeguard valuable resources (e.g. patrolling, setting traps). check_for_enemy_threats: Condition node - Checks for any enemy threats to the resources.",Safeguard valuable resources and prevent theft by enemies.,"
<BehaviorTree>
<Sequence>
<Action>check_for_enemy_threats</Action>
<Selector>
<Condition>is_threat_detected</Condition>
<Sequence>
<Action>safeguard_resources</Action>
<Action>take_appropriate_action</Action>
</Sequence>
</Selector>
<Action>continue_safeguarding</Action>
</Sequence>
</BehaviorTree>"
Communicate with other agents in the swarm using a designated system.,Use the following behaviors to generate XML Behavior tree based on the user command: communicate_with_team: Action node - Makes the agent use designated communication behaviors and strategies to communicate with other agents in the swarm. check_for_new_information: Condition node - Checks for any new information received from other agents. update_strategy_accordingly: Action node - Updates the agent's behavior and strategy based on the received information.,Communicate with other agents in the swarm using a designated system.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>check_for_new_information</Action>
<Action>update_strategy_accordingly</Action>
</Sequence>
<Action>communicate_with_team</Action>
</MeetByBehaviorTree>"
Maneuver through tight spaces to reach a target location.,"Use the following behaviors to generate XML Behavior tree based on the user command: navigate_through_tight_spaces: Action node - Makes the agent use specialized behaviors and strategies to maneuver through tight spaces (e.g. crawling, squeezing). check_for_obstacles: Condition node - Checks for any obstacles in the tight space.",Maneuver through tight spaces to reach a target location.,"
<BehaviorTree>
<Selector>
<Condition>check_for_obstacles</Condition>
<Sequence>
<Action>navigate_through_tight_spaces</Action>
<Action>reach_target_location</Action>
</Sequence>
</Selector>
</BehaviorTree>"
Provide cover fire while other agents evacuate an injured teammate.,Use the following behaviors to generate XML Behavior tree based on the user command: provide_cover_fire: Action node - Makes the agent provide cover fire to distract enemies and protect other agents during an evacuation. check_for_teammate_needing_evac: Condition node - Checks for a teammate in need of evacuation. assist_teammate: Action node - Helps the injured teammate evacuate safely.,Provide cover fire while other agents evacuate an injured teammate.,"
<BehaviorTree>
<Sequence>
<Condition>check_for_teammate_needing_evac</Condition>
<Selector>
<Action>provide_cover_fire</Action>
<Sequence>
<Action>assist_teammate</Action>
<Action>go_to_safety</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
Coordinate with other swarm agents to build a structure.,"Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_for_construction: Action node - Makes the agent coordinate with other agents to build a structure, assigning tasks and ensuring efficient completion. check_for_available_resources: Condition node - Checks for available resources for construction. collect_resources: Action node - Makes the agent collect resources if needed.",Coordinate with other swarm agents to build a structure.,"
<BehaviorTree>
<Sequence>
<Action>check_for_available_resources</Action>
<Selector>
<Condition>resources_available</Condition>
<Sequence>
<Action>coordinate_for_construction</Action>
<Action>assign_tasks</Action>
<Action>collect_resources</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
Navigate through an obstacle course using collaborative effort.,Use the following behaviors to generate XML Behavior tree based on the user command: move_forward: Action node - Makes the agent move forward. turn_left: Action node - Makes the agent turn left. turn_right: Action node - Makes the agent turn right. avoid_obstacles: Condition node - Checks if there are any obstacles ahead. communicate_position: Action node - Allows agents to communicate their current position to each other for coordination.,Navigate through an obstacle course using collaborative effort.,"
<BehaviorTree>
<Sequence>
<Action>move_forward</Action>
<Condition>avoid_obstacles</Condition>
<Sequence>
<Action>communicate_position</Action>
<Selector>
<Action>turn_left</Action>
<Action>turn_right</Action>
</Selector>
</Sequence>
</Sequence>
</BehaviorTree>"
Conduct a coordinated search and rescue mission in a disaster area.,Use the following behaviors to generate XML Behavior tree based on the user command: search_area: Subtree node - Represents a behavior tree for searching a specific area. check_victims: Action node - Checks for any victims in the vicinity. perform_rescue: Action node - Performs the necessary rescue actions. communicate_rescue_status: Action node - Allows agents to communicate the status of their rescue efforts to each other.,Conduct a coordinated search and rescue mission in a disaster area.,"
<BehaviorTree>
<Sequence>
<Action>search_area</Action>
<Sequence>
<Condition>check_victims</Condition>
<Condition>found_victim</Condition>
<Action>perform_rescue</Action>
</Sequence>
<Sequence>
<Action>communicate_rescue_status</Action>
<Selector>
<Action>move_to_next_area</Action>
<Action>continue_search</Action>
</Selector>
</Sequence>
</Sequence>
</BehaviorTree>"
Distribute tasks evenly among a swarm of robots to complete before time runs out.,Use the following behaviors to generate XML Behavior tree based on the user command: find_task: Action node - Makes the agent find an available task. task_completed: Action node - Marks a task as completed. remaining_tasks: Condition node - Checks if there are still tasks to be completed.,Distribute tasks evenly among a swarm of robots to complete before time runs out.,"
<BehaviorTree>
<Sequence>
<Condition>remaining_tasks</Condition>
<Sequence>
<Action>find_task</Action>
<Action>task_completed</Action>
</Sequence>
</Sequence>
</BehaviorTree>"
Use swarm of robots to build a structure using specific materials.,Use the following behaviors to generate XML Behavior tree based on the user command: find_material: Action node - Makes the agent find a specific material. bring_material: Action node - Brings the material to the construction site. build_structure: Action node - Constructs the structure. structure_complete: Condition node - Checks if the structure is complete.,Use swarm of robots to build a structure using specific materials.,"
<BehaviorTree>
<Sequence>
<Condition>structure_complete</Condition>
<Sequence>
<Action>find_material</Action>
<Action>bring_material</Action>
<Action>build_structure</Action>
</Sequence>
</Sequence>
</BehaviorTree>"
'Harvest ripe crops and deliver to designated storage area.',"Use only the following behaviors to generate XML Behavior tree based on the user command: {harvest_crops: 'Action node: Harvest ripe crops from the field.
Returns: Always returns True, indicating the action was executed.', is_storage_area_designated: 'Condition node: Check if a storage area has been designated.
Returns: True if a storage area has been designated, otherwise False.', deliver_to_storage_area: 'Action node: Deliver harvested crops to the designated storage area.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.",Harvest ripe crops and deliver to designated storage area.,"
<BehaviorTree>
<Sequence>
<Action>harvest_crops</Action>
<Selector>
<Sequence>
<Condition>is_storage_area_designated</Condition>
<Action>deliver_to_storage_area</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
Collect data from all sensors and send to main server for analysis.,"Use only the following behaviors to generate XML Behavior tree based on the user command: {collect_sensor_data: 'Action node: Collect data from all sensors.
Returns: Always returns True, indicating the action was executed.', send_data_to_server: 'Action node: Send collected data to the main server for analysis.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.",Collect data from all sensors and send to main server for analysis.,"
<BehaviorTree>
<Sequence>
<Action>collect_sensor_data</Action>
<Action>send_data_to_server</Action>
</Sequence>
</BehaviorTree>"
"Navigate to a specific GPS location, avoid obstacles, and engage target at location.","Use only the following behaviors to generate XML Behavior tree based on the user command: {navigate_to_location: 'Action node: Navigate to a specific GPS location.
Returns: Always returns True, indicating the action was executed.', is_obstacle_present: 'Condition node: Check if an obstacle is present in the path.
Returns: True if an obstacle is present, otherwise False.', avoid_obstacle: 'Action node: Move around the obstacle.
Returns: Always returns True, indicating the action was executed.', engage_target: 'Action node: Engage the target at the specified location.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.","Navigate to a specific GPS location, avoid obstacles, and engage target at location.","
<BehaviorTree>
<Sequence>
<Action>navigate_to_location</Action>
<Selector>
<Sequence>
<Condition>is_obstacle_present</Condition>
<Action>avoid_obstacle</Action>
</Sequence>
</Selector>
<Action>engage_target</Action>
</Sequence>
</BehaviorTree>"
Patrol designated area and report any suspicious activity.,"Use only the following behaviors to generate XML Behavior tree based on the user command: {patrol_area: 'Action node: Patrol the designated area.
Returns: Always returns True, indicating the action was executed.', is_suspicious_activity: 'Condition node: Check if suspicious activity is detected.
Returns: True if suspicious activity is detected, otherwise False.', report_activity: 'Action node: Report any suspicious activity to the main server.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.",Patrol designated area and report any suspicious activity.,"
<BehaviorTree>
<Sequence>
<Action>patrol_area</Action>
<Selector>
<Sequence>
<Condition>is_suspicious_activity</Condition>
<Action>report_activity</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
Inspect infrastructure for damages and perform necessary repairs.,"Use only the following behaviors to generate XML Behavior tree based on the user command: {inspect_infrastructure: 'Action node: Inspect the infrastructure for any damages.
Returns: Always returns True, indicating the action was executed.', is_damage_present: 'Condition node: Check if any damage is present in the infrastructure.
Returns: True if damage is present, otherwise False.', repair_damage: 'Action node: Perform necessary repairs to the damaged infrastructure.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.",Inspect infrastructure for damages and perform necessary repairs.,"
<BehaviorTree>
<Sequence>
<Action>inspect_infrastructure</Action>
<Selector>
<Sequence>
<Condition>is_damage_present</Condition>
<Action>repair_damage</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
Retrieve and transport medical supplies to designated locations for distribution.,"Use only the following behaviors to generate XML Behavior tree based on the user command: {retrieve_supplies: 'Action node: Retrieve medical supplies from designated location.
Returns: Always returns True, indicating the action was executed.', transport_supplies: 'Action node: Transport the supplies to designated distribution locations.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.",Retrieve and transport medical supplies to designated locations for distribution.,"
<BehaviorTree>
<Sequence>
<Action>retrieve_supplies</Action>
<Action>transport_supplies</Action>
</Sequence>
</BehaviorTree>"
Search and rescue mission to find and retrieve lost individuals.,"Use only the following behaviors to generate XML Behavior tree based on the user command: {search_area: 'Action node: Begin searching the designated search area.
Returns: Always returns True, indicating the action was executed.', is_individual_found: 'Condition node: Check if an individual is found in the search area.
Returns: True if an individual is found, otherwise False.', retrieve_individual: 'Action node: Retrieve the individual and return them to safety.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.",Search and rescue mission to find and retrieve lost individuals.,"
<BehaviorTree>
<Sequence>
<Action>search_area</Action>
<Selector>
<Sequence>
<Condition>is_individual_found</Condition>
<Action>retrieve_individual</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
Investigate reported anomaly and collect data for analysis.,"Use only the following behaviors to generate XML Behavior tree based on the user command: {investigate_anomaly: 'Action node: Investigate the reported anomaly and collect any necessary data.
Returns: Always returns True, indicating the action was executed.', analyze_data: 'Action node: Send collected data to the main server for analysis.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.",Investigate reported anomaly and collect data for analysis.,"
<BehaviorTree>
<Sequence>
<Action>investigate_anomaly</Action>
<Action>analyze_data</Action>
</Sequence>
</BehaviorTree>"
Clean and maintain designated area.,"Use only the following behaviors to generate XML Behavior tree based on the user command: {clean_area: 'Action node: Begin cleaning the designated area.
Returns: Always returns True, indicating the action was executed.', maintain_area: 'Action node: Perform any necessary maintenance tasks to keep the area in good condition.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.",Clean and maintain designated area.,"
<BehaviorTree>
<Sequence>
<Action>clean_area</Action>
<Action>maintain_area</Action>
</Sequence>
</BehaviorTree>"
Patrol designated area and mark potential hazards for future removal.,"Use only the following behaviors to generate XML Behavior tree based on the user command: {patrol_area: 'Action node: Patrol the designated area.
Returns: Always returns True, indicating the action was executed.', is_hazard_present: 'Condition node: Check if a potential hazard is present.
Returns: True if a hazard is present, otherwise False.', mark_hazard: 'Action node: Mark the location of the potential hazard for future removal.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.",Patrol designated area and mark potential hazards for future removal.,"
<BehaviorTree>
<Sequence>
<Action>patrol_area</Action>
<Selector>
<Sequence>
<Condition>is_hazard_present</Condition>
<Action>mark_hazard</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
Transport heavy materials to designated construction site.,"Use only the following behaviors to generate XML Behavior tree based on the user command: {load_materials: 'Action node: Load heavy materials onto transport vehicle.
Returns: Always returns True, indicating the action was executed.', transport_materials: 'Action node: Transport materials to designated construction site.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.",Transport heavy materials to designated construction site.,"
<BehaviorTree>
<Sequence>
<Action>load_materials</Action>
<Action>transport_materials</Action>
</Sequence>
</BehaviorTree>"
Survey designated area and map out topography.,"Use only the following behaviors to generate XML Behavior tree based on the user command: {survey_area: 'Action node: Begin surveying the designated area.
Returns: Always returns True, indicating the action was executed.', map_topography: 'Action node: Map out the topography of the area using collected data.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.",Survey designated area and map out topography.,"
<BehaviorTree>
<Sequence>
<Action>survey_area</Action>
<Action>map_topography</Action>
</Sequence>
</BehaviorTree>"
Inspect and repair damaged power lines in a specified area.,"Use only the following behaviors to generate XML Behavior tree based on the user command: {inspect_power_lines: 'Action node: Inspect the designated area for any damaged power lines.
Returns: Always returns True, indicating the action was executed.', is_damage_present: 'Condition node: Check if damage to power lines is present.
Returns: True if damage is present, otherwise False.', repair_lines: 'Action node: Repair any damaged power lines.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.",Inspect and repair damaged power lines in a specified area.,"
<BehaviorTree>
<Sequence>
<Action>inspect_power_lines</Action>
<Selector>
<Sequence>
<Condition>is_damage_present</Condition>
<Action>repair_lines</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
Monitor and track weather patterns to predict potential disasters.,"Use only the following behaviors to generate XML Behavior tree based on the user command: {monitor_weather: 'Action node: Monitor and track weather patterns.
Returns: Always returns True, indicating the action was executed.', track_patterns: 'Action node: Use collected data to track patterns and predict potential disasters.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.",Monitor and track weather patterns to predict potential disasters.,"
<BehaviorTree>
<Sequence>
<Action>monitor_weather</Action>
<Action>track_patterns</Action>
</Sequence>
</BehaviorTree>"
Search and retrieve lost equipment in a designated area.,"Use only the following behaviors to generate XML Behavior tree based on the user command: {search_area: 'Action node: Begin searching the designated area.
Returns: Always returns True, indicating the action was executed.', is_equipment_found: 'Condition node: Check if the lost equipment is found.
Returns: True if equipment is found, otherwise False.', retrieve_equipment: 'Action node: Retrieve the lost equipment.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.",Search and retrieve lost equipment in a designated area.,"
<BehaviorTree>
<Sequence>
<Action>search_area</Action>
<Selector>
<Sequence>
<Condition>is_equipment_found</Condition>
<Action>retrieve_equipment</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
Monitor wildlife in a designated conservation area and report any anomalies.,"Use only the following behaviors to generate XML Behavior tree based on the user command: {monitor_wildlife: 'Action node: Monitor the designated conservation area for any wildlife activity.
Returns: Always returns True, indicating the action was executed.', is_anomaly_detected: 'Condition node: Check if any anomalies in wildlife behavior are detected.
Returns: True if an anomaly is detected, otherwise False.', report_anomaly: 'Action node: Report the anomaly to park rangers.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.",Monitor wildlife in a designated conservation area and report any anomalies.,"
<BehaviorTree>
<Sequence>
<Action>monitor_wildlife</Action>
<Selector>
<Sequence>
<Condition>is_anomaly_detected</Condition>
<Action>report_anomaly</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
Find and collect all resources within a given area.,Use the following behaviors to generate XML Behavior tree based on the user command: find_resource: Condition node - Checks if there is a resource within a given area. collect_resource: Action node - Collects the resource at the agent's current location. move_to_resource: Action node - Moves the agent to the location of the nearest resource. search_area: Subtree node - Represents a behavior tree for searching the given area for resources.,Find and collect all resources within a given area.,"
<BehaviorTree>
<Selector>
<Sequence>
<Condition>find_resource</Condition>
<Action>collect_resource</Action>
<Action>move_to_resource</Action>
</Sequence>
<Action>search_area</Action>
</Selector>
</BehaviorTree>"
Navigate through a maze while avoiding obstacles.,Use the following behaviors to generate XML Behavior tree based on the user command: random_move: Action node - Makes the agent randomly move to an adjacent location. check_obstacle: Condition node - Checks if there is an obstacle in the agent's current location. move_around_obstacle: Action node - Makes the agent move around the obstacle to continue navigation. move_to_exit: Action node - Moves the agent to the exit of the maze. navigate_maze: Subtree node - Represents a behavior tree for navigating through the maze.,Navigate through a maze while avoiding obstacles.,"
<BehaviorTree>
<Sequence>
<Action>move_to_exit</Action>
<Selector>
<Sequence>
<Condition>check_obstacle</Condition>
<Action>move_around_obstacle</Action>
</Sequence>
<Action>random_move</Action>
</Selector>
</Sequence>
</BehaviorTree>"
Work together to carry a heavy object to a specified location.,Use the following behaviors to generate XML Behavior tree based on the user command: get_heavy_object: Action node - Retrieves the heavy object at the agent's current location. carry_heavy_object: Action node - Carries the heavy object to the specified location. proximity_check: Condition node - Checks if another agent is within a certain distance. coordinate_movement: Action node - Coordinates movement with another agent while carrying the heavy object. move_to_destination: Action node - Moves the agent to the specified destination. carry_object_together: Subtree node - Represents a behavior tree for coordinating and carrying the heavy object together.,Work together to carry a heavy object to a specified location.,"
<BehaviorTree>
<Sequence>
<Action>get_heavy_object</Action>
<Selector>
<Sequence>
<Condition>proximity_check</Condition>
<Action>coordinate_movement</Action>
</Sequence>
<Action>carry_heavy_object</Action>
</Selector>
<Action>move_to_destination</Action>
</Sequence>
</BehaviorTree>"
Explore the environment and collect data.,Use the following behaviors to generate XML Behavior tree based on the user command: explore_area: Action node - Moves the agent to an unexplored area. collect_data: Action node - Collects data at the agent's current location. explore_and_collect: Subtree node - Represents a behavior tree for exploring and collecting data.,Explore the environment and collect data.,"
<BehaviorTree>
<Sequence>
<Action>explore_and_collect</Action>
<Action>explore_area</Action>
<Action>collect_data</Action>
</Sequence>
</BehaviorTree>"
Follow a designated leader while maintaining a specific formation.,Use the following behaviors to generate XML Behavior tree based on the user command: follow_leader: Action node - Makes the agent follow the designated leader. maintain_formation: Action node - Maintains a specific formation with the leader. change_formation: Action node - Changes the formation if necessary. designated_leader: Condition node - Checks if the agent is the designated leader. form_formation: Subtree node - Represents a behavior tree for forming and maintaining the specific formation.,Follow a designated leader while maintaining a specific formation.,"
<BehaviorTree>
<Selector>
<Sequence>
<Condition>designated_leader</Condition>
<Action>form_formation</Action>
</Sequence>
<Action>follow_leader</Action>
<Action>maintain_formation</Action>
<Action>change_formation</Action>
</Selector>
</BehaviorTree>"
Perform a coordinated dance routine.,Use the following behaviors to generate XML Behavior tree based on the user command: synchronize_moves: Action node - Synchronizes the agent's moves with other dancers. follow_routine: Action node - Follows the designated dance routine. change_moves: Action node - Changes dance moves if necessary. learn_routine: Subtree node - Represents a behavior tree for learning and performing the coordinated dance routine.,Perform a coordinated dance routine.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>learn_routine</Action>
<Action>follow_routine</Action>
<Action>synchronize_moves</Action>
</Sequence>
<Action>change_moves</Action>
</Selector>
</BehaviorTree>"
Work together to overcome an obstacle.,Use the following behaviors to generate XML Behavior tree based on the user command: get_object: Action node - Retrieves the object the agent needs help with. help_with_object: Action node - Assists the other agent in overcoming the obstacle. check_status: Condition node - Checks if the other agent has successfully overcome the obstacle. move_to_assist: Action node - Moves the agent to assist the other agent if necessary. overcome_obstacle: Subtree node - Represents a behavior tree for working together to overcome an obstacle.,Work together to overcome an obstacle.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>get_object</Action>
<Action>move_to_assist</Action>
<Action>help_with_object</Action>
</Sequence>
<Condition>check_status</Condition>
<Action>overcome_obstacle</Action>
</Selector>
</BehaviorTree>"
Gather information about a targeted location and report back.,Use the following behaviors to generate XML Behavior tree based on the user command: scout_location: Action node - Moves the agent to the targeted location. gather_info: Action node - Gathers information about the location. return_info: Action node - Returns the information to the designated location. report_info: Subtree node - Represents a behavior tree for gathering and reporting information.,Gather information about a targeted location and report back.,"
<BehaviorTree>
<Sequence>
<Action>report_info</Action>
<Action>gather_info</Action>
<Action>return_info</Action>
<Action>scout_location</Action>
</Sequence>
</BehaviorTree>"
Find and retrieve a lost item.,Use the following behaviors to generate XML Behavior tree based on the user command: find_lost_item: Condition node - Checks if the lost item is within a certain radius. retrieve_item: Action node - Retrieves the lost item at the agent's current location. search_area: Subtree node - Represents a behavior tree for searching the designated area for the lost item.,Find and retrieve a lost item.,"
<BehaviorTree>
<Selector>
<Sequence>
<Condition>find_lost_item</Condition>
<Action>retrieve_item</Action>
</Sequence>
<Action>search_area</Action>
</Selector>
</BehaviorTree>"
Work together to build a structure.,Use the following behaviors to generate XML Behavior tree based on the user command: get_materials: Action node - Retrieves the necessary materials for building the structure. build_structure: Action node - Builds the structure with the materials at the agent's current location. check_progress: Condition node - Checks if the structure is successfully being built. coordinate_building: Action node - Coordinates building with other agents involved. work_together: Subtree node - Represents a behavior tree for working together to build a structure.,Work together to build a structure.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>get_materials</Action>
<Action>coordinate_building</Action>
<Action>build_structure</Action>
</Sequence>
<Action>check_progress</Action>
<Action>work_together</Action>
</Selector>
</BehaviorTree>"
Patrol a designated area and report any anomalies.,Use the following behaviors to generate XML Behavior tree based on the user command: patrol_area: Action node - Moves the agent to designated patrol points. report_anomaly: Action node - Reports any anomalies found at the agent's current location. receive_info: Action node - Receives information from other agents patrolling the area. analyze_info: Action node - Analyzes the received information to determine if an anomaly is present. anomaly_detection: Subtree node - Represents a behavior tree for patrolling and reporting anomalies.,Patrol a designated area and report any anomalies.,"
<BehaviorTree>
<Sequence>
<Action>anomaly_detection</Action>
<Action>patrol_area</Action>
<Action>report_anomaly</Action>
</Sequence>
<Action>receive_info</Action>
<Action>analyze_info</Action>
</BehaviorTree>"
Perform a coordinated rescue mission.,Use the following behaviors to generate XML Behavior tree based on the user command: find_victim: Condition node - Checks if there is a victim within a certain proximity. rescue_victim: Action node - Rescues the victim at the agent's current location. coordinate_rescue: Action node - Coordinates with other agents involved in the rescue mission. move_to_victim: Action node - Moves the agent to the victim's location. perform_rescue: Subtree node - Represents a behavior tree for performing a coordinated rescue mission.,Perform a coordinated rescue mission.,"
<BehaviorTree>
<Selector>
<Sequence>
<Condition>find_victim</Condition>
<Action>move_to_victim</Action>
<Action>coordinate_rescue</Action>
<Action>rescue_victim</Action>
</Sequence>
<Action>perform_rescue</Action>
</Selector>
</BehaviorTree>"
Coordinate and execute a synchronized swarm attack.,Use the following behaviors to generate XML Behavior tree based on the user command: locate_target: Action node - Moves the agent to the designated target location. surround_target: Action node - Surrounds the target location with other agents. attack_target: Action node - Performs a coordinated swarm attack on the target. coordinate_attack: Subtree node - Represents a behavior tree for coordinating and executing a synchronized swarm attack.,Coordinate and execute a synchronized swarm attack.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>locate_target</Action>
<Action>surround_target</Action>
<Action>attack_target</Action>
</Sequence>
<Action>coordinate_attack</Action>
</Selector>
</BehaviorTree>"
Navigate through a hazardous environment while avoiding danger.,Use the following behaviors to generate XML Behavior tree based on the user command: random_move: Action node - Moves the agent to a random location. check_danger: Condition node - Checks if there is a danger in the agent's current location. move_around_danger: Action node - Helps the agent avoid the danger by moving around it. move_to_safety: Action node - Moves the agent to a safe location. navigate_hazard: Subtree node - Represents a behavior tree for navigating through a hazardous environment while avoiding danger.,Navigate through a hazardous environment while avoiding danger.,"
<BehaviorTree>
<Selector>
<Sequence>
<Condition>check_danger</Condition>
<Action>move_around_danger</Action>
</Sequence>
<Action>random_move</Action>
<Action>move_to_safety</Action>
</Selector>
</BehaviorTree>"
Protect and defend a designated area.,Use the following behaviors to generate XML Behavior tree based on the user command: patrol_area: Action node - Moves the agent to designated patrol points. defend_area: Action node - Defends the designated area from any threats. receive_info: Action node - Receives information from other agents patrolling the area. analyze_info: Action node - Analyzes the received information to determine if there is a threat. protect_area: Subtree node - Represents a behavior tree for patrolling and protecting a designated area.,Protect and defend a designated area.,"
<BehaviorTree>
<Sequence>
<Action>protect_area</Action>
<Action>patrol_area</Action>
<Action>defend_area</Action>
</Sequence>
<Action>receive_info</Action>
<Action>analyze_info</Action>
</BehaviorTree>"
Find and destroy enemy targets.,Use the following behaviors to generate XML Behavior tree based on the user command: locate_target: Action node - Moves the agent to the designated target location. destroy_target: Action node - Destroys the designated target. check_status: Condition node - Checks if the target has been successfully destroyed. move_to_target: Action node - Moves the agent closer to the target if necessary. engage_target: Subtree node - Represents a behavior tree for locating and destroying enemy targets.,Find and destroy enemy targets.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>locate_target</Action>
<Action>move_to_target</Action>
<Action>destroy_target</Action>
</Sequence>
<Action>check_status</Action>
<Action>engage_target</Action>
</Selector>
</BehaviorTree>"
Work together to defend against a common threat.,Use the following behaviors to generate XML Behavior tree based on the user command: locate_threat: Action node - Moves the agent to the designated threat location. coordinate_defense: Action node - Coordinates with other agents to defend against the threat. defend_against_threat: Action node - Performs a coordinated defense against the threat. protect_all: Subtree node - Represents a behavior tree for protecting against a common threat.,Work together to defend against a common threat.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>locate_threat</Action>
<Action>coordinate_defense</Action>
<Action>defend_against_threat</Action>"
"If the battery is low, go to the charging station. Otherwise, continue to explore the environment.",Use the following behaviors to generate XML Behavior tree based on the user command: is_battery_low: Condition node - Checks if the battery level is below a specified threshold. go_to_charging_station: Action node - Makes the agent navigate to the nearest charging station. explore_environment: Action node (same as before).,"If the battery is low, go to the charging station. Otherwise, continue to explore the environment.","
<BehaviorTree>
<Selector>
<Sequence>
<Condition>is_battery_low</Condition>
<Action>go_to_charging_station</Action>
</Sequence>
<Action>explore_environment</Action>
</Selector>
</BehaviorTree>"
Collect resources and bring them to the base.,Use the following behaviors to generate XML Behavior tree based on the user command: collect_resources: Action node - Makes the agent collect nearby resources. bring_to_base: Action node - Makes the agent navigate to the base and drop off gathered resources.,Collect resources and bring them to the base.,"
<BehaviorTree>
<Sequence>
<Action>collect_resources</Action>
<Action>bring_to_base</Action>
</Sequence>
</BehaviorTree>"
"If there is an obstacle, take a different path. Otherwise, continue towards the destination.",Use the following behaviors to generate XML Behavior tree based on the user command: is_obstacle_present: Condition node - Checks if there is an obstacle in the agent's path. take_different_path: Action node - Makes the agent navigate around the obstacle. move_towards_destination: Action node (same as before).,"If there is an obstacle, take a different path. Otherwise, continue towards the destination.","
<BehaviorTree>
<Selector>
<Sequence>
<Condition>is_obstacle_present</Condition>
<Action>take_different_path</Action>
</Sequence>
<Action>move_towards_destination</Action>
</Selector>
</BehaviorTree>"
"Pick up object, rotate 180 degrees, and place it at a specific location.",Use the following behaviors to generate XML Behavior tree based on the user command: pick_up_object: Action node - Makes the agent pick up a nearby object. rotate_180: Action node - Makes the agent turn 180 degrees. place_at_location: Action node - Makes the agent navigate to a specific location and place the object.,"Pick up object, rotate 180 degrees, and place it at a specific location.","
<BehaviorTree>
<Sequence>
<Action>pick_up_object</Action>
<Action>rotate_180</Action>
<Action>place_at_location</Action>
</Sequence>
</BehaviorTree>"
Move to the nearest teammate and form a defensive formation.,Use the following behaviors to generate XML Behavior tree based on the user command: move_to_teammate: Action node - Makes the agent navigate to the nearest teammate. form_defensive_formation: Action node - Makes the agent position itself in a defensive formation with its teammate.,Move to the nearest teammate and form a defensive formation.,"
<BehaviorTree>
<Sequence>
<Action>move_to_teammate</Action>
<Action>form_defensive_formation</Action>
</Sequence>
</BehaviorTree>"
"If there are no nearby resources, explore the environment. Otherwise, collect the nearest resource.",Use the following behaviors to generate XML Behavior tree based on the user command: is_resource_nearby: Condition node - Checks if there is a nearby resource. explore_environment: Action node - Makes the agent explore the environment. collect_nearest_resource: Action node - Makes the agent collect the nearest resource.,"If there are no nearby resources, explore the environment. Otherwise, collect the nearest resource.","
<BehaviorTree>
<Selector>
<Sequence>
<Condition>is_resource_nearby</Condition>
<Action>collect_nearest_resource</Action>
</Sequence>
<Action>explore_environment</Action>
</Selector>
</BehaviorTree>"
Scan for enemy drones using infrared sensors and engage if detected.,Use the following behaviors to generate XML Behavior tree based on the user command: scan_for_enemies: Action node - Makes the agent use infrared sensors to scan for nearby enemies. engage_enemy: Action node - Makes the agent engage the enemy if detected.,Scan for enemy drones using infrared sensors and engage if detected.,"
<BehaviorTree>
<Sequence>
<Action>scan_for_enemies</Action>
<Action>engage_enemy</Action>
</Sequence>
</BehaviorTree>"
Follow the leader and maintain a specific distance.,Use the following behaviors to generate XML Behavior tree based on the user command: follow_leader: Action node - Makes the agent follow the designated leader. maintain_distance: Action node - Makes the agent maintain a specific distance from the leader.,Follow the leader and maintain a specific distance.,"
<BehaviorTree>
<Sequence>
<Action>follow_leader</Action>
<Action>maintain_distance</Action>
</Sequence>
</BehaviorTree>"
Detect and avoid obstacles while navigating to a specific location.,Use the following behaviors to generate XML Behavior tree based on the user command: detect_obstacles: Action node - Makes the agent use sensors to detect obstacles in its path. avoid_obstacles: Action node - Makes the agent navigate around detected obstacles. navigate_to_location: Action node - Makes the agent navigate to a specified location.,Detect and avoid obstacles while navigating to a specific location.,"
<BehaviorTree>
<Sequence>
<Action>detect_obstacles</Action>
<Action>avoid_obstacles</Action>
<Action>navigate_to_location</Action>
</Sequence>
</BehaviorTree>"
"If there is a teammate nearby, coordinate movement and avoid collisions.",Use the following behaviors to generate XML Behavior tree based on the user command: is_teammate_nearby: Condition node - Checks if there is a teammate within a specified range. coordinate_movement: Action node - Makes the agent coordinate movement with its teammate to avoid collisions.,"If there is a teammate nearby, coordinate movement and avoid collisions.","
<BehaviorTree>
<Selector>
<Sequence>
<Condition>is_teammate_nearby</Condition>
<Action>coordinate_movement</Action>
</Sequence>
<Action>move_independently</Action>
</Selector>
</BehaviorTree>"
Search for and gather all resources within a specific area.,Use the following behaviors to generate XML Behavior tree based on the user command: search_for_resources: Action node - Makes the agent use sensors to search for resources within a specific area. gather_resources: Action node - Makes the agent gather any detected resources.,Search for and gather all resources within a specific area.,"
<BehaviorTree>
<Sequence>
<Action>search_for_resources</Action>
<Action>gather_resources</Action>
</Sequence>
</BehaviorTree>"
Patrol a designated area and react to any detected intruders.,Use the following behaviors to generate XML Behavior tree based on the user command: patrol_area: Action node - Makes the agent move within a designated area. detect_intruders: Action node - Makes the agent use sensors to detect any intruders in its path. react_to_intruders: Action node - Makes the agent perform a defensive action upon detecting an intruder.,Patrol a designated area and react to any detected intruders.,"
<BehaviorTree>
<Sequence>
<Action>patrol_area</Action>
<Action>detect_intruders</Action>
<Action>react_to_intruders</Action>
</Sequence>
</BehaviorTree>"
"If a teammate is under attack, provide backup support and defend them.",Use the following behaviors to generate XML Behavior tree based on the user command: is_teammate_under_attack: Condition node - Checks if a teammate is currently engaged in combat. provide_back_support: Action node - Makes the agent provide backup support to the teammate. defend_teammate: Action node - Makes the agent defend the teammate in danger.,"If a teammate is under attack, provide backup support and defend them.","
<BehaviorTree>
<Selector>
<Sequence>
<Condition>is_teammate_under_attack</Condition>
<Action>provide_back_support</Action>
</Sequence>
<Action>defend_teammate</Action>
</Selector>
</BehaviorTree>"
Use swarm tactics to surround and capture a target object.,Use the following behaviors to generate XML Behavior tree based on the user command: surround_target: Action node - Makes the agent position itself strategically around the target object. capture_target: Action node - Makes the agent use its grasping mechanism to capture the target object.,Use swarm tactics to surround and capture a target object.,"
<BehaviorTree>
<Sequence>
<Action>surround_target</Action>
<Action>capture_target</Action>
</Sequence>
</BehaviorTree>"
Communicate with nearby agents and coordinate movement for a synchronized task.,Use the following behaviors to generate XML Behavior tree based on the user command: communicate_with_teammates: Action node - Makes the agent send and receive signals to communicate with nearby agents. coordinate_movement: Action node - Makes the agent coordinate movement with the other agents for a synchronized task.,Communicate with nearby agents and coordinate movement for a synchronized task.,"
<BehaviorTree>
<Sequence>
<Action>communicate_with_teammates</Action>
<Action>coordinate_movement</Action>
</Sequence>
</BehaviorTree>"
"If the environment changes, adapt and update the behavior tree accordingly.",Use the following behaviors to generate XML Behavior tree based on the user command: is_environment_changed: Condition node - Checks if there have been any updates in the environment. adapt_to_changes: Action node - Makes the agent adjust and update its behavior tree accordingly.,"If the environment changes, adapt and update the behavior tree accordingly.","
<BehaviorTree>
<Selector>
<Sequence>
<Condition>is_environment_changed</Condition>
<Action>adapt_to_changes</Action>
</Sequence>
<Action>continue_with_original_tree</Action>
</Selector>
</BehaviorTree>"
Perform a coordinated task with other agents to achieve a collective goal.,Use the following behaviors to generate XML Behavior tree based on the user command: perform_coordinated_task: Action node - Makes the agent collaborate with other agents to perform a specific task. achieve_collective_goal: Action node - Makes the agent work together with other agents to achieve a collective goal.,Perform a coordinated task with other agents to achieve a collective goal.,"
<BehaviorTree>
<Sequence>
<Action>perform_coordinated_task</Action>
<Action>achieve_collective_goal</Action>
</Sequence>
</BehaviorTree>"
Patrol a specific area and report any suspicious activity.,"Use the following behaviors to generate XML Behavior tree based on the user command: patrol_area: Subtree node - Represents a behavior tree for patrolling a designated area.
check_for_suspicious_activity: Action node - Scans the surroundings for any suspicious activity and reports if found.",Patrol a specific area and report any suspicious activity.,"
<BehaviorTree>
<Sequence>
<Action>patrol_area</Action>
<Action>check_for_suspicious_activity</Action>
</Sequence>
</BehaviorTree>"
Follow the leader robot while avoiding obstacles.,"Use the following behaviors to generate XML Behavior tree based on the user command: follow_leader: Action node - Utilizes a leader-follower strategy to move in the same direction as the leader robot.
avoid_obstacles: Subtree node - Represents a behavior tree for obstacle avoidance.",Follow the leader robot and avoid obstacles.,"
<BehaviorTree>
<Sequence>
<Action>follow_leader</Action>
<Subtree>avoid_obstacles</Subtree>
</Sequence>
</BehaviorTree>"
Scan the environment and report any hazards.,"Use the following behaviors to generate XML Behavior tree based on the user command: scan_environment: Action node - Scans the surroundings for any hazards and reports if found.
report_hazards: Action node - Reports any detected hazards.",Scan the environment and report any hazards.,"
<BehaviorTree>
<Sequence>
<Action>scan_environment</Action>
<Action>report_hazards</Action>
</Sequence>
</BehaviorTree>"
Collect resources and deposit them at a designated location.,"Use the following behaviors to generate XML Behavior tree based on the user command: collect_resources: Subtree node - Represents a behavior tree for resource collection.
deposit_resources: Action node - Moves to the designated location and deposits collected resources.",Collect resources and deposit them at a designated location.,"
<BehaviorTree>
<Sequence>
<Subtree>collect_resources</Subtree>
<Action>deposit_resources</Action>
</Sequence>
</BehaviorTree>"
Coordinate movements with nearby robots to form a circle.,Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_movements: Action node - Utilizes communication with nearby robots to form a coordinated circle movement.,Coordinate movements with nearby robots to form a circle.,"
<BehaviorTree>
<Sequence>
<Action>coordinate_movements</Action>
</Sequence>
</BehaviorTree>"
perform a specific dance routine.,Use the following behaviors to generate XML Behavior tree based on the user command: execute_dance: Action node - Performs a predetermined dance routine.,Perform a specific dance routine.,"
<BehaviorTree>
<Sequence>
<Action>execute_dance</Action>
</Sequence>
</BehaviorTree>"
Work together to stack objects in a specific order.,Use the following behaviors to generate XML Behavior tree based on the user command: stack_objects: Subtree node - Represents a behavior tree for coordinating and stacking objects in a specific order.,Work together to stack objects in a specific order.,"
<BehaviorTree>
<Sequence>
<Subtree>stack_objects</Subtree>
</Sequence>
</BehaviorTree>"
Communicate and perform synchronized movements with another robot.,Use the following behaviors to generate XML Behavior tree based on the user command: communicate: Action node - Sends and receives messages from another robot. perform_synchronized_movement: Subtree node - Represents a behavior tree for coordinating synchronized movements.,Communicate and perform synchronized movements with another robot.,"
<BehaviorTree>
<Sequence>
<Action>communicate</Action>
<Subtree>perform_synchronized_movement</Subtree>
</Sequence>
</BehaviorTree>"
Search and rescue a lost robot.,"Use the following behaviors to generate XML Behavior tree based on the user command: search_for_lost_robot: Action node - Utilizes communication with other robots to search for the lost robot.
rescue_lost_robot: Action node - Executes a rescue procedure once the lost robot is found.",Search and rescue a lost robot.,"
<BehaviorTree>
<Sequence>
<Action>search_for_lost_robot</Action>
<Action>rescue_lost_robot</Action>
</Sequence>
</BehaviorTree>"
Form a line and move together to a designated location.,"Use the following behaviors to generate XML Behavior tree based on the user command: form_line: Action node - Utilizes communication with nearby robots to form a line and move together.
move_to_designated_location: Action node - Moves to a specified location.",Form a line and move together to a designated location.,"
<BehaviorTree>
<Sequence>
<Action>form_line</Action>
<Action>move_to_designated_location</Action>
</Sequence>
</BehaviorTree>"
Guard a specific area and alert nearby robots of any approaching threats.,"Use the following behaviors to generate XML Behavior tree based on the user command: guard_area: Action node - Stays in a designated area and monitors for any approaching threats.
alert_nearby_robots: Action node - Sends an alert message to nearby robots if a threat is detected.",Guard a specific area and alert nearby robots of any approaching threats.,"
<BehaviorTree>
<Sequence>
<Action>guard_area</Action>
<Action>alert_nearby_robots</Action>
</Sequence>
</BehaviorTree>"
Navigate through a maze to reach the end point.,"Use the following behaviors to generate XML Behavior tree based on the user command: navigate_maze: Subtree node - Represents a behavior tree for navigating through a maze.
reach_end_point: Action node - Moves the agent to the designated end point.",Navigate through a maze to reach the end point.,"
<BehaviorTree>
<Sequence>
<Subtree>navigate_maze</Subtree>
<Action>reach_end_point</Action>
</Sequence>
</BehaviorTree>"
Scan the environment for resources and collect them efficiently.,"Use the following behaviors to generate XML Behavior tree based on the user command: scan_for_resources: Action node - Scans the surroundings for resources and updates the agent's knowledge.
collect_resources: Subtree node - Represents a behavior tree for efficient resource collection and management.",Scan the environment for resources and collect them efficiently.,"
<BehaviorTree>
<Sequence>
<Action>scan_for_resources</Action>
<Subtree>collect_resources</Subtree>
</Sequence>
</BehaviorTree>"
Find and retrieve an object from a specific location using a designated path.,"Use the following behaviors to generate XML Behavior tree based on the user command: find_object: Action node - Utilizes communication and mapping to locate the object.
retrieve_object: Subtree node - Represents a behavior tree for retrieving the object using the designated path.",Find and retrieve an object from a specific location using a designated path.,"
<BehaviorTree>
<Sequence>
<Action>find_object</Action>
<Subtree>retrieve_object</Subtree>
</Sequence>
</BehaviorTree>"
Coordinate with other robots to form a pyramid structure.,"Use the following behaviors to generate XML Behavior tree based on the user command: communicate: Action node - Communicates with other robots to establish the pyramid structure.
create_pyramid: Subtree node - Represents a behavior tree for coordinating movements to form the pyramid structure.",Coordinate with other robots to form a pyramid structure.,"
<BehaviorTree>
<Sequence>
<Action>communicate</Action>
<Subtree>create_pyramid</Subtree>
</Sequence>
</BehaviorTree>"
Patrol a designated path and respond to environmental changes.,"Use the following behaviors to generate XML Behavior tree based on the user command: patrol_path: Subtree node - Represents a behavior tree for patrolling a designated path.
respond_to_changes: Action node - Monitors the environment for any changes and responds accordingly.",Patrol a designated path and respond to environmental changes.,"
<BehaviorTree>
<Sequence>
<Subtree>patrol_path</Subtree>
<Action>respond_to_changes</Action>
</Sequence>
</BehaviorTree>"
Complete a series of tasks in a specific order.,Use the following behaviors to generate XML Behavior tree based on the user command: perform_tasks: Subtree node - Represents a behavior tree for completing a series of tasks in a specific order.,Complete a series of tasks in a specific order.,"
<BehaviorTree>
<Sequence>
<Subtree>perform_tasks</Subtree>
</Sequence>
</BehaviorTree>"
Find and collect resources in a given area until a certain threshold is met.,Use the following behaviors to generate XML Behavior tree based on the user command: find_resources: Action node - Uses the agent's sensors to locate resources in the assigned area. collect_resources: Action node - Collects the resources found by the agent. check_resource_threshold: Condition node - Checks if the collected amount of resources meets the specified threshold. continue_collecting: Selector node - Continues to search and collect resources until the threshold is met.,Find and collect resources in a given area until a certain threshold is met.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>find_resources</Action>
<Action>collect_resources</Action>
</Sequence>
<Sequence>
<Condition>check_resource_threshold</Condition>
<Action>continue_collecting</Action>
</Sequence>
</Selector>
</BehaviorTree>"
Form a defensive wall with surrounding swarm robots to protect a target location.,Use the following behaviors to generate XML Behavior tree based on the user command: swarm_defend: Action node - Commands the agent to form a defensive wall with other swarm robots. check_distance_to_target: Condition node - Checks the distance between the agent and the target location. move_closer_to_target: Action node - Moves the agent closer to the target location. continue_defending: Selector node - Continues to defend the target location until the distance is close enough.,Form a defensive wall with surrounding swarm robots to protect a target location.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>swarm_defend</Action>
</Sequence>
<Sequence>
<Condition>check_distance_to_target</Condition>
<Action>move_closer_to_target</Action>
<Action>continue_defending</Action>
</Sequence>
</Selector>
</BehaviorTree>"
Coordinate with other robots to build a structure by carrying and placing materials in designated locations.,Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_materials: Subtree node - Represents a behavior tree for coordinating with other robots to carry and place materials. carry_materials: Action node - Instructs the agent to carry materials to a designated location. place_materials: Action node - Instructs the agent to place the carried materials in a designated location.,Coordinate with other robots to build a structure by carrying and placing materials in designated locations.,"
<BehaviorTree>
<Sequence>
<Action>coordinate_materials</Action>
<Action>carry_materials</Action>
<Action>place_materials</Action>
</Sequence>
</BehaviorTree>"
Follow a leader robot while avoiding obstacles in the environment.,Use the following behaviors to generate XML Behavior tree based on the user command: follow_leader: Action node - Instructs the agent to follow the leader robot in a predefined formation. avoid_obstacles: Action node - Uses the agent's sensors to detect and avoid obstacles in the environment.,Follow a leader robot while avoiding obstacles in the environment.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>follow_leader</Action>
</Sequence>
<Action>avoid_obstacles</Action>
</Selector>
</BehaviorTree>"
Collaboratively explore and map a new environment.,Use the following behaviors to generate XML Behavior tree based on the user command: explore: Action node - Commands the agent to explore the environment and map out new areas. update_map: Action node - Updates the map with any new information discovered by the agent.,Collaboratively explore and map a new environment.,"
<BehaviorTree>
<Sequence>
<Action>explore</Action>
<Action>update_map</Action>
</Sequence>
</BehaviorTree>"
Work together to push a heavy object to a specific location.,Use the following behaviors to generate XML Behavior tree based on the user command: push_object: Action node - Instructs the agent to push the heavy object towards the target location. check_distance_to_object: Condition node - Checks the distance between the agent and the heavy object. move_closer_to_object: Action node - Moves the agent closer to the heavy object if necessary. continue_pushing: Selector node - Continues to push the object until it reaches the target location.,Work together to push a heavy object to a specific location.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>push_object</Action>
</Sequence>
<Sequence>
<Condition>check_distance_to_object</Condition>
<Action>move_closer_to_object</Action>
<Action>continue_pushing</Action>
</Sequence>
</Selector>
</BehaviorTree>"
Perform a coordinated dance with other robots for entertainment purposes.,Use the following behaviors to generate XML Behavior tree based on the user command: perform_dance: Action node - Commands the agent to perform a predefined dance routine. synchronize: Action node - Instructs the agent to synchronize movements with other robots for a coordinated dance.,Perform a coordinated dance with other robots for entertainment purposes.,"
<BehaviorTree>
<Sequence>
<Action>perform_dance</Action>
<Action>synchronize</Action>
</Sequence>
</BehaviorTree>"
Find and repair any damaged robots within the swarm.,Use the following behaviors to generate XML Behavior tree based on the user command: find_damaged_robot: Action node - Instructs the agent to search for any damaged robots within the swarm. repair_robot: Action node - Commands the agent to perform repairs on the damaged robot. check_for_repair: Condition node - Checks if the damaged robot has been successfully repaired. continue_repair: Selector node - Continues to search and repair damaged robots until all have been fixed.,Find and repair any damaged robots within the swarm.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>find_damaged_robot</Action>
<Action>repair_robot</Action>
</Sequence>
<Sequence>
<Condition>check_for_repair</Condition>
<Action>continue_repair</Action>
</Sequence>
</Selector>
</BehaviorTree>"
Use sensor data to identify and organize objects in the environment.,Use the following behaviors to generate XML Behavior tree based on the user command: identify_objects: Action node - Uses sensor data to identify and categorize objects in the environment. organize_objects: Action node - Commands the agent to organize the identified objects into groups based on their characteristics.,Use sensor data to identify and organize objects in the environment.,"
<BehaviorTree>
<Sequence>
<Action>identify_objects</Action>
<Action>organize_objects</Action>
</Sequence>
</BehaviorTree>"
Coordinate with other robots to lift and transport a heavy object to a desired location.,Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_lift: Subtree node - Represents a behavior tree for coordinating with other robots to lift and transport the heavy object. lift_object: Action node - Instructs the agent to lift the heavy object. transport_object: Action node - Commands the agent to move the lifted object to the desired location.,Coordinate with other robots to lift and transport a heavy object to a desired location.,"
<BehaviorTree>
<Sequence>
<Action>coordinate_lift</Action>
<Action>lift_object</Action>
<Action>transport_object</Action>
</Sequence>
</BehaviorTree>"
Use sensors to detect and avoid potential hazards in the environment.,Use the following behaviors to generate XML Behavior tree based on the user command: detect_hazards: Action node - Utilizes sensor data to detect potential hazards in the environment. avoid_hazards: Action node - Commands the agent to avoid the detected hazards and find a safe path.,Use sensors to detect and avoid potential hazards in the environment.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>detect_hazards</Action>
<Action>avoid_hazards</Action>
</Sequence>
<Action>find_safe_path</Action>
</Selector>
</BehaviorTree>"
Work together to construct a bridge using materials found in the environment.,Use the following behaviors to generate XML Behavior tree based on the user command: gather_materials: Action node - Commands the agent to gather materials from the environment. construct_bridge: Action node - Instructs the agent to work together with other robots to construct a bridge using the gathered materials.,Work together to construct a bridge using materials found in the environment.,"
<BehaviorTree>
<Sequence>
<Action>gather_materials</Action>
<Action>construct_bridge</Action>
</Sequence>
</BehaviorTree>"
Detach from the swarm and explore a new area independently.,Use the following behaviors to generate XML Behavior tree based on the user command: detach_from_swarm: Action node - Instructs the agent to detach from the swarm and continue on its own. explore_area: Action node - Commands the agent to explore the new area and gather information.,Detach from the swarm and explore a new area independently.,"
<BehaviorTree>
<Sequence>
<Action>detach_from_swarm</Action>
<Action>explore_area</Action>
</Sequence>
</BehaviorTree>"
Use sensors to identify and harvest ripe crops in a field.,Use the following behaviors to generate XML Behavior tree based on the user command: identify_crops: Action node - Uses sensor data to identify and locate ripe crops in the field. harvest_crops: Action node - Commands the agent to harvest the identified crops.,Use sensors to identify and harvest ripe crops in a field.,"
<BehaviorTree>
<Sequence>
<Action>identify_crops</Action>
<Action>harvest_crops</Action>
</Sequence>
</BehaviorTree>"
Coordinate with other robots to form a protective barrier around a target object.,Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_barrier: Subtree node - Represents a behavior tree for coordinating with other robots to form a protective barrier. form_barrier: Action node - Instructs the agent to form the barrier with other robots. protect_object: Action node - Commands the agent to keep the target object safe within the barrier.,Coordinate with other robots to form a protective barrier around a target object.,"
<BehaviorTree>
<Sequence>
<Action>coordinate_barrier</Action>
<Action>form_barrier</Action>
<Action>protect_object</Action>
</Sequence>
</BehaviorTree>"
Work together to save a trapped robot in a dangerous situation.,Use the following behaviors to generate XML Behavior tree based on the user command: locate_trapped_robot: Action node - Instructs the agent to search for and locate the trapped robot. rescue_robot: Action node - Commands the agent to work together with other robots to rescue the trapped robot. check_rescue_success: Condition node - Checks if the trapped robot has been successfully rescued. continue_rescue: Selector node - Continues to search and rescue trapped robots until all have been saved.,Work together to save a trapped robot in a dangerous situation.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>locate_trapped_robot</Action>
<Action>rescue_robot</Action>
</Sequence>
<Sequence>
<Condition>check_rescue_success</Condition>
<Action>continue_rescue</Action>
</Sequence>
</Selector>
</BehaviorTree>"
Use collected data to predict and avoid potential collisions with other robots in the environment.,Use the following behaviors to generate XML Behavior tree based on the user command: collect_data: Action node - Instructs the agent to collect data on other robots in the environment. predict_collisions: Action node - Uses the collected data to predict potential collisions with other robots. avoid_collisions: Action node - Commands the agent to change its course to avoid the predicted collisions.,Use collected data to predict and avoid potential collisions with other robots in the environment.,"
<BehaviorTree>
<Sequence>
<Action>collect_data</Action>
<Action>predict_collisions</Action>
<Action>avoid_collisions</Action>
</Sequence>
</BehaviorTree>"
generate behavior tree to 'Avoid obstacles while moving towards target.',"Use only the following behaviors to generate XML Behavior tree based on the user command: {move_to_target: 'Action node: Move the agent to the target location.
Returns: Always returns True, indicating the action was executed.', avoid_obstacles: 'Action node: Avoid obstacles while moving.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.",Avoid obstacles while moving towards target.,"
<BehaviorTree>
<Sequence>
<Action>avoid_obstacles</Action>
<Action>move_to_target</Action>
</Sequence>
</BehaviorTree>"
"generate behavior tree to 'Gather resources, if low on energy, return to base to recharge.'","Use only the following behaviors to generate XML Behavior tree based on the user command: {gather_resources: 'Action node: Gather resources in the environment.
Returns: Always returns True, indicating the action was executed.', low_energy: 'Condition node: Check if energy level is low.
Returns: True if energy level is low, otherwise False.', return_to_base: 'Action node: Return to the base to recharge.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.","Gather resources, if low on energy, return to base to recharge.","
<BehaviorTree>
<Sequence>
<Action>gather_resources</Action>
<Condition>low_energy</Condition>
<Action>return_to_base</Action>
</Sequence>
</BehaviorTree>"
"generate behavior tree to 'Move towards target, if obstacle in path, find alternate route to target.'","Use only the following behaviors to generate XML Behavior tree based on the user command: {move_to_target: 'Action node: Move the agent to the target location.
Returns: Always returns True, indicating the action was executed.', is_obstacle_in_path: 'Condition node: Check if there is an obstacle in the path.
Returns: True if obstacle is present, otherwise False.', find_alternate_route: 'Action node: Find an alternate route to the target location.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.","Move towards target, if obstacle in path, find alternate route to target.","
<BehaviorTree>
<Sequence>
<Action>move_to_target</Action>
<Selector>
<Sequence>
<Condition>is_obstacle_in_path</Condition>
<Action>find_alternate_route</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
"generate behavior tree to 'Collect data, if data collection complete, return to base and upload data.'","Use only the following behaviors to generate XML Behavior tree based on the user command: {collect_data: 'Action node: Collect data from the environment.
Returns: Always returns True, indicating the action was executed.', data_collection_complete: 'Condition node: Check if data collection is complete.
Returns: True if collection is complete, otherwise False.', return_to_base: 'Action node: Return to the base to upload data.
Returns: Always returns True, indicating the action was executed.', upload_data: 'Action node: Upload collected data to a storage unit.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.","Collect data, if data collection complete, return to base and upload data.","
<BehaviorTree>
<Sequence>
<Action>collect_data</Action>
<Condition>data_collection_complete</Condition>
<Action>return_to_base</Action>
<Action>upload_data</Action>
</Sequence>
</BehaviorTree>"
"generate behavior tree to 'Explore unknown territory, if obstacle in path, avoid obstacle and continue exploring.'","Use only the following behaviors to generate XML Behavior tree based on the user command: {explore_unknown_territory: 'Action node: Explore the unknown territory.
Returns: Always returns True, indicating the action was executed.', is_obstacle_in_path: 'Condition node: Check if there is an obstacle in the path.
Returns: True if obstacle is present, otherwise False.', avoid_obstacle: 'Action node: Avoid obstacle while continuing exploration.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.","Explore unknown territory, if obstacle in path, avoid obstacle and continue exploring.","
<BehaviorTree>
<Sequence>
<Action>explore_unknown_territory</Action>
<Selector>
<Sequence>
<Condition>is_obstacle_in_path</Condition>
<Action>avoid_obstacle</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
"generate behavior tree to 'Follow leader, maintain distance, and stay within designated area.'","Use only the following behaviors to generate XML Behavior tree based on the user command: {follow_leader: 'Action node: Follow the designated leader.
Returns: Always returns True, indicating the action was executed.', maintain_distance: 'Action node: Maintain a safe distance from the leader.
Returns: Always returns True, indicating the action was executed.', stay_within_area: 'Condition node: Check if the agent is within the designated area.
Returns: True if within area, otherwise False.'} to construct a behavior tree in XML format to the following command.","Follow leader, maintain distance, and stay within designated area.","
<BehaviorTree>
<Sequence>
<Action>follow_leader</Action>
<Action>maintain_distance</Action>
<Condition>stay_within_area</Condition>
</Sequence>
</BehaviorTree>"
generate behavior tree to 'Defend territory by patrolling and attacking intruders.',"Use only the following behaviors to generate XML Behavior tree based on the user command: {defend_territory: 'Action node: Patrol and defend the territory.
Returns: Always returns True, indicating the action was executed.', detect_intruder: 'Condition node: Check if there is an intruder.
Returns: True if intruder is detected, otherwise False.', attack_intruder: 'Action node: Attack the intruder.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.",Defend territory by patrolling and attacking intruders.,"
<BehaviorTree>
<Sequence>
<Action>defend_territory</Action>
<Selector>
<Sequence>
<Condition>detect_intruder</Condition>
<Action>attack_intruder</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
"generate behavior tree to 'Group up, if separated from other robots, move towards the nearest robot and regroup.'","Use only the following behaviors to generate XML Behavior tree based on the user command: {group_up: 'Action node: Move towards the nearest robot to regroup.
Returns: Always returns True, indicating the action was executed.', is_separated: 'Condition node: Check if the agent is separated from the group.
Returns: True if separated, otherwise False.', move_towards_robot: 'Action node: Move towards the nearest robot.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.","Group up, if separated from other robots, move towards the nearest robot and regroup.","
<BehaviorTree>
<Sequence>
<Action>group_up</Action>
<Selector>
<Sequence>
<Condition>is_separated</Condition>
<Action>move_towards_robot</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
generate behavior tree to 'Collect and deliver packages to designated locations.',"Use only the following behaviors to generate XML Behavior tree based on the user command: {collect_package: 'Action node: Collect the desired package from the designated location.
Returns: Always returns True, indicating the action was executed.', deliver_package: 'Action node: Deliver the collected package to the designated destination.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.",Collect and deliver packages to designated locations.,"
<BehaviorTree>
<Sequence>
<Action>collect_package</Action>
<Action>deliver_package</Action>
</Sequence>
</BehaviorTree>"
generate behavior tree to 'Search for survivors and provide aid as needed.',"Use only the following behaviors to generate XML Behavior tree based on the user command: {search_for_survivors: 'Action node: Search the designated area for survivors.
Returns: Always returns True, indicating the action was executed.', provide_aid: 'Action node: Provide aid to any survivors found.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.",Search for survivors and provide aid as needed.,"
<BehaviorTree>
<Sequence>
<Action>search_for_survivors</Condition>
<Action>provide_aid</Action>
</Sequence>
</BehaviorTree>"
generate behavior tree to 'Assemble and construct a structure using multiple robots.',"Use only the following behaviors to generate XML Behavior tree based on the user command: {assemble_structure: 'Action node: Use multiple robots to assemble and construct a designated structure.
Returns: Always returns True, indicating the action was executed.', construct_structure: 'Action node: Use specific tools and materials to construct the designated structure.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.",Assemble and construct a structure using multiple robots.,"
<BehaviorTree>
<Sequence>
<Action>assemble_structure</Action>
<Action>construct_structure</Action>
</Sequence>
</BehaviorTree>"
generate behavior tree to 'Locate and retrieve lost equipment in a designated area.',"Use only the following behaviors to generate XML Behavior tree based on the user command: {locate_equipment: 'Action node: Search the designated area for lost equipment.
Returns: Always returns True, indicating the action was executed.', retrieve_equipment: 'Action node: Retrieve the lost equipment once located.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.",Locate and retrieve lost equipment in a designated area.,"
<BehaviorTree>
<Sequence>
<Action>locate_equipment</Action>
<Action>retrieve_equipment</Action>
</Sequence>
</BehaviorTree>"
"generate behavior tree to 'Follow assigned path, but avoid areas with high radiation levels.'","Use only the following behaviors to generate XML Behavior tree based on the user command: {follow_assigned_path: 'Action node: Follow the assigned path.
Returns: Always returns True, indicating the action was executed.', high_radiation_levels: 'Condition node: Check if the agent is in an area with high radiation levels.
Returns: True if in high radiation area, otherwise False.', avoid_high_radiation: 'Action node: Avoid the high radiation area and find an alternative route.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.","Follow assigned path, but avoid areas with high radiation levels.","
<BehaviorTree>
<Sequence>
<Action>follow_assigned_path</Action>
<Selector>
<Sequence>
<Condition>high_radiation_levels</Condition>
<Action>avoid_high_radiation</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
generate behavior tree to 'Provide support and cover fire to a designated robot while it retrieves a target object.',"Use only the following behaviors to generate XML Behavior tree based on the user command: {provide_support: 'Action node: Provide support and cover fire as needed.
Returns: Always returns True, indicating the action was executed.', retrieve_target: 'Action node: Retrieve the designated target object.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.",Provide support and cover fire to a designated robot while it retrieves a target object.,"
<BehaviorTree>
<Sequence>
<Action>provide_support</Action>
<Action>retrieve_target</Action>
</Sequence>
</BehaviorTree>"
generate behavior tree to 'Perform a complex search and rescue mission in a disaster area.',"Use only the following behaviors to generate XML Behavior tree based on the user command: {perform_search: 'Action node: Search the designated disaster area for survivors and any other relevant information.
Returns: Always returns True, indicating the action was executed.', provide_medical_aid: 'Action node: Provide necessary medical aid to survivors.
Returns: Always returns True, indicating the action was executed.', retrieve_supplies: 'Action node: Retrieve necessary supplies from designated locations.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.",Perform a complex search and rescue mission in a disaster area.,"
<BehaviorTree>
<Sequence>
<Action>perform_search</Action>
<Action>provide_medical_aid</Action>
<Action>retrieve_supplies</Action>
</Sequence>
</BehaviorTree>"
generate behavior tree to 'Navigate through a maze and retrieve designated artifacts.',"Use only the following behaviors to generate XML Behavior tree based on the user command: {navigate_maze: 'Action node: Use predefined strategies to navigate through the maze.
Returns: Always returns True, indicating the action was executed.', retrieve_artifact: 'Action node: Retrieve the designated artifacts once reaching the end of the maze.
Returns: Always returns True, indicating the action was executed.'} to construct a behavior tree in XML format to the following command.",Navigate through a maze and retrieve designated artifacts.,"
<BehaviorTree>
<Sequence>
<"
Detect and collect all nearby resources.,Use the following behaviors to generate XML Behavior tree based on the user command: detect_resources: Action node - Scans the surroundings for resources. collect_resource: Action Node - Collects a resource if one is detected. check_inventory: Condition node - Checks if the robot's inventory is full. stop_collecting: Action node - Halts the collection process if the inventory is full.,Detect and collect all nearby resources.,"
<BehaviorTree>
<Sequence>
<Action>detect_resources</Action>
<Selector>
<Condition>check_inventory</Condition>
<Action>stop_collecting</Action>
</Selector>
<Action>collect_resource</Action>
</Sequence>
</BehaviorTree>"
Follow another swarm robot in front while maintaining a safe distance.,Use the following behaviors to generate XML Behavior tree based on the user command: follow_robot: Action node - Moves towards the robot in front. check_distance: Condition node - Checks the distance between the current and front robot. adjust_distance: Action node - Adjusts the distance by slowing down or speeding up. maintain_distance: Subtree node - Represents a behavior tree for maintaining a safe distance.,Follow another swarm robot in front while maintaining a safe distance.,"
<BehaviorTree>
<Sequence>
<Action>follow_robot</Action>
<Selector>
<Condition>check_distance</Condition>
<Action>adjust_distance</Action>
</Selector>
<Subtree>maintain_distance</Subtree>
</Sequence>
</BehaviorTree>"
Patrol an area by moving in a circular pattern.,Use the following behaviors to generate XML Behavior tree based on the user command: move_forward: Action node (same as before). turn_right: Action node - Turns the robot 90 degrees to the right. check_area: Condition node - Checks if the entire area has been patrolled. reset_direction: Action node - Resets the direction of the circular pattern if the robot has completed a full circle. patrol_area: Subtree node - Represents a behavior tree for patrolling an area.,Patrol an area by moving in a circular pattern.,"
<BehaviorTree>
<Sequence>
<Action>move_forward</Action>
<Sequence>
<Action>turn_right</Action>
<Selector>
<Condition>check_area</Condition>
<Action>reset_direction</Action>
</Selector>
</Sequence>
<Subtree>patrol_area</Subtree>
</Sequence>
</BehaviorTree>"
Avoid collisions with other robots while moving towards a target location.,Use the following behaviors to generate XML Behavior tree based on the user command: move_towards_target: Action node - Moves towards a specified target location. detect_obstacles: Action node - Scans for any obstacles in the path. avoid_collision: Action node - Adjusts the robot's trajectory to avoid collision. target_reached: Condition node - Checks if the target destination has been reached.,Avoid collisions with other robots while moving towards a target location.,"
<BehaviorTree>
<Sequence>
<Selector>
<Condition>target_reached</Condition>
<Action>move_towards_target</Action>
</Selector>
<Selector>
<Action>detect_obstacles</Action>
<Action>avoid_collision</Action>
</Selector>
</Sequence>
</BehaviorTree>"
Pick up and transport a heavy object to a specified location.,Use the following behaviors to generate XML Behavior tree based on the user command: detect_object: Action node - Scans the surroundings for a heavy object. pick_up: Action node - Lifts and carries the object. move_to_destination: Action node - Moves towards the target location. check_load: Condition node - Checks if the robot is carrying a heavy object. unload: Action node - Sets down the object at the destination.,Pick up and transport a heavy object to a specified location.,"
<BehaviorTree>
<Sequence>
<Selector>
<Condition>check_load</Condition>
<Action>detect_object</Action>
<Action>pick_up</Action>
</Selector>
<Sequence>
<Action>move_to_destination</Action>
<Condition>check_load</Condition>
<Action>unload</Action>
</Sequence>
</Sequence>
</BehaviorTree>"
Work together with other robots to push a large object.,Use the following behaviors to generate XML Behavior tree based on the user command: detect_object: Action node - Scans the surroundings for the large object. move_to_object: Action node - Moves towards the object. push_object: Action node - Pushes the object in coordination with other robots. coordinate: Subtree node - Represents a behavior tree for coordinating with other robots.,Work together with other robots to push a large object.,"
<BehaviorTree>
<Sequence>
<Action>detect_object</Action>
<Subtree>coordinate</Subtree>
<Sequence>
<Action>move_to_object</Action>
<Selector>
<Condition>check_position</Condition>
<Action>push_object</Action>
</Selector>
</Sequence>
</Sequence>
</BehaviorTree>"
Search for and rescue a lost robot.,Use the following behaviors to generate XML Behavior tree based on the user command: detect_lost_robot: Action node - Scans the surroundings for a lost robot. move_to_robot: Action node - Moves towards the lost robot. check_status: Condition node - Checks the status of the lost robot (e.g. low battery). retrieve_robot: Action node - Rescues the lost robot and brings it back to a designated location.,Search for and rescue a lost robot.,"
<BehaviorTree>
<Sequence>
<Action>detect_lost_robot</Action>
<Sequence>
<Action>move_to_robot</Action>
<Condition>check_status</Condition>
<Action>retrieve_robot</Action>
</Sequence>
</Sequence>
</BehaviorTree>"
Build a structure using building blocks.,Use the following behaviors to generate XML Behavior tree based on the user command: detect_building_blocks: Action node - Scans the surroundings for building blocks. move_to_block: Action node - Moves towards a building block. pick_up_block: Action node - Picks up a building block. check_inventory: Condition node - Checks the robot's inventory for available building blocks. build_structure: Action node - Constructs the desired structure. check_completion: Condition node - Checks if the structure is complete.,Build a structure using building blocks.,"
<BehaviorTree>
<Sequence>
<Action>detect_building_blocks</Action>
<Sequence>
<Action>move_to_block</Action>
<Action>pick_up_block</Action>
<Condition>check_inventory</Condition>
<Selector>
<Selector>
<Condition>check_completion</Condition>
<Action>build_structure</Action>
</Selector>
</Selector>
</Sequence>
</Sequence>
</BehaviorTree>"
Cooperate with other robots to form a barrier around an area.,Use the following behaviors to generate XML Behavior tree based on the user command: detect_boundary: Action node - Scans for the boundaries of the designated area. move_to_boundary: Action node - Moves towards the boundary. form_barrier: Action node - Communicates and coordinates with other robots to form a barrier around the area. check_barrier: Condition node - Checks if the barrier is complete.,Cooperate with other robots to form a barrier around an area.,"
<BehaviorTree>
<Sequence>
<Action>detect_boundary</Action>
<Sequence>
<Action>move_to_boundary</Action>
<Condition>check_barrier</Condition>
<Action>form_barrier</Action>
</Sequence>
</Sequence>
</BehaviorTree>"
Perform a coordinated dance routine with other robots.,Use the following behaviors to generate XML Behavior tree based on the user command: detect_music: Action node - Listens for the music to start. start_dance: Action node - Starts the dance routine. coordinate_dance: Action node - Communicates and coordinates with other robots to perform synchronized movements. end_dance: Action node - Ends the dance routine when the music stops.,Perform a coordinated dance routine with other robots.,"
<BehaviorTree>
<Sequence>
<Action>detect_music</Action>
<Action>start_dance</Action>
<Selector>
<Condition>check_music</Condition>
<Action>end_dance</Action>
<Action>coordinate_dance</Action>
</Selector>
</Sequence>
</BehaviorTree>"
Navigate through a maze to reach the end point.,Use the following behaviors to generate XML Behavior tree based on the user command: detect_obstacles: Action node - Scans for obstacles in the path. move_towards_end: Action node - Moves towards the designated end point. find_path: Subtree node - Represents a behavior tree for path finding. check_path: Condition node - Checks if a valid path has been found.,Navigate through a maze to reach the end point.,"
<BehaviorTree>
<Sequence>
<Action>detect_obstacles</Action>
<Selector>
<Condition>check_path</Condition>
<Action>move_towards_end</Action>
<Subtree>find_path</Subtree>
</Selector>
</Sequence>
</BehaviorTree>"
Scout and map out a new area for exploration.,Use the following behaviors to generate XML Behavior tree based on the user command: detect_unexplored_area: Action node - Scans the surroundings for unexplored areas. move_to_area: Action node - Moves towards the designated area. map_area: Action node - Maps the designated area and records any significant findings. check_map: Condition node - Checks if the area has been fully mapped.,Scout and map out a new area for exploration.,"
<BehaviorTree>
<Sequence>
<Action>detect_unexplored_area</Action>
<Sequence>
<Action>move_to_area</Action>
<Condition>check_map</Condition>
<Action>map_area</Action>
</Sequence>
</Sequence>
</BehaviorTree>"
Collaborate with other robots to transport a large object to a designated location.,Use the following behaviors to generate XML Behavior tree based on the user command: detect_large_object: Action node - Scans the surroundings for a large object. move_to_object: Action node - Moves towards the object. lift_object: Action node - Lifts the object in coordination with other robots. transport_object: Action node - Moves with the object towards the designated location. check_destination: Condition node - Checks if the designated location has been reached. lower_object: Action node - Lowers the object at the destination.,Collaborate with other robots to transport a large object to a designated location.,"
<BehaviorTree>
<Sequence>
<Action>detect_large_object</Action>
<Subtree>coordinate</Subtree>
<Sequence>
<Action>move_to_object</Action>
<Action>lift_object</Action>
</Sequence>
<Sequence>
<Action>transport_object</Action>
<Condition>check_destination</Condition>
<Action>lower_object</Action>
</Sequence>
</Sequence>
</BehaviorTree>"
Work together with other robots to clean a designated area.,Use the following behaviors to generate XML Behavior tree based on the user command: detect_dirty_area: Action node - Scans the surroundings for a dirty area. move_to_area: Action node - Moves towards the designated area. clean_area: Action node - Cleans the designated area in coordination with other robots. check_cleanliness: Condition node - Checks if the area has been fully cleaned.,Work together with other robots to clean a designated area.,"
<BehaviorTree>
<Sequence>
<Action>detect_dirty_area</Action>
<Subtree>coordinate</Subtree>
<Sequence>
<Action>move_to_area</Action>
<Condition>check_cleanliness</Condition>
<Action>clean_area</Action>
</Sequence>
</Sequence>
</BehaviorTree>"
Find and extinguish a fire in a building.,Use the following behaviors to generate XML Behavior tree based on the user command: detect_fire: Action node - Scans the surroundings for a fire. move_to_fire: Action node - Moves towards the fire. extinguish_fire: Action node - Extinguishes the fire using appropriate methods. check_emergency: Condition node - Checks for any potential emergency situations. evacuate: Action node - Evacuates the building.,Find and extinguish a fire in a building.,"
<BehaviorTree>
<Sequence>
<Action>detect_fire</Action>
<Sequence>
<Action>move_to_fire</Action>
<Condition>check_emergency</Condition>
<Action>extinguish_fire</Action>
</Sequence>
<Action>evacuate</Action>
</Sequence>
</BehaviorTree>"
Create a communication network with other robots for data transfer.,Use the following behaviors to generate XML Behavior tree based on the user command: detect_other_robots: Action node - Scans for other robots in the vicinity. connect_robot: Action node - Establishes a connection with another robot. transfer_data: Action node - Sends and receives data from other robots. check_data: Condition node - Checks if all data has been successfully transferred.,Create a communication network with other robots for data transfer.,"
<BehaviorTree>
<Sequence>
<Action>detect_other_robots</Action>
<Selector>
<Action>connect_robot</Action>
<Selector>
<Condition>check_data</Condition>
<Action>transfer_data</Action>
</Selector>
</Selector>
</Sequence>
</BehaviorTree>"
Team up with other robots to construct a large structure.,Use the following behaviors to generate XML Behavior tree based on the user command: detect_blueprint: Action node - Scans the surroundings for a blueprint of the structure. move_to_blueprint: Action node - Moves towards the blueprint. gather_materials: Action node - Collects the necessary materials for construction. build_structure: Action node - Constructs the structure in coordination with other robots. check_completion: Condition node - Checks if the structure has been completed.,Team up with other robots to construct a large structure.,"
<BehaviorTree>
<Sequence>
<Action>detect_blueprint</Action>
<Sequence>
<Action>move_to_blueprint</Action>
<Selector>
<Selector>
<Condition>check_completion</Condition>
<Action>build_structure</Action>
</Selector>
</Selector>
</Sequence>
<Action>gather_materials</Action>
</Sequence>
</Behavior"
Patrol designated area and scan for any changes.,Use the following behaviors to generate XML Behavior tree based on the user command: patrol: Action node - Moves the agent around a designated area. scan: Action node - Scans the environment for changes.,Patrol designated area and scan for any changes.,"
<BehaviorTree>
<Sequence>
<Action>patrol</Action>
<Action>scan</Action>
</Sequence>
</BehaviorTree>"
Collaboratively gather resources and return to designated location.,Use the following behaviors to generate XML Behavior tree based on the user command: gather_resources: Action node - Coordinates with other robots to gather resources. return_to_location: Action node - Returns to a designated location.,Collaboratively gather resources and return to designated location.,"
<BehaviorTree>
<Sequence>
<Action>gather_resources</Action>
<Action>return_to_location</Action>
</Sequence>
</BehaviorTree>"
Avoid obstacles while moving towards the target location.,Use the following behaviors to generate XML Behavior tree based on the user command: avoid_obstacles: Condition node - Checks for obstacles in the environment. move_towards_target: Action node - Moves the agent towards a designated target location.,Avoid obstacles while moving towards the target location.,"
<BehaviorTree>
<Selector>
<Sequence>
<Condition>avoid_obstacles</Condition>
<Action>move_towards_target</Action>
</Sequence>
</Selector>
</BehaviorTree>"
Attack the enemy with the highest threat level.,Use the following behaviors to generate XML Behavior tree based on the user command: find_enemy: Action node - Scans the environment and locates the enemy with the highest threat level. attack_enemy: Action node - Attacks the designated enemy.,Attack the enemy with the highest threat level.,"
<BehaviorTree>
<Sequence>
<Action>find_enemy</Action>
<Action>attack_enemy</Action>
</Sequence>
</BehaviorTree>"
Stay in formation with other robots and move towards a designated target.,Use the following behaviors to generate XML Behavior tree based on the user command: stay_in_formation: Condition node - Checks if the agent is in formation with other robots. move_towards_target: Action node - Moves the agent towards a designated target location.,Stay in formation with other robots and move towards a designated target.,"
<BehaviorTree>
<Selector>
<Sequence>
<Condition>stay_in_formation</Condition>
<Action>move_towards_target</Action>
</Sequence>
</Selector>
</BehaviorTree>"
Search for and rescue any injured robots in the area.,Use the following behaviors to generate XML Behavior tree based on the user command: search_for_injured: Action node - Scans the environment for any injured robots. rescue_injured: Action node - Coordinates with other robots to rescue the injured robot.,Search for and rescue any injured robots in the area.,"
<BehaviorTree>
<Sequence>
<Action>search_for_injured</Action>
<Action>rescue_injured</Action>
</Sequence>
</BehaviorTree>"
Defend the designated area from incoming threats.,Use the following behaviors to generate XML Behavior tree based on the user command: defend_area: Action node - Stays in the designated area and defends it from any incoming threats. scan_for_threats: Action node - Scans the environment for any potential threats.,Defend the designated area from incoming threats.,"
<BehaviorTree>
<Sequence>
<Action>defend_area</Action>
<Action>scan_for_threats</Action>
</Sequence>
</BehaviorTree>"
Coordinate with other robots to form a barrier and block enemy entry.,Use the following behaviors to generate XML Behavior tree based on the user command: form_barrier: Action node - Coordinates with other robots to form a physical barrier. block_enemy_entry: Action node - Prevents enemies from entering a designated area.,Coordinate with other robots to form a barrier and block enemy entry.,"
<BehaviorTree>
<Sequence>
<Action>form_barrier</Action>
<Action>block_enemy_entry</Action>
</Sequence>
</BehaviorTree>"
Report back to the designated leader and receive new instructions.,Use the following behaviors to generate XML Behavior tree based on the user command: report_to_leader: Action node - Communicates with the designated leader. receive_instructions: Action node - Receives new instructions from the leader.,Report back to the designated leader and receive new instructions.,"
<BehaviorTree>
<Sequence>
<Action>report_to_leader</Action>
<Action>receive_instructions</Action>
</Sequence>
</BehaviorTree>"
Repair damaged robots by gathering necessary resources and fixing the damage.,Use the following behaviors to generate XML Behavior tree based on the user command: gather_resources: Action node - Coordinates with other robots to gather necessary resources. repair_damage: Action node - Repairs damaged robots.,Repair damaged robots by gathering necessary resources and fixing the damage.,"
<BehaviorTree>
<Sequence>
<Action>gather_resources</Action>
<Action>repair_damage</Action>
</Sequence>
</BehaviorTree>"
Scan for potential areas for resource collection and report findings to the designated leader.,Use the following behaviors to generate XML Behavior tree based on the user command: scan_for_resources: Action node - Scans the environment for potential resource collection areas. report_to_leader: Action node - Communicates with the designated leader to report findings.,Scan for potential areas for resource collection and report findings to the designated leader.,"
<BehaviorTree>
<Sequence>
<Action>scan_for_resources</Action>
<Action>report_to_leader</Action>
</Sequence>
</BehaviorTree>"
Follow the designated leader and assist in completing tasks.,Use the following behaviors to generate XML Behavior tree based on the user command: follow_leader: Action node - Follows the designated leader. assist_leader: Action node - Assists in completing tasks assigned by the leader.,Follow the designated leader and assist in completing tasks.,"
<BehaviorTree>
<Sequence>
<Action>follow_leader</Action>
<Action>assist_leader</Action>
</Sequence>
</BehaviorTree>"
Communicate with other robots and gather information about the surrounding environment.,Use the following behaviors to generate XML Behavior tree based on the user command: communicate: Action node - Communicates with other robots. gather_information: Action node - Gathers information about the surrounding environment.,Communicate with other robots and gather information about the surrounding environment.,"
<BehaviorTree>
<Sequence>
<Action>communicate</Action>
<Action>gather_information</Action>
</Sequence>
</BehaviorTree>"
Use sensors to detect changes in the environment and adapt behaviors accordingly.,Use the following behaviors to generate XML Behavior tree based on the user command: use_sensors: Action node - Activates sensors to detect changes in the environment. adapt_behaviors: Action node - Modifies behaviors based on information from sensors.,Use sensors to detect changes in the environment and adapt behaviors accordingly.,"
<BehaviorTree>
<Sequence>
<Action>use_sensors</Action>
<Action>adapt_behaviors</Action>
</Sequence>
</BehaviorTree>"
Coordinate with other robots to lift and transport heavy objects.,Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_lifting: Action node - Communicates and coordinates with other robots to lift heavy objects. transport_object: Action node - Moves the lifted object to a designated location.,Coordinate with other robots to lift and transport heavy objects.,"
<BehaviorTree>
<Sequence>
<Action>coordinate_lifting</Action>
<Action>transport_object</Action>
</Sequence>
</BehaviorTree>"
Search for and capture a designated target.,Use the following behaviors to generate XML Behavior tree based on the user command: search_for_target: Action node - Scans the environment for the designated target. capture_target: Action node - Coordinates with other robots to capture the target.,Search for and capture a designated target.,"
<BehaviorTree>
<Sequence>
<Action>search_for_target</Action>
<Action>capture_target</Action>
</Sequence>
</BehaviorTree>"
Use collective decision making to determine the best course of action.,Use the following behaviors to generate XML Behavior tree based on the user command: collect_information: Action node - Collects information from other robots. make_decision: Action node - Uses the collected information to make a decision.,Use collective decision making to determine the best course of action.,"
<BehaviorTree>
<Sequence>
<Action>collect_information</Action>
<Action>make_decision</Action>
</Sequence>
</BehaviorTree>"
Navigate through a maze to reach the designated endpoint.,Use the following behaviors to generate XML Behavior tree based on the user command: navigate_maze: Action node - Utilizes mapping and path finding algorithms to navigate through a maze. reach_endpoint: Action node - Reaches the designated endpoint.,Navigate through a maze to reach the designated endpoint.,"
<BehaviorTree>
<Sequence>
<Action>navigate_maze</Action>
<Action>reach_endpoint</Action>
</Sequence>
</BehaviorTree>"
"Search for and collect resources. If resources are scarce, call for backup from a nearby robot.",Use the following behaviors to generate XML Behavior tree based on the user command: search_resources: Action node - Makes the agent search for resources. collect: Action node - Makes the agent collect resources. call_for_backup: Action node - Makes the agent call for backup from a nearby robot. is_resource_scarce: Condition node - Checks if the number of available resources is below a specific threshold.,"Search for and collect resources. If resources are scarce, call for backup from a nearby robot.","
<BehaviorTree>
<Selector>
<Sequence>
<Action>search_resources</Action>
<Action>collect</Action>
</Sequence>
<Sequence>
<Condition>is_resource_scarce</Condition>
<Action>call_for_backup</Action>
</Sequence>
</Selector>
</BehaviorTree>"
Coordinate with other robots to build a new structure.,Use the following behaviors to generate XML Behavior tree based on the user command: coordinate: Action node - Makes the agent coordinate with other robots. build: Action node - Makes the agent participate in the building process. is_building_in_progress: Condition node - Checks if a building is already in progress.,Coordinate with other robots to build a new structure.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>coordinate</Action>
<Action>build</Action>
</Sequence>
<Sequence>
<Condition>is_building_in_progress</Condition>
</Sequence>
</Selector>
</BehaviorTree>"
Navigate through a maze and reach the designated end point.,Use the following behaviors to generate XML Behavior tree based on the user command: navigate_maze: Action node - Makes the agent navigate through the maze. reach_end_point: Action node - Makes the agent reach the designated end point. is_end_point_reached: Condition node - Checks if the agent has reached the end point.,Navigate through a maze and reach the designated end point.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>navigate_maze</Action>
<Action>reach_end_point</Action>
</Sequence>
<Condition>is_end_point_reached</Condition>
</Selector>
</BehaviorTree>"
Gather data from different locations and transmit it to the main base.,Use the following behaviors to generate XML Behavior tree based on the user command: gather_data: Action node - Makes the agent gather data from different locations. transmit_data: Action node - Makes the agent transmit the gathered data to the main base. is_data_needed: Condition node - Checks if the main base requires the data.,Gather data from different locations and transmit it to the main base.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>gather_data</Action>
<Action>transmit_data</Action>
</Sequence>
<Sequence>
<Condition>is_data_needed</Condition>
</Sequence>
</Selector>
</BehaviorTree>"
Patrol a certain area and flag any suspicious activity.,Use the following behaviors to generate XML Behavior tree based on the user command: patrol: Action node - Makes the agent patrol a certain area. check_suspicious_activity: Action node - Makes the agent scan the area for any suspicious activity. flag_activity: Action node - Makes the agent flag the suspicious activity. is_suspicious_activity: Condition node - Checks if there is any suspicious activity in the area.,Patrol a certain area and flag any suspicious activity.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>patrol</Action>
<Action>check_suspicious_activity</Action>
<Action>flag_activity</Action>
</Sequence>
<Condition>is_suspicious_activity</Condition>
</Selector>
</BehaviorTree>"
Work collaboratively with another robot to complete a specific task.,Use the following behaviors to generate XML Behavior tree based on the user command: collaborate: Action node - Makes the agent collaborate with another robot. complete_task: Action node - Makes the agent complete the assigned task. is_task_complete: Condition node - Checks if the task has been completed.,Work collaboratively with another robot to complete a specific task.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>collaborate</Action>
<Action>complete_task</Action>
</Sequence>
<Condition>is_task_complete</Condition>
</Selector>
</BehaviorTree>"
Avoid obstacles while moving towards a specific location.,Use the following behaviors to generate XML Behavior tree based on the user command: move_to_location: Action node - Makes the agent move towards a specific location. avoid_obstacles: Action node - Makes the agent avoid any obstacles in its path. is_obstacle_present: Condition node - Checks if there is any obstacle in the agent's path.,Avoid obstacles while moving towards a specific location.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>move_to_location</Action>
</Sequence>
<Sequence>
<Condition>is_obstacle_present</Condition>
<Action>avoid_obstacles</Action>
</Sequence>
</Selector>
</BehaviorTree>"
Search for and rescue any injured team members.,Use the following behaviors to generate XML Behavior tree based on the user command: search: Action node - Makes the agent search for injured team members. rescue: Action node - Makes the agent rescue any injured team members found. is_injured: Condition node - Checks if there is an injured team member.,Search for and rescue any injured team members.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>search</Action>
<Action>rescue</Action>
</Sequence>
<Sequence>
<Condition>is_injured</Condition>
</Sequence>
</Selector>
</BehaviorTree>"
Protect the main base from enemy attacks.,Use the following behaviors to generate XML Behavior tree based on the user command: protect: Action node - Makes the agent protect the main base. scout: Subtree node - Represents a behavior tree for scouting the surrounding area. attack: Action node - Makes the agent attack any enemies detected. is_enemy_detected: Condition node - Checks if there are any enemies in the area.,Protect the main base from enemy attacks.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>protect</Action>
<Selector>
<Sequence>
<Action>scout</Action>
<Action>attack</Action>
</Sequence>
</Selector>
<Condition>is_enemy_detected</Condition>
</Selector>
</BehaviorTree>"
Harvest resources and bring them to the designated storage area.,Use the following behaviors to generate XML Behavior tree based on the user command: harvest_resources: Action node - Makes the agent harvest resources from the environment. bring_to_storage: Action node - Makes the agent bring the harvested resources to the designated storage area. is_storage_full: Condition node - Checks if the designated storage area is full.,Harvest resources and bring them to the designated storage area.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>harvest_resources</Action>
<Action>bring_to_storage</Action>
</Sequence>
<Sequence>
<Condition>is_storage_full</Condition>
</Sequence>
</Selector>
</BehaviorTree>"
Explore a new area and map it out for future reference.,Use the following behaviors to generate XML Behavior tree based on the user command: explore_new_area: Action node - Makes the agent explore an uncharted area. map_area: Action node - Makes the agent map out the area for future reference. is_area_mapped: Condition node - Checks if the area has been fully mapped.,Explore a new area and map it out for future reference.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>explore_new_area</Action>
<Action>map_area</Action>
</Sequence>
<Condition>is_area_mapped</Condition>
</Selector>
</BehaviorTree>"
Perform a coordinated attack with other robots on a specific target.,Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_attack: Action node - Makes the agent coordinate with other robots for a synchronized attack. move_to_target: Action node - Makes the agent move towards the designated target. attack_target: Action node - Makes the agent attack the target. is_target_destroyed: Condition node - Checks if the target has been destroyed.,Perform a coordinated attack with other robots on a specific target.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>coordinate_attack</Action>
<Action>move_to_target</Action>
<Action>attack_target</Action>
</Sequence>
<Condition>is_target_destroyed</Condition>
</Selector>
</BehaviorTree>"
Search for and activate a hidden switch to open a secret passage.,Use the following behaviors to generate XML Behavior tree based on the user command: search_for_switch: Action node - Makes the agent search for a hidden switch. activate_switch: Action node - Makes the agent activate the switch when found. navigate_through_passage: Action node - Makes the agent navigate through the opened secret passage. is_switch_found: Condition node - Checks if the hidden switch has been found and activated.,Search for and activate a hidden switch to open a secret passage.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>search_for_switch</Action>
<Action>activate_switch</Action>
</Sequence>
<Sequence>
<Condition>is_switch_found</Condition>
<Action>navigate_through_passage</Action>
</Sequence>
</Selector>
</BehaviorTree>"
Gather supplies and distribute them equally among all team members.,Use the following behaviors to generate XML Behavior tree based on the user command: gather_supplies: Action node - Makes the agent gather supplies from the environment. distribute_supplies: Action node - Makes the agent distribute the gathered supplies among all team members. is_supplies_needed: Condition node - Checks if any team member is in need of supplies.,Gather supplies and distribute them equally among all team members.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>gather_supplies</Action>
<Action>distribute_supplies</Action>
</Sequence>
<Sequence>
<Condition>is_supplies_needed</Condition>
</Sequence>
</Selector>
</BehaviorTree>"
Escort a valuable package to a specific delivery location.,Use the following behaviors to generate XML Behavior tree based on the user command: escort: Action node - Makes the agent escort the valuable package to the designated delivery location. defend_package: Action node - Makes the agent defend the package from any potential threats. is_delivery_location_reached: Condition node - Checks if the agent has reached the designated delivery location.,Escort a valuable package to a specific delivery location.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>escort</Action>
<Action>defend_package</Action>
</Sequence>
<Condition>is_delivery_location_reached</Condition>
</Selector>
</BehaviorTree>"
Activate all switches in a specific sequence to open a hidden door.,Use the following behaviors to generate XML Behavior tree based on the user command: activate_switches: Subtree node - Represents a behavior tree for activating all switches in a specific sequence. open_door: Action node - Makes the agent open the hidden door once all switches have been activated. is_all_switches_activated: Condition node - Checks if all switches in the sequence have been activated.,Activate all switches in a specific sequence to open a hidden door.,"
<BehaviorTree>
<Selector>
<Action>activate_switches</Action>
<Sequence>
<Condition>is_all_switches_activated</Condition>
<Action>open_door</Action>
</Sequence>
</Selector>
</BehaviorTree>"
Work together to form a bridge and cross over a large gap.,Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_bridge_building: Action node - Makes the agent coordinate with other robots to form a bridge. build_bridge: Action node - Makes the agent participate in building the bridge structure. cross_bridge: Action node - Makes the agent cross over the completed bridge. is_bridge_completed: Condition node - Checks if the bridge has been successfully built.,Work together to form a bridge and cross over a large gap.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>coordinate_bridge_building</Action>
<Action>build_bridge</Action>
</Sequence>
<Sequence>
<Condition>is_bridge_completed</Condition>
<Action>cross_bridge</Action>
</Sequence>
</Selector>
</BehaviorTree>"
Rest and recharge batteries before continuing with tasks.,Use the following behaviors to generate XML Behavior tree based on the user command: rest_and_recharge: Action node - Makes the agent rest and recharge its batteries. continue_task: Action node - Makes the agent continue with the previous task after recharging. is_battery_low: Condition node - Checks if the agent's battery level is low.,Rest and recharge batteries before continuing with tasks.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>rest_and_recharge</Action>
<Action>continue_task</Action>
</Sequence>
<Condition>is_battery_low</Condition>
</Selector>
</BehaviorTree>"
"Collect resources and return to base. If enemies are detected, retreat to base and regroup with teammates.",Use the following behaviors to generate XML Behavior tree based on the user command: collect_resources: Action node (same as before). return_to_base: Subtree node (same as before). retreat_to_base: Action node (same as before). regroup: Action node (same as before). detect_enemies: Condition node (same as before).,"Collect resources and return to base. If enemies are detected, retreat to base and regroup with teammates.","
<BehaviorTree>
<Sequence>
<Action>collect_resources</Action>
<Action>return_to_base</Action>
<Selector>
<Sequence>
<Condition>detect_enemies</Condition>
<Sequence>
<Action>retreat_to_base</Action>
<Action>regroup</Action>
</Sequence>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
"Navigate through a maze. If a dead end is reached, turn around and try a different path.",Use the following behaviors to generate XML Behavior tree based on the user command: navigate_maze: Action node (same as before). turn_around: Action node (same as before). try_different_path: Action node (same as before). reached_dead_end: Condition node (same as before).,"Navigate through a maze. If a dead end is reached, turn around and try a different path.","
<BehaviorTree>
<Selector>
<Sequence>
<Action>navigate_maze</Action>
<Condition>reached_dead_end</Condition>
<Sequence>
<Action>turn_around</Action>
<Action>try_different_path</Action>
</Sequence>
</Selector>
</BehaviorTree>"
"Build a structure. If resource level is below a certain threshold, gather more resources before continuing building.",Use the following behaviors to generate XML Behavior tree based on the user command: build_structure: Action node (same as before). gather_resources: Subtree node (same as before). collect_resources: Action node (same as before). return_to_build_site: Subtree node (same as before). check_resource_level: Condition node (same as before).,"Build a structure. If resource level is below a certain threshold, gather more resources before continuing building.","
<BehaviorTree>
<Sequence>
<Action>build_structure</Action>
<Selector>
<Sequence>
<Action>gather_resources</Action>
<Action>collect_resources</Action>
</Sequence>
<Sequence>
<Action>return_to_build_site</Action>
<Condition>check_resource_level</Condition>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
"Explore an unknown environment. If obstacles are detected, analyze them and find a way around.",Use the following behaviors to generate XML Behavior tree based on the user command: explore_environment: Action node (same as before). analyze_obstacles: Subtree node (same as before). find_way_around: Action node (same as before). detect_obstacles: Condition node (same as before).,"Explore an unknown environment. If obstacles are detected, analyze them and find a way around.","
<BehaviorTree>
<Sequence>
<Action>explore_environment</Action>
<Selector>
<Sequence>
<Action>analyze_obstacles</Action>
<Selector>
<Sequence>
<Action>find_way_around</Action>
<Action>analyze_obstacles</Action>
</Sequence>
<Action>explore_environment</Action>
</Selector>
</Sequence>
<Condition>detect_obstacles</Condition>
</Selector>
</Sequence>
</BehaviorTree>"
"Protect the queen bee at all costs. If injured, retreat to heal before resuming protection duties.",Use the following behaviors to generate XML Behavior tree based on the user command: protect_queen_bee: Action node (same as before). retreat_to_heal: Subtree node (same as before). heal_queen_bee: Action node (same as before). injured: Condition node (same as before).,"Protect the queen bee at all costs. If injured, retreat to heal before resuming protection duties.","
<BehaviorTree>
<Sequence>
<Action>protect_queen_bee</Action>
<Selector>
<Sequence>
<Action>retreat_to_heal</Action>
<Action>heal_queen_bee</Action>
</Sequence>
<Condition>injured</Condition>
</Selector>
</Sequence>
</BehaviorTree>"
"Forage for food. If food is scarce, search for new sources of food.",Use the following behaviors to generate XML Behavior tree based on the user command: forage_food: Action node (same as before). search_for_food: Action node (same as before). no_food_available: Condition node (same as before).,"Forage for food. If food is scarce, search for new sources of food.","
<BehaviorTree>
<Sequence>
<Action>forage_food</Action>
<Selector>
<Sequence>
<Action>search_for_food</Action>
</Sequence>
<Condition>no_food_available</Condition>
</Selector>
</Sequence>
</BehaviorTree>"
"Clear fallen debris from the path. If debris is heavy, call for assistance.",Use the following behaviors to generate XML Behavior tree based on the user command: clear_debris: Action node (same as before). call_for_assistance: Action node (same as before). debris_is_heavy: Condition node (same as before).,"Clear fallen debris from the path. If debris is heavy, call for assistance.","
<BehaviorTree>
<Sequence>
<Action>clear_debris</Action>
<Selector>
<Sequence>
<Action>call_for_assistance</Action>
</Sequence>
<Condition>debris_is_heavy</Condition>
</Selector>
</Sequence>
</BehaviorTree>"
"Search for a lost companion. If not found within a certain time frame, expand the search area.",Use the following behaviors to generate XML Behavior tree based on the user command: search_for_companion: Subtree node (same as before). expand_search_area: Action node (same as before). not_found_within_timeframe: Condition node (same as before).,"Search for a lost companion. If not found within a certain time frame, expand the search area.","
<BehaviorTree>
<Sequence>
<Action>search_for_companion</Action>
<Selector>
<Sequence>
<Action>expand_search_area</Action>
</Sequence>
<Condition>not_found_within_timeframe</Condition>
</Selector>
</Sequence>
</BehaviorTree>"
"Gather a certain number of items. If the target number is changed, recalculate the number of items needed and adjust the gathering strategy accordingly.",Use the following behaviors to generate XML Behavior tree based on the user command: gather_items: Action node (same as before). recalculate_target: Action node (same as before). adjust_gathering_strategy: Action node (same as before). target_changed: Condition node (same as before).,"Gather a certain number of items. If the target number is changed, recalculate the number of items needed and adjust the gathering strategy accordingly.","
<BehaviorTree>
<Sequence>
<Action>gather_items</Action>
<Selector>
<Sequence>
<Action>recalculate_target</Action>
<Action>adjust_gathering_strategy</Action>
</Sequence>
<Condition>target_changed</Condition>
</Selector>
</Sequence>
</BehaviorTree>"
"Defend the perimeter. If enemy attacks are increasing, call for reinforcements.",Use the following behaviors to generate XML Behavior tree based on the user command: defend_perimeter: Action node (same as before). call_reinforcements: Action node (same as before). enemy_attacks_increasing: Condition node (same as before).,"Defend the perimeter. If enemy attacks are increasing, call for reinforcements.","
<BehaviorTree>
<Sequence>
<Action>defend_perimeter</Action>
<Selector>
<Sequence>
<Action>call_reinforcements</Action>
</Sequence>
<Condition>enemy_attacks_increasing</Condition>
</Selector>
</Sequence>
</BehaviorTree>"
"Conduct a coordinated dance routine with other swarm robots. If any robot deviates from the routine, pause and realign before continuing.",Use the following behaviors to generate XML Behavior tree based on the user command: coordinated_dance: Action node (same as before). pause_and_realign: Action node (same as before). deviated_from_routine: Condition node (same as before).,"Conduct a coordinated dance routine with other swarm robots. If any robot deviates from the routine, pause and realign before continuing.","
<BehaviorTree>
<Sequence>
<Action>coordinated_dance</Action>
<Selector>
<Sequence>
<Action>pause_and_realign</Action>
</Sequence>
<Condition>deviated_from_routine</Condition>
</Selector>
</Sequence>
</BehaviorTree>"
"Navigate through a cave system. If stuck, use tools to dig through obstacles and continue on.",Use the following behaviors to generate XML Behavior tree based on the user command: navigate_cave: Action node (same as before). use_tools: Action node (same as before). dig_through_obstacles: Action node (same as before). stuck: Condition node (same as before).,"Navigate through a cave system. If stuck, use tools to dig through obstacles and continue on.","
<BehaviorTree>
<Selector>
<Sequence>
<Action>navigate_cave</Action>
</Sequence>
<Sequence>
<Action>use_tools</Action>
<Action>dig_through_obstacles</Action>
</Sequence>
<Condition>stuck</Condition>
</Selector>
</BehaviorTree>"
"Gather information about the environment. If necessary, communicate with other robots to gather more comprehensive data.",Use the following behaviors to generate XML Behavior tree based on the user command: gather_info: Action node (same as before). communicate: Action node (same as before). gather_comprehensive_info: Action node (same as before). more_info_needed: Condition node (same as before).,"Gather information about the environment. If necessary, communicate with other robots to gather more comprehensive data.","
<BehaviorTree>
<Selector>
<Sequence>
<Action>gather_info</Action>
</Sequence>
<Sequence>
<Action>communicate</Action>
<Selector>
<Sequence>
<Action>gather_comprehensive_info</Action>
</Sequence>
</Selector>
</Sequence>
<Condition>more_info_needed</Condition>
</Selector>
</BehaviorTree>"
"Coordinate movements with other swarm robots to create a formation. If the formation is disrupted, reposition and continue.",Use the following behaviors to generate XML Behavior tree based on the user command: create_formation: Action node (same as before). reposition: Action node (same as before). formation_disrupted: Condition node (same as before).,"Coordinate movements with other swarm robots to create a formation. If the formation is disrupted, reposition and continue.","
<BehaviorTree>
<Selector>
<Sequence>
<Action>create_formation</Action>
</Sequence>
<Sequence>
<Action>reposition</Action>
</Sequence>
<Condition>formation_disrupted</Condition>
</Selector>
</BehaviorTree>"
"Assemble and disassemble parts to build a structure. If the structure design is changed, adjust the assembly process accordingly.",Use the following behaviors to generate XML Behavior tree based on the user command: assemble_structure: Action node (same as before). disassemble_parts: Action node (same as before). change_structure_design: Action node (same as before). design_changed: Condition node (same as before).,"Assemble and disassemble parts to build a structure. If the structure design is changed, adjust the assembly process accordingly.","
<BehaviorTree>
<Sequence>
<Action>assemble_structure</Action>
<Selector>
<Sequence>
<Action>change_structure_design</Action>
<Action>disassemble_parts</Action>
</Sequence>
<Condition>design_changed</Condition>
</Selector>
</Sequence>
</BehaviorTree>"
"Patrol an area and execute a specific action every few minutes. If the action is not needed, continue patrol.",Use the following behaviors to generate XML Behavior tree based on the user command: patrol_area: Subtree node (same as before). execute_action: Action node (same as before). check_for_action: Condition node (same as before).,"Patrol an area and execute a specific action every few minutes. If the action is not needed, continue patrol.","
<BehaviorTree>
<Selector>
<Sequence>
<Action>patrol_area</Action>
<Selector>
<Sequence>
<Action>execute_action</Action>
</Sequence>
<Condition>check_for_action</Condition>
</Selector>
</Sequence>
</Selector>
</BehaviorTree>"
"Follow a specific path while avoiding obstacles. If stuck, backtrack and try a different path.",Use the following behaviors to generate XML Behavior tree based on the user command: follow_path: Action node (same as before). avoid_obstacles: Subtree node (same as before). backtrack: Action node (same as before). stuck: Condition node (same as before).,"Follow a specific path while avoiding obstacles. If stuck, backtrack and try a different path.","
<BehaviorTree>
<Sequence>
<Selector>
<Sequence>
<Action>follow_path</Action>
<Selector>
<Sequence>
<Action>avoid_obstacles</Action>
</Sequence>
</Selector>
</Sequence>
<Sequence>
<Action>backtrack</Action>
</Sequence>
<Condition>stuck</Condition>
</Selector>
</Sequence>
</BehaviorTree>"
"Search and rescue a lost team member. If unable to locate within a certain timeframe, call for backup.",Use the following behaviors to generate XML Behavior tree based on the user command: search_and_rescue: Subtree node (same as before). call_for_backup: Action node (same as before). unable_to_locate: Condition node (same as before).,"Search and rescue a lost team member. If unable to locate within a certain timeframe, call for backup.","
<BehaviorTree>
<Sequence>
<Selector>
<Sequence>
<Action>search_and_rescue"
"If the obstacle is within a certain proximity, avoid it. Otherwise, continue straight.",Use the following behaviors to generate XML Behavior tree based on the user command: avoid_obstacle: Action node - Makes the agent move around the obstacle. is_obstacle_close: Condition node - Checks if the obstacle is within the designated proximity.,"If the obstacle is within a certain proximity, avoid it. Otherwise, continue straight.","
<BehaviorTree>
<Selector>
<Condition>is_obstacle_close</Condition>
<Action>avoid_obstacle</Action>
<Action>move_forward</Action>
</Selector>
</BehaviorTree>"
"If the destination is reachable, move towards it. Otherwise, wait until it becomes reachable.",Use the following behaviors to generate XML Behavior tree based on the user command: move_towards_destination: Action node - Makes the agent move towards the designated destination. is_destination_reachable: Condition node - Checks if the destination is currently reachable.,"If the destination is reachable, move towards it. Otherwise, wait until it becomes reachable.","
<BehaviorTree>
<Sequence>
<Condition>is_destination_reachable</Condition>
<Action>move_towards_destination</Action>
</Sequence>
</BehaviorTree>"
"If the battery level is low, return to the charging station. Otherwise, continue with the current task.",Use the following behaviors to generate XML Behavior tree based on the user command: return_to_charging_station: Action node - Makes the agent return to the designated charging station. is_battery_low: Condition node - Checks if the battery level is below a certain threshold.,"If the battery level is low, return to the charging station. Otherwise, continue with the current task.","
<BehaviorTree>
<Selector>
<Condition>is_battery_low</Condition>
<Action>return_to_charging_station</Action>
<Action>continue_with_task</Action>
</Selector>
</BehaviorTree>"
"If there are any nearby objects, stop and gather information about them. Otherwise, continue with the current task.",Use the following behaviors to generate XML Behavior tree based on the user command: gather_information: Action node - Makes the agent stop and gather information about nearby objects. any_objects_nearby: Condition node - Checks if there are any objects within a certain proximity.,"If there are any nearby objects, stop and gather information about them. Otherwise, continue with the current task.","
<BehaviorTree>
<Selector>
<Condition>any_objects_nearby</Condition>
<Action>gather_information</Action>
<Action>continue_with_task</Action>
</Selector>
</BehaviorTree>"
"If the communication link with other robots is lost, search for a new connection. Otherwise, continue with the current task.",Use the following behaviors to generate XML Behavior tree based on the user command: search_for_connection: Action node - Makes the agent search for a new communication link with other robots. communication_lost: Condition node - Checks if the current communication link with other robots is lost.,"If the communication link with other robots is lost, search for a new connection. Otherwise, continue with the current task.","
<BehaviorTree>
<Selector>
<Condition>communication_lost</Condition>
<Action>search_for_connection</Action>
<Action>continue_with_task</Action>
</Selector>
</BehaviorTree>"
"If the temperature rises beyond a certain threshold, move to a cooler location. Otherwise, continue with the current task.",Use the following behaviors to generate XML Behavior tree based on the user command: move_to_cooler_location: Action node - Makes the agent move to a location with a lower temperature. temperature_too_high: Condition node - Checks if the temperature has risen beyond a certain threshold.,"If the temperature rises beyond a certain threshold, move to a cooler location. Otherwise, continue with the current task.","
<BehaviorTree>
<Selector>
<Condition>temperature_too_high</Condition>
<Action>move_to_cooler_location</Action>
<Action>continue_with_task</Action>
</Selector>
</BehaviorTree>"
"If the light intensity drops below a certain level, turn on the flashlight. Otherwise, continue with the current task.",Use the following behaviors to generate XML Behavior tree based on the user command: turn_on_flashlight: Action node - Turns on the agent's flashlight. light_intensity_low: Condition node - Checks if the light intensity has dropped below a certain level.,"If the light intensity drops below a certain level, turn on the flashlight. Otherwise, continue with the current task.","
<BehaviorTree>
<Selector>
<Condition>light_intensity_low</Condition>
<Action>turn_on_flashlight</Action>
<Action>continue_with_task</Action>
</Selector>
</BehaviorTree>"
"If there is a potential threat nearby, send a warning signal to other robots. Otherwise, continue with the current task.",Use the following behaviors to generate XML Behavior tree based on the user command: send_warning_signal: Action node - Sends a warning signal to other robots. potential_threat_nearby: Condition node - Checks if there is a potential threat within a certain proximity.,"If there is a potential threat nearby, send a warning signal to other robots. Otherwise, continue with the current task.","
<BehaviorTree>
<Selector>
<Condition>potential_threat_nearby</Condition>
<Action>send_warning_signal</Action>
<Action>continue_with_task</Action>
</Selector>
</BehaviorTree>"
"If there are too many obstacles in the way, switch to a different path. Otherwise, continue with the current task.",Use the following behaviors to generate XML Behavior tree based on the user command: switch_path: Action node - Switches to a different path to avoid too many obstacles. too_many_obstacles: Condition node - Checks if there are too many obstacles in the current path.,"If there are too many obstacles in the way, switch to a different path. Otherwise, continue with the current task.","
<BehaviorTree>
<Selector>
<Condition>too_many_obstacles</Condition>
<Action>switch_path</Action>
<Action>continue_with_task</Action>
</Selector>
</BehaviorTree>"
"If there are any injured team members, provide assistance. Otherwise, continue with the current task.",Use the following behaviors to generate XML Behavior tree based on the user command: provide_assistance: Action node - Provides assistance to an injured team member. any_injured_team_members: Condition node - Checks if there are any injured team members within a certain proximity.,"If there are any injured team members, provide assistance. Otherwise, continue with the current task.","
<BehaviorTree>
<Selector>
<Condition>any_injured_team_members</Condition>
<Action>provide_assistance</Action>
<Action>continue_with_task</Action>
</Selector>
</BehaviorTree>"
"If the terrain is too steep, switch to a vehicle form for easier navigation. Otherwise, continue with the current task.",Use the following behaviors to generate XML Behavior tree based on the user command: switch_to_vehicle_form: Action node - Switches to a vehicle form for easier navigation. terrain_too_steep: Condition node - Checks if the terrain is too steep for the current form.,"If the terrain is too steep, switch to a vehicle form for easier navigation. Otherwise, continue with the current task.","
<BehaviorTree>
<Selector>
<Condition>terrain_too_steep</Condition>
<Action>switch_to_vehicle_form</Action>
<Action>continue_with_task</Action>
</Selector>
</BehaviorTree>"
"If the target object is within reach, pick it up. Otherwise, move towards it.",Use the following behaviors to generate XML Behavior tree based on the user command: pick_up_object: Action node - Picks up the target object. is_target_in_reach: Condition node - Checks if the target object is within reach.,"If the target object is within reach, pick it up. Otherwise, move towards it.","
<BehaviorTree>
<Selector>
<Condition>is_target_in_reach</Condition>
<Action>pick_up_object</Action>
<Action>move_towards_target_object</Action>
</Selector>
</BehaviorTree>"
"If the communication link with the base is lost, re-establish the connection. Otherwise, continue with the current task.",Use the following behaviors to generate XML Behavior tree based on the user command: re-establish_connection: Action node - Attempts to re-establish the communication link with the base. communication_with_base_lost: Condition node - Checks if the current communication link with the base is lost.,"If the communication link with the base is lost, re-establish the connection. Otherwise, continue with the current task.","
<BehaviorTree>
<Selector>
<Condition>communication_with_base_lost</Condition>
<Action>re-establish_connection</Action>
<Action>continue_with_task</Action>
</Selector>
</BehaviorTree>"
"If the target location is too far, switch to a flying form for faster transportation. Otherwise, continue with the current task.",Use the following behaviors to generate XML Behavior tree based on the user command: switch_to_flying_form: Action node - Switches to a flying form for faster transportation. target_location_too_far: Condition node - Checks if the target location is beyond a certain distance.,"If the target location is too far, switch to a flying form for faster transportation. Otherwise, continue with the current task.","
<BehaviorTree>
<Selector>
<Condition>target_location_too_far</Condition>
<Action>switch_to_flying_form</Action>
<Action>continue_with_task</Action>
</Selector>
</BehaviorTree>"
"If the water level is too high, switch to a boat form for easier navigation. Otherwise, continue with the current task.",Use the following behaviors to generate XML Behavior tree based on the user command: switch_to_boat_form: Action node - Switches to a boat form for easier navigation. water_level_too_high: Condition node - Checks if the water level is above a certain threshold.,"If the water level is too high, switch to a boat form for easier navigation. Otherwise, continue with the current task.","
<BehaviorTree>
<Selector>
<Condition>water_level_too_high</Condition>
<Action>switch_to_boat_form</Action>
<Action>continue_with_task</Action>
</Selector>
</BehaviorTree>"
"If the target location is too close to a danger zone, send a warning signal and wait for further instructions. Otherwise, continue with the current task.",Use the following behaviors to generate XML Behavior tree based on the user command: send_warning_signal: Action node - Sends a warning signal about the danger zone. is_target_near_danger_zone: Condition node - Checks if the target location is within a certain proximity to a danger zone.,"If the target location is too close to a danger zone, send a warning signal and wait for further instructions. Otherwise, continue with the current task.","
<BehaviorTree>
<Selector>
<Condition>is_target_near_danger_zone</Condition>
<Action>send_warning_signal</Action>
<Action>wait_for_instructions</Action>
</Selector>
</BehaviorTree>"
"If there are any damaged objects in the environment, repair them. Otherwise, continue with the current task.",Use the following behaviors to generate XML Behavior tree based on the user command: repair_object: Action node - Repairs the damaged object. any_damaged_objects: Condition node - Checks if there are any damaged objects in the environment.,"If there are any damaged objects in the environment, repair them. Otherwise, continue with the current task.","
<BehaviorTree>
<Selector>
<Condition>any_damaged_objects</Condition>
<Action>repair_object</Action>
<Action>continue_with_task</Action>
</Selector>
</BehaviorTree>"
"If the team leader gives the ""gather"" command, switch to a formation and move towards the designated location. Otherwise, continue with the current task.","Use the following behaviors to generate XML Behavior tree based on the user command: switch_to_formation: Action node - Switches to a formation based on the team leader's instructions. gather_command_given: Condition node - Checks if the team leader has given the ""gather"" command.","If the team leader gives the ""gather"" command, switch to a formation and move towards the designated location. Otherwise, continue with the current task.","
<BehaviorTree>
<Selector>
<Condition>gather_command_given</Condition>
<Action>switch_to_formation</Action>
<Action>continue_with_task</Action>
</Selector>
</BehaviorTree>"
Move towards the nearest food source and harvest it.,Use the following behaviors to generate XML Behavior tree based on the user command: move_to_food: Subtree node (same as before). harvest_food: Action node (same as before). on_food_detected: Event node - Triggers when a food source is detected in the environment.,Move towards the nearest food source and harvest it.,"
<BehaviorTree>
  <Sequence>
    <Condition>on_food_detected</Condition>
    <Action>move_to_food</Action>
    <Action>harvest_food</Action>
  </Sequence>
</BehaviorTree>"
Defend the swarm against enemy attacks. Use a combination of attack and coordinate behaviors.,Use the following behaviors to generate XML Behavior tree based on the user command: attack_enemies: Subtree node (same as before). coordinate_with_swarm: Action node (same as before). on_enemy_detected: Event node - Triggers when an enemy is detected in the environment.,Defend the swarm against enemy attacks. Use a combination of attack and coordinate behaviors.,"
<BehaviorTree>
  <Sequence>
    <Condition>on_enemy_detected</Condition>
    <Action>attack_enemies</Action>
    <Action>coordinate_with_swarm</Action>
  </Sequence>
</BehaviorTree>"
Collect resources and deposit them in a designated location.,Use the following behaviors to generate XML Behavior tree based on the user command: collect_resources: Subtree node (same as before). deposit_resources: Action node (same as before). on_resource_detected: Event node - Triggers when a resource is detected in the environment.,Collect resources and deposit them in a designated location.,"
<BehaviorTree>
  <Sequence>
    <Condition>on_resource_detected</Condition>
    <Action>collect_resources</Action>
    <Action>deposit_resources</Action>
  </Sequence>
</BehaviorTree>"
Build a structure using available materials.,Use the following behaviors to generate XML Behavior tree based on the user command: collect_materials: Subtree node (same as before). build_structure: Action node (same as before). on_material_detected: Event node - Triggers when a material is detected in the environment.,Build a structure using available materials.,"
<BehaviorTree>
  <Sequence>
    <Condition>on_material_detected</Condition>
    <Action>collect_materials</Action>
    <Action>build_structure</Action>
  </Sequence>
</BehaviorTree>"
Navigate through a maze and find the exit.,Use the following behaviors to generate XML Behavior tree based on the user command: navigate_maze: Subtree node (same as before). on_exit_reached: Event node - Triggers when the exit is reached.,Navigate through a maze and find the exit.,"
<BehaviorTree>
  <Sequence>
    <Condition>on_exit_reached</Condition>
    <Action>navigate_maze</Action>
  </Sequence>
</BehaviorTree>"
Explore uncharted territory while avoiding obstacles.,Use the following behaviors to generate XML Behavior tree based on the user command: explore_territory: Subtree node (same as before). avoid_obstacles: Action node (same as before). on_obstacle_detected: Event node - Triggers when an obstacle is detected in the environment.,Explore uncharted territory while avoiding obstacles.,"
<BehaviorTree>
  <Sequence>
    <Condition>on_obstacle_detected</Condition>
    <Action>avoid_obstacles</Action>
    <Action>explore_territory</Action>
  </Sequence>
</BehaviorTree>"
Coordinate movements with other swarm robots to form a specific shape.,Use the following behaviors to generate XML Behavior tree based on the user command: form_shape: Subtree node (same as before). coordinate_with_swarm: Action node (same as before). on_coordinate_command: Event node - Triggers when a coordinate command is received from another robot.,Coordinate movements with other swarm robots to form a specific shape.,"
<BehaviorTree>
  <Sequence>
    <Condition>on_coordinate_command</Condition>
    <Action>form_shape</Action>
    <Action>coordinate_with_swarm</Action>
  </Sequence>
</BehaviorTree>"
Deploy sensors in a specific area to gather data.,Use the following behaviors to generate XML Behavior tree based on the user command: deploy_sensors: Subtree node (same as before). gather_data: Action node (same as before). on_sensor_deployment: Event node - Triggers when a sensor is deployed in the designated area.,Deploy sensors in a specific area to gather data.,"
<BehaviorTree>
  <Sequence>
    <Condition>on_sensor_deployment</Condition>
    <Action>deploy_sensors</Action>
    <Action>gather_data</Action>
  </Sequence>
</BehaviorTree>"
Search for and retrieve a specific object in the environment.,Use the following behaviors to generate XML Behavior tree based on the user command: search_object: Subtree node (same as before). retrieve_object: Action node (same as before). on_object_detected: Event node - Triggers when the designated object is detected in the environment.,Search for and retrieve a specific object in the environment.,"
<BehaviorTree>
  <Sequence>
    <Condition>on_object_detected</Condition>
    <Action>search_object</Action>
    <Action>retrieve_object</Action>
  </Sequence>
</BehaviorTree>"
Defuse a bomb in a high-stress environment.,Use the following behaviors to generate XML Behavior tree based on the user command: approach_bomb: Subtree node (same as before). defuse_bomb: Action node (same as before). on_bomb_detected: Event node - Triggers when a bomb is detected in the environment.,Defuse a bomb in a high-stress environment.,"
<BehaviorTree>
  <Sequence>
    <Condition>on_bomb_detected</Condition>
    <Action>approach_bomb</Action>
    <Action>defuse_bomb</Action>
  </Sequence>
</BehaviorTree>"
Create a formation and move as a group to a designated location.,Use the following behaviors to generate XML Behavior tree based on the user command: form_formation: Subtree node (same as before). move_as_group: Action node (same as before). on_formation_command: Event node - Triggers when a formation command is received from the leader robot.,Create a formation and move as a group to a designated location.,"
<BehaviorTree>
  <Sequence>
    <Condition>on_formation_command</Condition>
    <Action>form_formation</Action>
    <Action>move_as_group</Action>
  </Sequence>
</BehaviorTree>"
Perform a coordinated dance routine with other swarm robots.,Use the following behaviors to generate XML Behavior tree based on the user command: perform_dance: Subtree node (same as before). coordinate_with_swarm: Action node (same as before). on_dance_command: Event node - Triggers when a dance command is received from the leader robot.,Perform a coordinated dance routine with other swarm robots.,"
<BehaviorTree>
  <Sequence>
    <Condition>on_dance_command</Condition>
    <Action>perform_dance</Action>
    <Action>coordinate_with_swarm</Action>
  </Sequence>
</BehaviorTree>"
Gather information from multiple sources and use it to make a decision.,Use the following behaviors to generate XML Behavior tree based on the user command: gather_information: Subtree node (same as before). make_decision: Action node (same as before). on_information_collected: Event node - Triggers when all the necessary information has been gathered.,Gather information from multiple sources and use it to make a decision.,"
<BehaviorTree>
  <Sequence>
    <Condition>on_information_collected</Condition>
    <Action>gather_information</Action>
    <Action>make_decision</Action>
  </Sequence>
</BehaviorTree>"
Carry out a coordinated rescue operation.,Use the following behaviors to generate XML Behavior tree based on the user command: perform_rescue: Subtree node (same as before). coordinate_with_swarm: Action node (same as before). on_rescue_call: Event node - Triggers when a rescue call is received from a trapped individual.,Carry out a coordinated rescue operation.,"
<BehaviorTree>
  <Sequence>
    <Condition>on_rescue_call</Condition>
    <Action>perform_rescue</Action>
    <Action>coordinate_with_swarm</Action>
  </Sequence>
</BehaviorTree>"
Create a map of the surrounding environment.,Use the following behaviors to generate XML Behavior tree based on the user command: explore_area: Subtree node (same as before). map_environment: Action node (same as before). on_map_requested: Event node - Triggers when a map request is received from a user.,Create a map of the surrounding environment.,"
<BehaviorTree>
  <Sequence>
    <Condition>on_map_requested</Condition>
    <Action>explore_area</Action>
    <Action>map_environment</Action>
  </Sequence>
</BehaviorTree>"
Perform a coordinated search and rescue mission with other swarm robots.,Use the following behaviors to generate XML Behavior tree based on the user command: search_area: Subtree node (same as before). coordinate_with_swarm: Action node (same as before). on_search_command: Event node - Triggers when a search command is received from the leader robot.,Perform a coordinated search and rescue mission with other swarm robots.,"
<BehaviorTree>
  <Sequence>
    <Condition>on_search_command</Condition>
    <Action>search_area</Action>
    <Action>coordinate_with_swarm</Action>
  </Sequence>
</BehaviorTree>"
Collaboratively transport a heavy object to a designated location.,Use the following behaviors to generate XML Behavior tree based on the user command: approach_object: Subtree node (same as before). transport_object: Action node (same as before). on_object_detected: Event node - Triggers when an object is detected in the environment.,Collaboratively transport a heavy object to a designated location.,"
<BehaviorTree>
  <Sequence>
    <Condition>on_object_detected</Condition>
    <Action>approach_object</Action>
    <Action>transport_object</Action>
  </Sequence>
</BehaviorTree>"
Navigate through a hazardous environment and report back findings.,Use the following behaviors to generate XML Behavior tree based on the user command: navigate_hazard: Subtree node (same as before). report_findings: Action node (same as before). on_endangerment_detected: Event node - Triggers when a hazardous situation is encountered.,Navigate through a hazardous environment and report back findings.,"
<BehaviorTree>
  <Sequence>
    <Condition>on_endangerment_detected</Condition>
    <Action>navigate_hazard</Action>
    <Action>report_findings</Action>
  </Sequence>
</BehaviorTree>"
"Collect resources, deposit in assigned location, and return to base using shortest path.",Use the following behaviors to generate XML Behavior tree based on the user command: collect_resources: Action node - Directs the agent to collect resources based on its assigned role. deposit_location: Condition node - Checks if the agent has reached the designated deposit location. return_to_base: Action node - Commands the agent to return to the base using the shortest path available.,"Collect resources, deposit in assigned location, and return to base using shortest path.","
<BehaviorTree>
<Sequence>
<Selector>
<Action>collect_resources</Action>
<Sequence>
<Condition>deposit_location</Condition>
<Action>return_to_base</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
Follow a specific path while avoiding obstacles in real-time.,Use the following behaviors to generate XML Behavior tree based on the user command: follow_path: Action node - Guides the agent along a specified path while avoiding obstacles in real-time. check_obstacles: Condition node - Scans the environment for obstacles and returns True if any are detected.,Follow a specific path while avoiding obstacles in real-time.,"
<BehaviorTree>
<Sequence>
<Selector>
<Action>follow_path</Action>
<Condition>check_obstacles</Condition>
</Selector>
</Sequence>
</BehaviorTree>"
Gather data from designated locations and return all data to base.,Use the following behaviors to generate XML Behavior tree based on the user command: gather_data: Action node - Commands the agent to collect data from designated locations. gather_complete: Condition node - Checks if all data has been gathered. return_to_base: Action node - Instructs the agent to return to the base.,Gather data from designated locations and return all data to base.,"
<BehaviorTree>
<Sequence>
<Selector>
<Action>gather_data</Action>
<Sequence>
<Condition>gather_complete</Condition>
<Action>return_to_base</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
Search and locate a specific object in a specified area.,Use the following behaviors to generate XML Behavior tree based on the user command: search_area: Action node - Commands the agent to search a designated area. locate_object: Action node - Instructs the agent to locate the specific object and return its location.,Search and locate a specific object in a specified area.,"
<BehaviorTree>
<Sequence>
<Action>search_area</Action>
<Action>locate_object</Action>
</Sequence>
</BehaviorTree>"
Avoid other robots while moving to a designated location.,Use the following behaviors to generate XML Behavior tree based on the user command: move_to_location: Action node - Commands the agent to move to the designated location. check_robots: Condition node - Scans the environment for other robots and returns True if any are detected.,Avoid other robots while moving to a designated location.,"
<BehaviorTree>
<Sequence>
<Selector>
<Action>move_to_location</Action>
<Condition>check_robots</Condition>
</Selector>
</Sequence>
</BehaviorTree>"
Form a perimeter with other robots to protect a designated area.,Use the following behaviors to generate XML Behavior tree based on the user command: move_to_position: Action node - Commands the agent to move to their designated position in the perimeter. form_perimeter: Action node - Instructs the agent to coordinate with other robots to form a protective perimeter around the designated area.,Form a perimeter with other robots to protect a designated area.,"
<BehaviorTree>
<Sequence>
<Action>move_to_position</Action>
<Action>form_perimeter</Action>
</Sequence>
</BehaviorTree>"
Communicate with other robots to complete a predetermined task.,Use the following behaviors to generate XML Behavior tree based on the user command: communicate: Action node - Commands the agent to communicate with other robots to effectively complete a task. check_task_complete: Condition node - Checks if the predetermined task has been completed.,Communicate with other robots to complete a predetermined task.,"
<BehaviorTree>
<Sequence>
<Selector>
<Action>communicate</Action>
<Condition>check_task_complete</Condition>
</Selector>
</Sequence>
</BehaviorTree>"
Harvest crops and transport them to a specified location.,Use the following behaviors to generate XML Behavior tree based on the user command: harvest_crops: Action node - Directs the agent to harvest the designated crops. transport_crops: Action node - Instructs the agent to transport the harvested crops to a specified location.,Harvest crops and transport them to a specified location.,"
<BehaviorTree>
<Sequence>
<Action>harvest_crops</Action>
<Action>transport_crops</Action>
</Sequence>
</BehaviorTree>"
Detect and avoid hazardous materials in the environment.,Use the following behaviors to generate XML Behavior tree based on the user command: detect_hazards: Condition node - Scans the environment for hazardous materials and returns True if any are detected. avoid_hazards: Action node - Commands the agent to avoid the hazardous materials.,Detect and avoid hazardous materials in the environment.,"
<BehaviorTree>
<Sequence>
<Selector>
<Condition>detect_hazards</Condition>
<Action>avoid_hazards</Action>
</Selector>
</Sequence>
</BehaviorTree>"
Coordinate with other robots to build a structure.,Use the following behaviors to generate XML Behavior tree based on the user command: gather_materials: Action node - Directs the agent to gather the necessary materials for the structure. build_structure: Action node - Commands the agent to coordinate with other robots to build the designated structure.,Coordinate with other robots to build a structure.,"
<BehaviorTree>
<Sequence>
<Action>gather_materials</Action>
<Action>build_structure</Action>
</Sequence>
</BehaviorTree>"
Locate and assist a lost robot in the environment.,Use the following behaviors to generate XML Behavior tree based on the user command: search_enviroment: Action node - Allows the agent to scan the environment to locate the lost robot. assist_robot: Action node - Commands the agent to assist the lost robot once located.,Locate and assist a lost robot in the environment.,"
<BehaviorTree>
<Sequence>
<Action>search_environment</Action>
<Action>assist_robot</Action>
</Sequence>
</BehaviorTree>"
Maintain communication and coordination within the swarm.,Use the following behaviors to generate XML Behavior tree based on the user command: communicate: Action node - Commands the agent to communicate with other robots within the swarm. coordinate_actions: Action node - Instructs the agent to coordinate their actions with other robots to ensure efficient completion of tasks.,Maintain communication and coordination within the swarm.,"
<BehaviorTree>
<Sequence>
<Action>communicate</Action>
<Action>coordinate_actions</Action>
</Sequence>
</BehaviorTree>"
Identify and locate the source of a signal.,Use the following behaviors to generate XML Behavior tree based on the user command: identify_signal: Action node - Commands the agent to identify the source of a designated signal. locate_source: Action node - Instructs the agent to locate the source once identified.,Identify and locate the source of a signal.,"
<BehaviorTree>
<Sequence>
<Action>identify_signal</Action>
<Action>locate_source</Action>
</Sequence>
</BehaviorTree>"
Navigate through a maze and reach the end.,Use the following behaviors to generate XML Behavior tree based on the user command: navigate_maze: Action node - Guides the agent through the maze using a predefined path algorithm. reach_end: Condition node - Checks if the agent has reached the end of the maze.,Navigate through a maze and reach the end.,"
<BehaviorTree>
<Sequence>
<Selector>
<Action>navigate_maze</Action>
<Condition>reach_end</Condition>
</Selector>
</Sequence>
</BehaviorTree>"
Identify and retrieve a specific object from a cluttered environment.,Use the following behaviors to generate XML Behavior tree based on the user command: identify_object: Action node - Commands the agent to identify the specific object among the clutter. retrieve_object: Action node - Instructs the agent to retrieve the identified object from the environment.,Identify and retrieve a specific object from a cluttered environment.,"
<BehaviorTree>
<Sequence>
<Action>identify_object</Action>
<Action>retrieve_object</Action>
</Sequence>
</BehaviorTree>"
Maintain energy levels by returning to a charging station.,Use the following behaviors to generate XML Behavior tree based on the user command: check_energy: Condition node - Checks the agent's energy levels and returns True if they are low. return_to_charging: Action node - Commands the agent to return to the charging station.,Maintain energy levels by returning to a charging station.,"
<BehaviorTree>
<Sequence>
<Selector>
<Condition>check_energy</Condition>
<Action>return_to_charging</Action>
</Selector>
</Sequence>
</BehaviorTree>"
Clear a blocked pathway and continue on the designated path.,Use the following behaviors to generate XML Behavior tree based on the user command: check_obstacles: Condition node - Scans the environment for obstacles and returns True if any are detected. clear_path: Action node - Commands the agent to clear the path and continue on the designated route.,Clear a blocked pathway and continue on the designated path.,"
<BehaviorTree>
<Sequence>
<Selector>
<Condition>check_obstacles</Condition>
<Action>clear_path</Action>
</Selector>
</Sequence>
</BehaviorTree>"
Collect samples from designated locations and return them to a research station.,Use the following behaviors to generate XML Behavior tree based on the user command: collect_samples: Action node - Directs the agent to collect samples from designated locations. return_to_station: Action node - Commands the agent to return to the research station with the collected samples.,Collect samples from designated locations and return them to a research station.,"
<BehaviorTree>
<Sequence>
<Action>collect_samples</Action>
<Action>return_to_station</Action>
</Sequence>
</BehaviorTree>"
"Search for and collect resources until inventory is full, then return to base to drop off resources.",Use the following behaviors to generate XML Behavior tree based on the user command: search_for_resources: Action node (same as before). collect_resource: Action node (same as before). return_to_base: Action node (same as before). inventory_full: Condition node - checks if the agent's inventory is at maximum capacity.,"Search for and collect resources until inventory is full, then return to base to drop off resources.","
<BehaviorTree>
<Sequence>
<Sequence>
<Condition>inventory_full</Condition>
<Sequence>
<Action>search_for_resources</Action>
<Action>collect_resource</Action>
</Sequence>
<Action>return_to_base</Action>
</Sequence>
</BehaviorTree>"
Communicate with other robots in the swarm to perform a coordinated attack on a target.,Use the following behaviors to generate XML Behavior tree based on the user command: communicate: Action node - sends a message to other robots in the swarm. coordinate_attack: Action node - performs coordinated attack with other robots in the swarm. attack_target: Action node - attacks the designated target. receive_message: Condition node - checks if a message has been received from another robot.,Communicate with other robots in the swarm to perform a coordinated attack on a target.,"
<BehaviorTree>
<Sequence>
<Action>communicate</Action>
<Sequence>
<Condition>receive_message</Condition>
<Sequence>
<Action>coordinate_attack</Action>
<Action>attack_target</Action>
</Sequence>
</Sequence>
</BehaviorTree>"
"Navigate through a maze, avoiding obstacles and enemies.",Use the following behaviors to generate XML Behavior tree based on the user command: navigate_maze: Subtree node - uses move_to_target to navigate through the maze. avoid_obstacles: Condition node - checks for any obstacles in the agent's path. avoid_enemies: Condition node - checks for any enemy robots in the agent's path.,"Navigate through a maze, avoiding obstacles and enemies.","
<BehaviorTree>
<Sequence>
<Action>navigate_maze</Action>
<Selector>
<Condition>avoid_obstacles</Condition>
<Condition>avoid_enemies</Condition>
</Selector>
</Sequence>
</BehaviorTree>"
Work together with other robots to collectively lift and move a heavy object to a designated location.,Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_lift: Action node - coordinates the lift with other robots. lift_object: Action node - lifts the heavy object. move_with_object: Action node - moves with the heavy object. designated_location: Condition node - checks if the robot has reached the designated location.,Work together with other robots to collectively lift and move a heavy object to a designated location.,"
<BehaviorTree>
<Sequence>
<Action>coordinate_lift</Action>
<Sequence>
<Condition>designated_location</Condition>
<Action>lift_object</Action>
<Action>move_with_object</Action>
</Sequence>
</Sequence>
</BehaviorTree>"
"Go to a specific location and deposit a package, while avoiding any potential collisions.",Use the following behaviors to generate XML Behavior tree based on the user command: go_to_location: Subtree node - uses move_to_target to reach the designated location. deposit_package: Action node - deposits a package at the designated location. avoid_collisions: Condition node - checks for any nearby obstacles.,"Go to a specific location and deposit a package, while avoiding any potential collisions.","
<BehaviorTree>
<Sequence>
<Action>go_to_location</Action>
<Sequence>
<Condition>avoid_collisions</Condition>
<Action>deposit_package</Action>
</Sequence>
</Sequence>
</BehaviorTree>"
Perform a task while maintaining a safe distance from a designated target.,Use the following behaviors to generate XML Behavior tree based on the user command: maintain_safe_distance: Subtree node - contains actions to maintain a safe distance from the target. perform_task: Action node - performs the designated task. designated_target: Condition node - checks if the agent has reached the designated target.,Perform a task while maintaining a safe distance from a designated target.,"
<BehaviorTree>
<Sequence>
<Action>maintain_safe_distance</Action>
<Sequence>
<Condition>designated_target</Condition>
<Action>perform_task</Action>
</Sequence>
</Sequence>
</BehaviorTree>"
Search for and rescue any stranded robots in the environment.,Use the following behaviors to generate XML Behavior tree based on the user command: search_for_stranded: Action node - searches for any stranded robots. coordinate_rescue: Action node - coordinates the rescue with other robots. rescue_robot: Action node - rescues the stranded robot. found_stranded: Condition node - checks if a stranded robot has been found.,Search for and rescue any stranded robots in the environment.,"
<BehaviorTree>
<Sequence>
<Action>search_for_stranded</Action>
<Sequence>
<Condition>found_stranded</Condition>
<Sequence>
<Action>coordinate_rescue</Action>
<Action>rescue_robot</Action>
</Sequence>
</Sequence>
</BehaviorTree>"
"Work together with other robots to build a structure, assigning specific tasks to each robot.",Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_tasks: Action node - coordinates tasks with other robots. assign_task: Action node - assigns a specific task to the designated robot. perform_task: Subtree node - contains actions to perform the assigned task.,"Work together with other robots to build a structure, assigning specific tasks to each robot.","
<BehaviorTree>
<Sequence>
<Sequence>
<Action>coordinate_tasks</Action>
<Sequence>
<Action>assign_task</Action>
<Sequence>
<Condition>perform_task</Condition>
<Action>perform_task</Action>
</Sequence>
</Sequence>
</Sequence>
</Sequence>
</BehaviorTree>"
"Explore and map out a new environment, avoiding any potential hazards.",Use the following behaviors to generate XML Behavior tree based on the user command: explore_environment: Subtree node - contains actions to explore and map the environment using sensors and mapping algorithms. avoid_hazards: Condition node - checks for any potential hazards in the environment.,"Explore and map out a new environment, avoiding any potential hazards.","
<BehaviorTree>
<Sequence>
<Action>explore_environment</Action>
<Sequence>
<Condition>avoid_hazards</Condition>
</Sequence>
</Sequence>
</BehaviorTree>"
Continuously monitor and adjust the trajectory of the robot in order to maintain a specified altitude.,Use the following behaviors to generate XML Behavior tree based on the user command: monitor_altitude: Subtree node - uses sensors and autopilot systems to monitor and adjust the altitude. maintain_altitude: Action node - adjusts the trajectory to maintain the specified altitude. specified_altitude: Condition node - checks if the specified altitude has been reached.,Continuously monitor and adjust the trajectory of the robot in order to maintain a specified altitude.,"
<BehaviorTree>
<Sequence>
<Action>monitor_altitude</Action>
<Sequence>
<Condition>specified_altitude</Condition>
<Action>maintain_altitude</Action>
</Sequence>
</Sequence>
</BehaviorTree>"
Work together with other robots to collectively transport a heavy object through a narrow space.,Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_transport: Action node - coordinates the transport with other robots. transport_object: Action node - transports the heavy object. narrow_space: Condition node - checks if the robot has reached a narrow space and needs to coordinate with other robots.,Work together with other robots to collectively transport a heavy object through a narrow space.,"
<BehaviorTree>
<Sequence>
<Action>coordinate_transport</Action>
<Sequence>
<Condition>narrow_space</Condition>
<Action>transport_object</Action>
</Sequence>
</Sequence>
</BehaviorTree>"
"Defend a designated target from incoming attacks, while also attacking any nearby enemies.",Use the following behaviors to generate XML Behavior tree based on the user command: defend_target: Subtree node - contains actions to defend the designated target. attack_enemies: Action node - attacks any nearby enemies. incoming_attack: Condition node - checks for any incoming attacks from enemies.,"Defend a designated target from incoming attacks, while also attacking any nearby enemies.","
<BehaviorTree>
<Sequence>
<Action>defend_target</Action>
<Sequence>
<Condition>incoming_attack</Condition>
<Action>attack_enemies</Action>
</Sequence>
</Sequence>
</BehaviorTree>"
Coordinate with other robots to form a search grid and systematically search for a target object.,Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_search: Action node - coordinates with other robots to form a search grid. search_grid: Subtree node - uses move_to_target to search the designated grid area. found_object: Condition node - checks if the target object has been found.,Coordinate with other robots to form a search grid and systematically search for a target object.,"
<BehaviorTree>
<Sequence>
<Action>coordinate_search</Action>
<Sequence>
<Condition>found_object</Condition>
<Action>search_grid</Action>
</Sequence>
</Sequence>
</BehaviorTree>"
Utilize visual recognition to identify and track a designated target.,Use the following behaviors to generate XML Behavior tree based on the user command: identify_target: Subtree node - uses visual recognition algorithms to identify the designated target. track_target: Action node - tracks the movement of the target. designated_target: Condition node - checks if the designated target is still in the field of view.,Utilize visual recognition to identify and track a designated target.,"
<BehaviorTree>
<Sequence>
<Action>identify_target</Action>
<Sequence>
<Condition>designated_target</Condition>
<Action>track_target</Action>
</Sequence>
</Sequence>
</BehaviorTree>"
Work together with other robots to form a coordinated defense against a swarm of incoming enemies.,Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_defense: Action node - coordinates with other robots to form a defensive strategy. defend_against_swarm: Subtree node - contains actions to defend against a swarm of enemies. enemy_approaching: Condition node - checks for any nearby enemies.,Work together with other robots to form a coordinated defense against a swarm of incoming enemies.,"
<BehaviorTree>
<Sequence>
<Action>coordinate_defense</Action>
<Sequence>
<Condition>enemy_approaching</Condition>
<Action>defend_against_swarm</Action>
</Sequence>
</Sequence>
</BehaviorTree>"
Use sensors and mapping algorithms to navigate through a dark and complex environment.,Use the following behaviors to generate XML Behavior tree based on the user command: navigate_dark: Subtree node - uses sensors and mapping algorithms to navigate through a dark environment. handle_obstacles: Condition node - checks for any obstacles in the agent's path. handle_complexity: Condition node - checks for any complex features in the environment.,Use sensors and mapping algorithms to navigate through a dark and complex environment.,"
<BehaviorTree>
<Sequence>
<Action>navigate_dark</Action>
<Sequence>
<Condition>handle_obstacles</Condition>
<Action>handle_complexity</Action>
</Sequence>
</Sequence>
</BehaviorTree>"
Coordinate with other robots to triangulate the location of a target object using different sensor readings.,Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_triangulation: Action node - coordinates with other robots to pool sensor readings. calculate_location: Action node - uses sensor readings to triangulate the location of the target object. designated_target: Condition node - checks if the calculated location is accurate enough to be considered the target's location.,Coordinate with other robots to triangulate the location of a target object using different sensor readings.,"
<BehaviorTree>
<Sequence>
<Action>coordinate_triangulation</Action>
<Sequence>
<Condition>designated_target</Condition>
<Action>calculate_location</Action>
</Sequence>
</Sequence>
</BehaviorTree>"
"Use swarm intelligence to solve a maze, with each robot taking a different path and communicating with each other to find the exit.",Use the following behaviors to generate XML Behavior tree based on the user command: swarm_maze_solver: Subtree node - uses swarm intelligence to solve the maze. communicate_paths: Action node - each robot communicates their path to the others. choose_path: Action node - each robot selects the best path based on the communicated paths. found_exit: Condition node - checks if the exit has been found.,"Use swarm intelligence to solve a maze, with each robot taking a different path and communicating with each other to find the exit.","
<BehaviorTree>
<Sequence>
<Action>swarm_maze_solver</Action>
<Sequence>
<Condition>found_exit</Condition>
<Sequence>
<Action>communicate_paths</Action>
<Action>choose_path</Action>
</Sequence>
</Sequence>
</Sequence>
</BehaviorTree>"
'Gather all nearby objects and return to the starting point.',"Use the following behaviors to generate XML Behavior tree based on the user command:
{gather_objects: 'Action node: Gather all nearby objects into a designated location.
Returns: True if all objects are gathered, False if objects are not gathered.', is_object_nearby: 'Condition node: Check if there are any objects nearby.
Returns: True if objects are nearby, otherwise False.', return_to_start: 'Action node: Return to the starting point from current location.
Returns: True if agent successfully returns to the starting point, otherwise False.'} to construct a behavior tree in XML format to the following command.",Gather all nearby objects and return to the starting point.,"
<BehaviorTree>
<Sequence>
<Selector>
<Sequence>
<Action>gather_objects</Action>
<Condition>is_object_nearby</Condition>
</Sequence>
<Action>return_to_start</Action>
</Selector>
</Sequence>
</BehaviorTree>"
'Perform random movements until a specific task is completed.',"Use the following behaviors to generate XML Behavior tree based on the user command:
{perform_random_movements: 'Action node: Perform a series of random movements.
Returns: True if task is completed, False if task is not completed.', is_task_completed: 'Condition node: Check if the specific task has been completed.
Returns: True if task is completed, otherwise False.'} to construct a behavior tree in XML format to the following command.",Perform random movements until a specific task is completed.,"
<BehaviorTree>
<Sequence>
<Action>perform_random_movements</Action>
<Condition>is_task_completed</Condition>
</Sequence>
</BehaviorTree>"
'Avoid obstacles while reaching a designated goal.',"Use the following behaviors to generate XML Behavior tree based on the user command:
{avoid_obstacles: 'Action node: Use obstacle avoidance algorithms to navigate around obstacles.
Returns: True if agent successfully avoids obstacles, False if agent collides with obstacles.', is_goal_reached: 'Condition node: Check if the designated goal has been reached.
Returns: True if goal is reached, otherwise False.', reach_goal: 'Action node: Move towards the designated goal.
Returns: True if agent successfully reaches goal, False if agent fails to reach goal.'} to construct a behavior tree in XML format to the following command.",Avoid obstacles while reaching a designated goal.,"
<BehaviorTree>
<Sequence>
<Selector>
<Sequence>
<Action>avoid_obstacles</Action>
<Condition>is_goal_reached</Condition>
</Sequence>
<Action>reach_goal</Action>
</Selector>
</Sequence>
</BehaviorTree>"
'Patrol a designated area while avoiding collisions with other agents.',"Use the following behaviors to generate XML Behavior tree based on the user command:
{patrol_area: 'Action node: Patrol a designated area.
Returns: True if patrol is completed successfully, False if agent is unable to complete patrol.', avoid_collisions: 'Action node: Use collision avoidance algorithms to avoid collisions with other agents.
Returns: True if agent successfully avoids collisions, False if agent collides with other agents.'} to construct a behavior tree in XML format to the following command.",Patrol a designated area while avoiding collisions with other agents.,"
<BehaviorTree>
<Sequence>
<Action>patrol_area</Action>
<Selector>
<Sequence>
<Action>avoid_collisions</Action>
<Condition>is_collision_detected</Condition>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
'Search for a specific object and retrieve it.',"Use the following behaviors to generate XML Behavior tree based on the user command:
{search_object: 'Action node: Search the area for a specific object.
Returns: True if object is found, False if object is not found.', retrieve_object: 'Action node: Retrieve the specific object.
Returns: True if object is retrieved, False if object retrieval fails.'} to construct a behavior tree in XML format to the following command.",Search for a specific object and retrieve it.,"
<BehaviorTree>
<Sequence>
<Action>search_object</Action>
<Action>retrieve_object</Action>
</Sequence>
</BehaviorTree>"
'Follow a designated leader while maintaining a specified distance.',"Use the following behaviors to generate XML Behavior tree based on the user command:
{follow_leader: 'Action node: Follow the designated leader.
Returns: True if agent successfully follows the leader, False if agent fails to follow the leader.', maintain_distance: 'Action node: Maintain a specified distance from the leader.
Returns: True if agent maintains distance, False if agent gets too close or too far from the leader.'} to construct a behavior tree in XML format to the following command.",Follow a designated leader while maintaining a specified distance.,"
<BehaviorTree>
<Sequence>
<Action>follow_leader</Action>
<Action>maintain_distance</Action>
</Sequence>
</BehaviorTree>"
'Coordinate actions with neighboring agents to build a structure.',"Use the following behaviors to generate XML Behavior tree based on the user command:
{coordinate_actions: 'Action node: Communicate and coordinate with neighboring agents to build a structure.
Returns: True if structure is successfully built, False if coordination fails.', build_structure: 'Action node: Use designated tools and materials to build the structure.
Returns: True if structure is successfully built, False if building process fails.'} to construct a behavior tree in XML format to the following command.",Coordinate actions with neighboring agents to build a structure.,"
<BehaviorTree>
<Sequence>
<Action>coordinate_actions</Action>
<Action>build_structure</Action>
</Sequence>
</BehaviorTree>"
'Escape from a dangerous situation.',"Use the following behaviors to generate XML Behavior tree based on the user command:
{find_escape_route: 'Action node: Use mapping and path planning algorithms to find an escape route.
Returns: True if escape route is found, False if no escape route is available.', follow_escape_route: 'Action node: Follow the designated escape route.
Returns: True if agent successfully escapes, False if agent fails to follow the escape route.'} to construct a behavior tree in XML format to the following command.",Escape from a dangerous situation.,"
<BehaviorTree>
<Sequence>
<Action>find_escape_route</Action>
<Action>follow_escape_route</Action>
</Sequence>
</BehaviorTree>"
'Monitor energy levels and recharge when necessary.',"Use the following behaviors to generate XML Behavior tree based on the user command:
{check_energy_levels: 'Condition node: Check the energy levels of the agent.
Returns: True if energy levels are below a certain threshold, False if energy levels are above the threshold.', recharge: 'Action node: Return to a designated charging station and recharge.
Returns: True if charging is successful, False if charging fails.'} to construct a behavior tree in XML format to the following command.",Monitor energy levels and recharge when necessary.,"
<BehaviorTree>
<Selector>
<Sequence>
<Condition>check_energy_levels</Condition>
<Action>recharge</Action>
</Sequence>
<Action>continue_patrol</Action>
</Selector>
</BehaviorTree>"
'Collect and transport objects to a specified location.',"Use the following behaviors to generate XML Behavior tree based on the user command:
{collect_objects: 'Action node: Collect objects located in the surrounding area.
Returns: True if all objects are collected, False if collection process fails.', transport_objects: 'Action node: Transport collected objects to a specified location.
Returns: True if all objects are successfully transported, False if transport process fails.'} to construct a behavior tree in XML format to the following command.",Collect and transport objects to a specified location.,"
<BehaviorTree>
<Sequence>
<Action>collect_objects</Action>
<Action>transport_objects</Action>
</Sequence>
</BehaviorTree>"
'Cooperate with other agents to navigate through a maze.',"Use the following behaviors to generate XML Behavior tree based on the user command:
{communicate_with_teammates: 'Action node: Use communication protocols to send and receive information from other agents.
Returns: True if successful communication is established, False if communication fails.', navigate_maze: 'Action node: Use mapping and path planning algorithms to navigate through the maze.
Returns: True if agent successfully reaches the designated end point, False if agent gets lost or stuck.'} to construct a behavior tree in XML format to the following command.",Cooperate with other agents to navigate through a maze.,"
<BehaviorTree>
<Sequence>
<Action>communicate_with_teammates</Action>
<Action>navigate_maze</Action>
</Sequence>
</BehaviorTree>"
'Respond to external stimuli and take appropriate action.',"Use the following behaviors to generate XML Behavior tree based on the user command:
{check_external_stimuli: 'Condition node: Check for any external stimuli, such as sound or light.
Returns: True if stimuli is detected, False if no stimuli is present.', respond_to_stimuli: 'Action node: Take appropriate action based on the type of stimuli detected.
Returns: True if agent successfully responds, False if response fails.'} to construct a behavior tree in XML format to the following command.",Respond to external stimuli and take appropriate action.,"
<BehaviorTree>
<Sequence>
<Condition>check_external_stimuli</Condition>
<Action>respond_to_stimuli</Action>
</Sequence>
</BehaviorTree>"
'Divide and conquer a large task with multiple agents.',"Use the following behaviors to generate XML Behavior tree based on the user command:
{divide_task: 'Action node: Divide a large task into smaller sub-tasks.
Returns: True if task is successfully divided, False if division process fails.', delegate_sub_tasks: 'Action node: Assign each sub-task to a different agent and coordinate their efforts.
Returns: True if all sub-tasks are completed, False if any sub-task fails.'} to construct a behavior tree in XML format to the following command.",Divide and conquer a large task with multiple agents.,"
<BehaviorTree>
<Sequence>
<Action>divide_task</Action>
<Action>delegate_sub_tasks</Action>
</Sequence>
</BehaviorTree>"
'Perform designated tasks based on priority level.',"Use the following behaviors to generate XML Behavior tree based on the user command:
{check_priority_level: 'Condition node: Check the priority level of the designated task.
Returns: True if priority level is high, False if priority level is low.', perform_high_priority: 'Action node: Perform the designated task with high priority level.
Returns: True if task is completed, False if task fails.', perform_low_priority: 'Action node: Perform the designated task with low priority level.
Returns: True if task is completed, False if task fails.'} to construct a behavior tree in XML format to the following command.",Perform designated tasks based on priority level.,"
<BehaviorTree>
<Selector>
<Sequence>
<Condition>check_priority_level</Condition>
<Action>perform_high_priority</Action>
</Sequence>
<Action>perform_low_priority</Action>
</Selector>
</BehaviorTree>"
'Respond to power outages and continue operations.',"Use the following behaviors to generate XML Behavior tree based on the user command:
{check_power_status: 'Condition node: Check the power status.
Returns: True if power is still available, False if power outage is detected.', continue_operations: 'Action node: Continue operations using alternative power sources.
Returns: True if operations can be continued, False if operations are halted.'} to construct a behavior tree in XML format to the following command.",Respond to power outages and continue operations.,"
<BehaviorTree>
<Sequence>
<Condition>check_power_status</Condition>
<Action>continue_operations</Action>
</Sequence>
</BehaviorTree>"
'Stick together as a group while exploring an unknown environment.',"Use the following behaviors to generate XML Behavior tree based on the user command:
{follow_designated_leader: 'Action node: Follow the designated leader at all times.
Returns: True if agent successfully follows the leader, False if agent fails to follow the leader.', explore_unknown_area: 'Action node: Use mapping and exploration algorithms to explore the unknown environment.
Returns: True if agent successfully explores the designated area, False if exploration fails.'} to construct a behavior tree in XML format to the following command.",Stick together as a group while exploring an unknown environment.,"
<BehaviorTree>
<Sequence>
<Action>follow_designated_leader</Action>
<Action>explore_unknown_area</Action>
</Sequence>
</BehaviorTree>"
'Load and unload cargo from a designated location.',"Use the following behaviors to generate XML Behavior tree based on the user command:
{load_cargo: 'Action node: Load cargo from a designated area.
Returns: True if all cargo is successfully loaded, False if loading process fails.', deliver_to_destination: 'Action node: Move to the designated destination and unload cargo.
Returns: True if all cargo is successfully delivered, False if delivery process fails.'} to construct a behavior tree in XML format to the following command.",Load and unload cargo from a designated location.,"
<BehaviorTree>
<Sequence>
<Action>load_cargo</Action>
<Action>deliver_to_destination</Action>
</Sequence>
</BehaviorTree>"
"Navigate to the specified coordinate, avoiding obstacles along the way.",Use the following behaviors to generate XML Behavior tree based on the user command: goto_coordinate: Action node (same as before). avoid_obstacles: Subtree node - Uses a combination of actions and conditions to steer the agent away from obstacles. check_obstacle: Condition node - Checks if the agent is currently facing an obstacle.,"Navigate to the specified coordinate, avoiding obstacles along the way.","
<BehaviorTree>
<Sequence>
<Action>goto_coordinate</Action>
<Sequence>
<Condition>check_obstacle</Condition>
<Action>avoid_obstacles</Action>
</Sequence>
</Sequence>
</BehaviorTree>"
Collect all the objects within a designated area and bring them to a specific location.,Use the following behaviors to generate XML Behavior tree based on the user command: collect_objects: Action node - Instructs the agent to pick up an object at its current location. navigate_to_location: Action node - Instructs the agent to move to a specific location. check_area: Condition node - Checks if the agent is within the designated area. empty_inventory: Action node - Empties the agent's inventory once it has reached the designated location.,Collect all the objects within a designated area and bring them to a specific location.,"
<BehaviorTree>
<Sequence>
<Sequence>
<Condition>check_area</Condition>
<Sequence>
<Action>collect_objects</Action>
<Action>navigate_to_location</Action>
</Sequence>
<Action>empty_inventory</Action>
</Sequence>
</BehaviorTree>"
"If robots are in close proximity, group up and move together towards a common destination.",Use the following behaviors to generate XML Behavior tree based on the user command: group_up: Subtree node - Uses a combination of actions and conditions to bring the agents together. check_proximity: Condition node - Checks if the agents are within a certain distance from each other. move_together: Action node - Instructs the agents to move towards a specified destination together.,"If robots are in close proximity, group up and move together towards a common destination.","
<BehaviorTree>
<Sequence>
<Sequence>
<Condition>check_proximity</Condition>
<Sequence>
<Action>group_up</Action>
<Action>move_together</Action>
</Sequence>
</Sequence>
</BehaviorTree>"
Search for a specific object in the environment and return to the starting point once found.,Use the following behaviors to generate XML Behavior tree based on the user command: search_for_object: Action node - Instructs the agent to scan the environment for a specific object. get_starting_point: Function node - Retrieves the starting point of the agent in the environment. return_to_start: Action node - Instructs the agent to move back to the retrieved starting point.,Search for a specific object in the environment and return to the starting point once found.,"
<BehaviorTree>
<Sequence>
<Action>search_for_object</Action>
<Action>return_to_start</Action>
</Sequence>
</BehaviorTree>"
"Follow a designated leader robot, staying within a certain distance from it.",Use the following behaviors to generate XML Behavior tree based on the user command: follow_leader: Action node - Instructs the agent to follow another designated agent. keep_distance: Subtree node - Uses a combination of actions and conditions to maintain a set distance from the leader robot. check_leader_distance: Condition node - Checks the distance between the agent and the leader robot.,"Follow a designated leader robot, staying within a certain distance from it.","
<BehaviorTree>
<Sequence>
<Action>follow_leader</Action>
<Sequence>
<Condition>check_leader_distance</Condition>
<Action>keep_distance</Action>
</Sequence>
</Sequence>
</BehaviorTree>"
Swarm the area and communicate any identified obstacles to each other.,Use the following behaviors to generate XML Behavior tree based on the user command: swarm_area: Action node - Instructs the agent to move around the designated area. communicate_obstacles: Action node - Instructs the agents to share information about any obstacles they encounter with each other. identify_obstacles: Subtree node - Uses a combination of actions and conditions to identify any obstacles in the environment.,Swarm the area and communicate any identified obstacles to each other.,"
<BehaviorTree>
<Sequence>
<Selector>
<Action>swarm_area</Action>
<Action>communicate_obstacles</Action>
</Selector>
<Action>identify_obstacles</Action>
</Sequence>
</BehaviorTree>"
Divide into two teams and compete in a capture the flag game.,Use the following behaviors to generate XML Behavior tree based on the user command: divide_into_teams: Subtree node - Uses a combination of actions and conditions to divide the agents into two teams. compete: Subtree node - Uses actions and conditions to execute the capture the flag game rules. check_flag_location: Condition node - Checks the current location of the flag.,Divide into two teams and compete in a capture the flag game.,"
<BehaviorTree>
<Sequence>
<Action>divide_into_teams</Action>
<Action>compete</Action>
<Sequence>
<Condition>check_flag_location</Condition>
<Action>compete</Action>
</Sequence>
</Sequence>
</BehaviorTree>"
"Form a circle formation and rotate while facing outwards, scanning for any incoming threats.",Use the following behaviors to generate XML Behavior tree based on the user command: form_circle: Action node - Instructs the agents to move to specific positions in a circular formation. rotate: Action node - Instructs the agents to rotate together in a circular motion. scan_for_threats: Action node - Instructs the agents to scan the environment for any potential threats.,"Form a circle formation and rotate while facing outwards, scanning for any incoming threats.","
<BehaviorTree>
<Sequence>
<Action>form_circle</Action>
<Sequence>
<Action>rotate</Action>
<Action>scan_for_threats</Action>
</Sequence>
</Sequence>
</BehaviorTree>"
Move to a designated location and perform a synchronized dance routine.,Use the following behaviors to generate XML Behavior tree based on the user command: move_to_location: Action node - Instructs the agents to move to the designated location. synchronize_dance: Subtree node - Uses a combination of actions and conditions to coordinate a dance routine. check_if_dancing: Condition node - Checks if the agents are currently performing the dance routine.,Move to a designated location and perform a synchronized dance routine.,"
<BehaviorTree>
<Sequence>
<Action>move_to_location</Action>
<Sequence>
<Condition>check_if_dancing</Condition>
<Action>synchronize_dance</Action>
</Sequence>
</Sequence>
</BehaviorTree>"
Distribute resources evenly among the swarm robots.,Use the following behaviors to generate XML Behavior tree based on the user command: distribute_resources: Subtree node - Uses a combination of actions and conditions to evenly distribute resources among the agents. check_resource_levels: Condition node - Checks the current resource levels of the agents. request_resource: Action node - Instructs the agents to request additional resources if needed.,Distribute resources evenly among the swarm robots.,"
<BehaviorTree>
<Sequence>
<Sequence>
<Condition>check_resource_levels</Condition>
<Sequence>
<Action>distribute_resources</Action>
<Action>request_resource</Action>
</Sequence>
</Sequence>
</BehaviorTree>"
Work together to build a structure using available materials in the environment.,Use the following behaviors to generate XML Behavior tree based on the user command: gather_materials: Action node - Instructs the agents to collect materials from the environment. coordinate_building: Subtree node - Uses a combination of actions and conditions to coordinate the building process. check_if_building: Condition node - Checks if the agents are currently working on building the structure.,Work together to build a structure using available materials in the environment.,"
<BehaviorTree>
<Sequence>
<Action>gather_materials</Action>
<Sequence>
<Condition>check_if_building</Condition>
<Action>coordinate_building</Action>
</Sequence>
</BehaviorTree>"
Use communication and swarm intelligence to collectively solve a puzzle.,Use the following behaviors to generate XML Behavior tree based on the user command: communicate: Subtree node - Uses actions and conditions to facilitate communication among the agents. swarm_intelligence: Subtree node - Utilizes the collective intelligence of the swarm to solve the puzzle. check_puzzle_solved: Condition node - Checks if the puzzle has been successfully solved.,"Use communication and swarm intelligence to collectively solve a puzzle.
14.","
<BehaviorTree>
<Selector>
<Sequence>
<Action>communicate</Action>
<Action>swarm_intelligence</Action>
</Sequence>
<Condition>check_puzzle_solved</Condition>
</Selector>
</BehaviorTree>"
Follow a designated path while avoiding red traffic lights and stopping at green traffic lights.,Use the following behaviors to generate XML Behavior tree based on the user command: follow_path: Subtree node - Uses actions and conditions to guide the agents along a designated path. check_red_light: Condition node - Checks if the agent is currently facing a red traffic light. stay_at_green: Action node - Instructs the agent to remain stationary until the traffic light turns green.,Follow a designated path while avoiding red traffic lights and stopping at green traffic lights.,"
<BehaviorTree>
<Sequence>
<Action>follow_path</Action>
<Sequence>
<Condition>check_red_light</Condition>
<Action>stay_at_green</Action>
</Sequence>
</Sequence>
</BehaviorTree>"
Respond to a distress signal and provide assistance.,Use the following behaviors to generate XML Behavior tree based on the user command: receive_distress_signal: Action node - Instructs the agent to listen for a distress signal. navigate_to_distress: Action node - Instructs the agent to move to the location of the distress signal. provide_assistance: Action node - Instructs the agent to provide the necessary assistance at the location.,Respond to a distress signal and provide assistance.,"
<BehaviorTree>
<Sequence>
<Action>receive_distress_signal</Action>
<Action>navigate_to_distress</Action>
<Action>provide_assistance</Action>
</Sequence>
</BehaviorTree>"
Conduct a coordinated search and rescue mission.,Use the following behaviors to generate XML Behavior tree based on the user command: search_area: Subtree node - Uses actions and conditions to systematically search the designated area. communicate_status: Action node - Instructs the agents to share their search status with each other. perform_rescue: Action node - Instructs the agent to rescue any individuals that are found during the search.,Conduct a coordinated search and rescue mission.,"
<BehaviorTree>
<Sequence>
<Action>search_area</Action>
<Selector>
<Action>communicate_status</Action>
<Action>perform_rescue</Action>
</Selector>
</Sequence>
</BehaviorTree>"
Work together to push a large obstacle out of the way.,Use the following behaviors to generate XML Behavior tree based on the user command: approach_obstacle: Action node - Instructs the agents to move towards the obstacle. coordinate_push: Subtree node - Uses actions and conditions to coordinate the pushing process. check_if_moving: Condition node - Checks if the agents are currently pushing the obstacle.,Work together to push a large obstacle out of the way.,"
<BehaviorTree>
<Sequence>
<Action>approach_obstacle</Action>
<Sequence>
<Condition>check_if_moving</Condition>
<Action>coordinate_push</Action>
</Sequence>
</Sequence>
</BehaviorTree>"
Syncronize movement to spell out a word or phrase.,Use the following behaviors to generate XML Behavior tree based on the user command: move_to_location: Action node - Instructs the agents to move to specific locations to form the desired word or phrase. synchronize: Subtree node - Uses actions and conditions to coordinate the movements of the agents. check_if_spelling: Condition node - Checks if the agents are currently spelling out the desired word or phrase.,Syncronize movement to spell out a word or phrase.,"
<BehaviorTree>
<Sequence>
<Sequence>
<Condition>check_if_spelling</Condition>
<Selector>
<Action>move_to_location</Action>
<Action>synchronize</Action>
</Selector>
</Sequence>
</Sequence>
</BehaviorTree>"
Use swarm strategies to efficiently collect and store resources.,Use the following behaviors to generate XML Behavior tree based on the user command: swarm_collection: Subtree node - Uses a combination of actions and conditions to coordinate the collection of resources. store_resources: Action node - Instructs the agent to bring the collected resources to a designated storage location. check_storage_capacity: Condition node - Checks if the designated storage location has enough capacity for additional resources.,Use swarm strategies to efficiently collect and store resources.,"
<BehaviorTree>
<Sequence>
<Sequence>
<Condition>check_storage_capacity</Condition>
<Selector>
<Action>swarm_collection</Action>
<Action>store_resources</Action>
</Selector>
</Sequence>
</Sequence>
</BehaviorTree>"
Collect resources from multiple locations and bring them back to base.,Use the following behaviors to generate XML Behavior tree based on the user command: collect_resources: Subtree node - Represents a behavior tree for collecting resources from multiple locations. bring_to_base: Action node - Makes the agent bring collected resources back to base. is_resource_full: Condition node - Checks if the agent's resource inventory is full.,Collect resources from multiple locations and bring them back to base.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>collect_resources</Action>
<Selector>
<Sequence>
<Condition>is_resource_full</Condition>
<Action>bring_to_base</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
Explore the environment and avoid obstacles.,Use the following behaviors to generate XML Behavior tree based on the user command: explore: Action node - Makes the agent explore the environment. avoid_obstacles: Subtree node - Represents a behavior tree for avoiding obstacles. is_obstacle_detected: Condition node - Checks if the agent has detected an obstacle.,Explore the environment and avoid obstacles.,"
<BehaviorTree>
<Sequence>
<Action>explore</Action>
<Selector>
<Sequence>
<Condition>is_obstacle_detected</Condition>
<Action>avoid_obstacles</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
Form a defensive line with other robots to protect a target location.,Use the following behaviors to generate XML Behavior tree based on the user command: form_defensive_line: Subtree node - Represents a behavior tree for forming a defensive line. protect_target: Action node - Makes the agent protect the designated target location. is_target_under_attack: Condition node - Checks if the target location is under attack.,Form a defensive line with other robots to protect a target location.,"
<BehaviorTree>
<Sequence>
<Action>form_defensive_line</Action>
<Action>protect_target</Action>
<Condition>is_target_under_attack</Condition>
</Sequence>
</BehaviorTree>"
"Gather and collect resources in a designated area, deposit them at a storage location, and then return to continue gathering.",Use the following behaviors to generate XML Behavior tree based on the user command: gather_resources: Action node - Makes the agent gather resources in a designated area. deposit_resources: Action node - Makes the agent deposit resources at a storage location. return_to_gathering: Subtree node - Represents a behavior tree for returning to gather resources. is_resource_empty: Condition node - Checks if the agent's resource inventory is empty.,"Gather and collect resources in a designated area, deposit them at a storage location, and then return to continue gathering.","
<BehaviorTree>
<Sequence>
<Action>gather_resources</Action>
<Sequence>
<Selector>
<Condition>is_resource_empty</Condition>
<Action>return_to_gathering</Action>
</Selector>
<Action>deposit_resources</Action>
</Sequence>
</Sequence>
</BehaviorTree>"
Work together with other robots to move a heavy object.,Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_movement: Subtree node - Represents a behavior tree for coordinating movement with other robots. move_object: Action node - Makes the agent move the designated heavy object. is_object_moving: Condition node - Checks if the object is currently being moved.,Work together with other robots to move a heavy object.,"
<BehaviorTree>
<Sequence>
<Action>coordinate_movement</Action>
<Selector>
<Sequence>
<Condition>is_object_moving</Condition>
<Action>move_object</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
Divide and conquer - split up into smaller groups and complete multiple tasks simultaneously.,Use the following behaviors to generate XML Behavior tree based on the user command: divide_and_conquer: Subtree node - Represents a behavior tree for dividing and conquering. complete_task: Action node - Makes the agent complete a designated task. is_task_completed: Condition node - Checks if the task has been completed.,Divide and conquer - split up into smaller groups and complete multiple tasks simultaneously.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>divide_and_conquer</Action>
<Selector>
<Sequence>
<Condition>is_task_completed</Condition>
<Action>complete_task</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
Follow a designated leader while keeping a set distance between robots.,Use the following behaviors to generate XML Behavior tree based on the user command: follow_leader: Action node - Makes the agent follow a designated leader. keep_distance: Action node - Makes the agent maintain a set distance between robots. is_leader_moving: Condition node - Checks if the leader is currently moving.,Follow a designated leader while keeping a set distance between robots.,"
<BehaviorTree>
<Sequence>
<Action>follow_leader</Action>
<Selector>
<Sequence>
<Condition>is_leader_moving</Condition>
<Action>keep_distance</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
Search and rescue - navigate through a maze and find and carry a target to a designated location.,Use the following behaviors to generate XML Behavior tree based on the user command: rescue: Subtree node - Represents a behavior tree for searching and rescuing. carry_target: Action node - Makes the agent carry the designated target. navigate_maze: Action node - Makes the agent navigate through a maze. is_target_found: Condition node - Checks if the target has been found.,Search and rescue - navigate through a maze and find and carry a target to a designated location.,"
<BehaviorTree>
<Sequence>
<Action>rescue</Action>
<Sequence>
<Selector>
<Condition>is_target_found</Condition>
<Action>carry_target</Action>
</Selector>
<Action>navigate_maze</Action>
</Sequence>
</Sequence>
</BehaviorTree>"
Assemble and build a structure using pre-defined modules.,Use the following behaviors to generate XML Behavior tree based on the user command: assemble_structure: Subtree node - Represents a behavior tree for assembling and building a structure. construct_module: Action node - Makes the agent construct a pre-defined module. is_module_built: Condition node - Checks if the module has been successfully built.,Assemble and build a structure using pre-defined modules.,"
<BehaviorTree>
<Sequence>
<Action>assemble_structure</Action>
<Selector>
<Sequence>
<Condition>is_module_built</Condition>
<Action>construct_module</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
Defend against multiple simultaneous attacks from different directions.,Use the following behaviors to generate XML Behavior tree based on the user command: defend: Subtree node - Represents a behavior tree for defending against multiple simultaneous attacks. orientate_and_attack: Action node - Makes the agent orientate and attack enemies in a specific direction. is_attack_detected: Condition node - Checks if an attack has been detected.,Defend against multiple simultaneous attacks from different directions.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>defend</Action>
<Selector>
<Sequence>
<Condition>is_attack_detected</Condition>
<Action>orientate_and_attack</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
Collaboratively map out and explore a new environment.,Use the following behaviors to generate XML Behavior tree based on the user command: map_exploration: Subtree node - Represents a behavior tree for mapping and exploring a new environment. explore_area: Action node - Makes the agent explore a specific area. is_map_complete: Condition node - Checks if the map has been fully explored.,Collaboratively map out and explore a new environment.,"
<BehaviorTree>
<Sequence>
<Action>map_exploration</Action>
<Selector>
<Sequence>
<Condition>is_map_complete</Condition>
<Action>explore_area</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
Coordinate movements to quickly transport an injured robot back to base for repairs.,Use the following behaviors to generate XML Behavior tree based on the user command: transport_injured_robot: Subtree node - Represents a behavior tree for coordinating movements to transport an injured robot back to base. repair_robot: Action node - Makes the agent repair the injured robot upon reaching the base. is_injured: Condition node - Checks if the injured robot is in need of transport.,Coordinate movements to quickly transport an injured robot back to base for repairs.,"
<BehaviorTree>
<Sequence>
<Action>transport_injured_robot</Action>
<Selector>
<Sequence>
<Condition>is_injured</Condition>
<Action>repair_robot</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
Use swarm intelligence to find and retrieve a buried object.,Use the following behaviors to generate XML Behavior tree based on the user command: retrieve_object: Subtree node - Represents a behavior tree for finding and retrieving a buried object using swarm intelligence. dig_and_uncover: Action node - Makes the agent dig and uncover the buried object. is_object_found: Condition node - Checks if the object has been successfully found.,Use swarm intelligence to find and retrieve a buried object.,"
<BehaviorTree>
<Sequence>
<Action>retrieve_object</Action>
<Selector>
<Sequence>
<Condition>is_object_found</Condition>
<Action>dig_and_uncover</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
Cooperatively build a structure while avoiding collisions and maintaining a steady pace.,Use the following behaviors to generate XML Behavior tree based on the user command: build_structure: Subtree node - Represents a behavior tree for cooperatively building a structure while avoiding collisions and maintaining a steady pace. construct_module: Action node - Makes the agent construct a designated module. avoid_collisions: Action node - Makes the agent avoid collisions with other robots. maintain_pace: Action node - Makes the agent maintain a steady pace. is_module_built: Condition node - Checks if the module has been successfully built.,Cooperatively build a structure while avoiding collisions and maintaining a steady pace.,"
<BehaviorTree>
<Sequence>
<Action>build_structure</Action>
<Selector>
<Sequence>
<Condition>is_module_built</Condition>
<Action>construct_module</Action>
</Sequence>
<Sequence>
<Action>avoid_collisions</Action>
<Action>maintain_pace</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
Use swarm communication to navigate through a maze and reach a designated exit.,Use the following behaviors to generate XML Behavior tree based on the user command: navigate_maze: Subtree node - Represents a behavior tree for using swarm communication to navigate through a maze and reach a designated exit. communicate: Action node - Makes the agent communicate with other robots to determine the best path. navigate_exit: Action node - Makes the agent navigate towards the designated exit. is_exit_reached: Condition node - Checks if the designated exit has been reached.,Use swarm communication to navigate through a maze and reach a designated exit.,"
<BehaviorTree>
<Sequence>
<Action>navigate_maze</Action>
<Selector>
<Sequence>
<Condition>is_exit_reached</Condition>
<Action>navigate_exit</Action>
</Sequence>
<Sequence>
<Action>communicate</Action>
<Action>navigate_exit</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
Use swarm coordination to lift and transport a heavy object to a designated location.,Use the following behaviors to generate XML Behavior tree based on the user command: transport_object: Subtree node - Represents a behavior tree for using swarm coordination to lift and transport a heavy object to a designated location. lift_object: Action node - Makes the agent lift the designated heavy object. is_object_lifted: Condition node - Checks if the object has been successfully lifted.,Use swarm coordination to lift and transport a heavy object to a designated location.,"
<BehaviorTree>
<Sequence>
<Action>transport_object</Action>
<Selector>
<Sequence>
<Condition>is_object_lifted</Condition>
<Action>lift_object</Action>
</Sequence>
<Sequence>
<Action>transport_object</Action>
<Action>lift_object</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
Utilize swarm intelligence to search for and repair a damaged area.,Use the following behaviors to generate XML Behavior tree based on the user command: repair_damaged_area: Subtree node - Represents a behavior tree for utilizing swarm intelligence to search for and repair a damaged area. search_area: Action node - Makes the agent search a designated area for signs of damage. repair_damage: Action node - Makes the agent repair any identified damage. is_area_repaired: Condition node - Checks if the designated area has been successfully repaired.,Utilize swarm intelligence to search for and repair a damaged area.,"
<BehaviorTree>
<Sequence>
<Action>repair_damaged_area</Action>
<Selector>
<Sequence>
<Condition>is_area_repaired</Condition>
<Action>repair_damage</Action>
</Sequence>
<Sequence>
<Action>search_area</Action>
<Action>repair_damage</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
Use swarm coordination to push a large object off a designated platform.,Use the following behaviors to generate XML Behavior tree based on the user command: push_object: Subtree node - Represents a behavior tree for using swarm coordination to push a large object off a designated platform. move_closer: Action node - Makes the agent move closer to the designated platform. is_object_on_platform: Condition node - Checks if the large object is on the designated platform.,Use swarm coordination to push a large object off a designated platform.,"
<BehaviorTree>
<Sequence>
<Action>push_object</Action>
<Selector>
<Sequence>
<Condition>is_object_on_platform</Condition>
<Action>move_c"
Avoid other swarm robots while completing the assigned task.,Use the following behaviors to generate XML Behavior tree based on the user command: avoid_other_robots: Condition node - Checks if other robots are within a specified distance. move_away: Action node - Moves the agent away from other robots. complete_task: Action node - Performs the assigned task.,Avoid other swarm robots while completing the assigned task.,"
<BehaviorTree>
<Sequence>
<Condition>avoid_other_robots</Condition>
<Action>move_away</Action>
</Sequence>
<Action>complete_task</Action>
</Sequence>"
"Follow the leader swarm robot, but stop if the leader stops for more than 5 seconds.",Use the following behaviors to generate XML Behavior tree based on the user command: follow_leader: Action node - Makes the agent follow another robot. leader_stopped: Condition node - Checks if the leader has stopped moving. stop: Action node - Stops the agent's movement. wait: Action node - Waits for a specified amount of time. restart_movement: Action node - Restarts the agent's movement after waiting.,"Follow the leader swarm robot, but stop if the leader stops for more than 5 seconds.","
<BehaviorTree>
<Selector>
<Sequence>
<Action>follow_leader</Action>
<Condition>leader_stopped</Condition>
<Action>stop</Action>
<Action>wait(5 seconds)</Action>
</Sequence>
<Action>restart_movement</Action>
</Selector>
</BehaviorTree>"
Guard a certain area and attack any intruders that approach.,Use the following behaviors to generate XML Behavior tree based on the user command: guard_area: Action node - Makes the agent stay in a specific area. detect_intruders: Condition node - Checks if any intruders are within the guarded area. attack_intruder: Subtree node - Represents a behavior tree for attacking an intruder.,Guard a certain area and attack any intruders that approach.,"
<BehaviorTree>
<Sequence>
<Action>guard_area</Action>
<Selector>
<Condition>detect_intruders</Condition>
<Action>attack_intruder</Action>
</Selector>
</Sequence>
</BehaviorTree>"
Coordinate with other robots to form a wall and prevent objects from passing through.,Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_with_others: Action node - Makes the agent coordinate with other robots. form_wall: Action node - Positions the agent to form a wall with other robots. prevent_passing: Condition node - Checks if any objects are trying to pass through the wall. block_object: Subtree node - Represents a behavior tree for blocking objects.,Coordinate with other robots to form a wall and prevent objects from passing through.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>coordinate_with_others</Action>
<Action>form_wall</Action>
<Condition>prevent_passing</Condition>
<Action>block_object</Action>
</Sequence>
</Selector>
</BehaviorTree>"
Search a designated area for a specific object and retrieve it.,Use the following behaviors to generate XML Behavior tree based on the user command: search_area: Action node - Makes the agent search the designated area. detect_object: Condition node - Checks if the specific object has been found. retrieve_object: Action node - Retrieves the object.,Search a designated area for a specific object and retrieve it.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>search_area</Action>
<Condition>detect_object</Condition>
<Action>retrieve_object</Action>
</Sequence>
</Selector>
</BehaviorTree>"
Follow the swarm behavior and protect the queen.,Use the following behaviors to generate XML Behavior tree based on the user command: follow_swarm: Action node - Makes the agent follow swarm behavior. protect_queen: Action node - Positions the agent to protect the queen.,Follow the swarm behavior and protect the queen.,"
<BehaviorTree>
<Action>follow_swarm</Action>
<Action>protect_queen</Action>
</BehaviorTree>"
Perform a coordinated dance routine with other robots.,Use the following behaviors to generate XML Behavior tree based on the user command: synchronized_movement: Condition node - Checks if other robots are in sync for the dance routine. perform_dance: Action node - Performs the designated dance routine.,Perform a coordinated dance routine with other robots.,"
<BehaviorTree>
<Sequence>
<Condition>synchronized_movement</Condition>
<Action>perform_dance</Action>
</Sequence>
</BehaviorTree>"
Detect and extinguish fires in a designated area.,Use the following behaviors to generate XML Behavior tree based on the user command: detect_fire: Condition node - Checks if any fires are present in the designated area. extinguish_fire: Action node - Extinguishes the fire.,Detect and extinguish fires in a designated area.,"
<BehaviorTree>
<Selector>
<Condition>detect_fire</Condition>
<Action>extinguish_fire</Action>
</Selector>
</BehaviorTree>"
Repair and maintain a designated area.,Use the following behaviors to generate XML Behavior tree based on the user command: maintain_area: Action node - Makes the agent maintain the designated area. check_repairs: Condition node - Checks if any repairs are needed in the area. perform_repair: Action node - Performs any necessary repairs in the area.,Repair and maintain a designated area.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>maintain_area</Action>
<Condition>check_repairs</Condition>
<Action>perform_repair</Action>
</Sequence>
</Selector>
</BehaviorTree>"
Collaborate with other robots to build a designated structure.,Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_with_others: Action node - Makes the agent collaborate with other robots. build_structure: Action node - Positions the agent to build the designated structure.,Collaborate with other robots to build a designated structure.,"
<BehaviorTree>
<Action>coordinate_with_others</Action>
<Action>build_structure</Action>
</BehaviorTree>"
Collect and transport resources to a designated location.,Use the following behaviors to generate XML Behavior tree based on the user command: collect_resources: Action node - Makes the agent collect resources. transport_resources: Action node - Positions the agent to transport resources to a designated location.,Collect and transport resources to a designated location.,"
<BehaviorTree>
<Action>collect_resources</Action>
<Action>transport_resources</Action>
</BehaviorTree>"
Follow the designated path and detect any deviations from it.,Use the following behaviors to generate XML Behavior tree based on the user command: follow_path: Action node - Makes the agent follow the designated path. detect_deviations: Condition node - Checks if the agent has deviated from the path. correct_path: Action node - Corrects the agent's course to follow the designated path again.,Follow the designated path and detect any deviations from it.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>follow_path</Action>
<Condition>detect_deviations</Condition>
<Action>correct_path</Action>
</Sequence>
</Selector>
</BehaviorTree>"
Scan the designated area for any suspicious objects and dispose of them.,Use the following behaviors to generate XML Behavior tree based on the user command: scan_area: Action node - Makes the agent scan the designated area. detect_suspicious: Condition node - Checks if any suspicious objects are present. dispose_object: Action node - Disposes of the object.,Scan the designated area for any suspicious objects and dispose of them.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>scan_area</Action>
<Condition>detect_suspicious</Condition>
<Action>dispose_object</Action>
</Sequence>
</Selector>
</BehaviorTree>"
Coordinate with other robots to gather information and analyze it.,Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_with_others: Action node - Makes the agent coordinate with other robots. gather_information: Action node - Gathers information from the surroundings. analyze_data: Action node - Analyzes the gathered information.,Coordinate with other robots to gather information and analyze it.,"
<BehaviorTree>
<Selector>
<Action>coordinate_with_others</Action>
<Sequence>
<Action>gather_information</Action>
<Action>analyze_data</Action>
</Sequence>
</Selector>
</BehaviorTree>"
Detect any suspicious behavior from other robots and report it to a designated location.,Use the following behaviors to generate XML Behavior tree based on the user command: detect_suspicious_behavior: Condition node - Checks for any suspicious behavior from other robots. report_location: Action node - Reports the location of the suspicious behavior to a designated location.,Detect any suspicious behavior from other robots and report it to a designated location.,"
<BehaviorTree>
<Selector>
<Condition>detect_suspicious_behavior</Condition>
<Action>report_location</Action>
</Selector>
</BehaviorTree>"
Protect a designated object from any harm.,Use the following behaviors to generate XML Behavior tree based on the user command: protect_object: Action node - Makes the agent protect the designated object. detect_harm: Condition node - Checks for any potential harm to the object. prevent_damage: Action node - Performs actions to prevent harm to the object.,Protect a designated object from any harm.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>protect_object</Action>
<Condition>detect_harm</Condition>
<Action>prevent_damage</Action>
</Sequence>
</Selector>
</BehaviorTree>"
Work together with other robots to move a heavy object to a designated location.,Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_with_others: Action node - Makes the agent coordinate with other robots. move_object: Action node - Moves the heavy object. designate_location: Action node - Positions the agent to take the object to the designated location.,Work together with other robots to move a heavy object to a designated location.,"
<BehaviorTree>
<Action>coordinate_with_others</Action>
<Sequence>
<Action>move_object</Action>
<Action>designate_location</Action>
</Sequence>
</BehaviorTree>"
Collect data from designated locations and transmit it to a central hub.,Use the following behaviors to generate XML Behavior tree based on the user command: collect_data: Action node - Makes the agent collect data from designated locations. transmit_data: Action node - Sends the collected data to a central hub.,Collect data from designated locations and transmit it to a central hub.,"
<BehaviorTree>
<Action>collect_data</Action>
<Action>transmit_data</Action>
</BehaviorTree>
</BehaviorTree>"
Evacuate area in case of emergency.,"Use the following behaviors to generate XML Behavior tree based on the user command: {'verify_emergency': 'Condition node: Check if there is an emergency situation in the current area.
Returns: True if there is an emergency, False otherwise.', 'send_signal_for_evacuation': 'Action node: Send a signal to all robots in the area to evacuate.
Returns: True if the signal was successfully sent, False otherwise.', 'move_to_safe_location': 'Action node: Move to a safe location away from the emergency.
Returns: True if the robot successfully moved to a safe location, False otherwise.', 'wait_for_all_clear': 'Action node: Wait for a signal from other robots that the area is safe to return.
Returns: True once the area is deemed safe by other robots.'}",Evacuate the area due to a gas leak,"
<BehaviorTree>
<Sequence>
<Condition>verify_emergency</Condition>
<Action>send_signal_for_evacuation</Action>
<Action>move_to_safe_location</Action>
<Action>wait_for_all_clear</Action>
</Sequence>
</BehaviorTree>"
Utilize swarm strategy to forage for resources.,"Use the following behaviors to generate XML Behavior tree based on the user command: {'locate_resource_patch': 'Action node: Use sensors to locate a patch of resources.
Returns: True if a resource patch is found, False otherwise.', 'communicate_located_patch': 'Action node: Communicate the location of the resource patch to other robots in the swarm.
Returns: True if the location was successfully communicated, False otherwise.', 'gather_resources': 'Action node: Gather resources from the patch.
Returns: True once the resource gathering is complete.', 'return_to_base': 'Action node: Return the gathered resources to the base.
Returns: True once the resources have been returned.'}",Locate and gather resources using swarm strategy.,"
<BehaviorTree>
<Sequence>
<Action>locate_resource_patch</Action>
<Action>communicate_located_patch</Action>
<Selector>
<Sequence>
<Condition>resource_patch_found</Condition>
<Action>gather_resources</Action>
</Sequence>
<Action>return_to_base</Action>
</Selector>
</Sequence>
</BehaviorTree>"
Utilize coordinated movement to navigate an obstacle course.,"Use the following behaviors to generate XML Behavior tree based on the user command: {'move_forward': 'Action node: Move the robot forward.
Returns: True if the robot successfully moved forward, False otherwise.', 'turn_left': 'Action node: Turn the robot left.
Returns: True if the robot successfully turned left, False otherwise.', 'turn_right': 'Action node: Turn the robot right.
Returns: True if the robot successfully turned right, False otherwise.', 'detect_obstacle': 'Condition node: Check if there is an obstacle in front of the robot.
Returns: True if an obstacle is detected, False otherwise.'}",Navigate an obstacle course using coordinated movement.,"
<BehaviorTree>
<Sequence>
<Selector>
<Sequence>
<Condition>detect_obstacle</Condition>
<Action>turn_left</Action>
</Sequence>
<Sequence>
<Condition>detect_obstacle</Condition>
<Action>turn_right</Action>
</Sequence>
</Selector>
<Action>move_forward</Action>
</Sequence>
</BehaviorTree>"
Conduct a coordinated search using a grid pattern.,"Use the following behaviors to generate XML Behavior tree based on the user command: {'move_to_next_grid': 'Action node: Move the robot to the next grid location.
Returns: True if the robot successfully moved to the next location, False otherwise.', 'scan_grid_area': 'Action node: Scan the current grid location for any targets.
Returns: True if a target is found, False otherwise.', 'mark_grid_searched': 'Action node: Mark the current grid location as searched.
Returns: Always returns True.', 'is_search_complete': 'Condition node: Check if the entire grid has been fully searched.
Returns: True if the search is complete, False otherwise.', 'is_target_found': 'Condition node: Check if a target has been detected in the current grid location.
Returns: True if a target is detected, False otherwise.'}",Conduct a coordinated search using a grid pattern for targets.,"
<BehaviorTree>
<Sequence>
<Condition>is_search_complete</Condition>
<Sequence>
<Action>move_to_next_grid</Action>
<Action>scan_grid_area</Action>
<Selector>
<Sequence>
<Condition>is_target_found</Condition>
<Action>call_for_backup</Action>
</Sequence>
<Action>mark_grid_searched</Action>
</Selector>
</Sequence>
</Sequence>
</BehaviorTree>"
Use swarm tactics to defend against a predator.,"Use the following behaviors to generate XML Behavior tree based on the user command: {'locate_predator': 'Condition node: Check if there is a predator nearby.
Returns: True if a predator is detected, False otherwise.', 'send_warning_signal': 'Action node: Send a warning signal to other robots in the swarm.
Returns: True if the signal was successfully sent, False otherwise.', 'surround_predator': 'Action node: Coordinate with other robots to surround the predator and prevent it from advancing.
Returns: True once the predator is surrounded.', 'attack_predator': 'Action node: Use swarm attack tactics to overpower the predator.
Returns: True once the predator is defeated.'}",Defend against a predator using swarm tactics.,"
<BehaviorTree>
<Sequence>
<Condition>locate_predator</Condition>
<Action>send_warning_signal</Action>
<Selector>
<Sequence>
<Condition>predator_surrounded</Condition>
<Action>attack_predator</Action>
</Sequence>
<Action>surround_predator</Action>
</Selector>
</Sequence>
</BehaviorTree>"
Utilize collective decision-making to choose the best path.,"Use the following behaviors to generate XML Behavior tree based on the user command: {'check_possible_paths': 'Action node: Check all possible paths to the destination.
Returns: True if all paths have been checked, False otherwise.', 'evaluate_path_options': 'Action node: Evaluate each path based on factors such as distance, safety, etc.
Returns: True if all paths have been evaluated, False otherwise.', 'choose_best_path': 'Action node: Choose the best path based on the evaluation.
Returns: True once the best path has been chosen.'}",Choose the best path to the destination using collective decision-making.,"
<BehaviorTree>
<Sequence>
<Action>check_possible_paths</Action>
<Action>evaluate_path_options</Action>
<Action>choose_best_path</Action>
</Sequence>
</BehaviorTree>"
Use adaptive behavior based on environment changes.,"Use the following behaviors to generate XML Behavior tree based on the user command: {'monitor_environment': 'Action node: Continuously monitor the environment for changes.
Returns: True if a change is detected, False otherwise.', 'analyze_environment': 'Action node: Analyze the changes in the environment and adapt behavior accordingly.
Returns: True once the analysis is complete.', 'execute_adaptive_behavior': 'Action node: Execute the adapted behavior.
Returns: True once the behavior has been executed.'}",Adapt behavior in response to changes in the environment.,"
<BehaviorTree>
<Sequence>
<Selector>
<Sequence>
<Condition>environment_changed</Condition>
<Action>analyze_environment</Action>
</Sequence>
<Sequence>
<Condition>environment_changed</Condition>
<Action>execute_adaptive_behavior</Action>
</Sequence>
</Selector>
<Action>monitor_environment</Action>
</Sequence>
</BehaviorTree>"
Use swarm tactics to efficiently gather resources from a large area.,"Use the following behaviors to generate XML Behavior tree based on the user command: {'divide_area': 'Action node: Divide the large area into smaller sections for efficient resource gathering.
Returns: True once the area is divided.', 'assign_sections': 'Action node: Assign sections to different robots in the swarm.
Returns: True once all sections are assigned.', 'gather_resources': 'Action node: Gather resources from the assigned section.
Returns: True once the section's resources have been gathered.', 'return_to_base': 'Action node: Return the gathered resources to the base.
Returns: True once the resources have been returned.'}",Gather resources from a large area using swarm tactics.,"
<BehaviorTree>
<Sequence>
<Action>divide_area</Action>
<Action>assign_sections</Action>
<Selector>
<Sequence>
<Condition>all_sections_assigned</Condition>
<Action>gather_resources</Action>
</Sequence>
<Action>return_to_base</Action>
</Selector>
</Sequence>
</BehaviorTree>"
Use swarm coordination to form a protective barrier around an important target.,"Use the following behaviors to generate XML Behavior tree based on the user command: {'locate_target': 'Condition node: Check if the target is in danger.
Returns: True if the target is in danger, False otherwise.', 'send_warning_signal': 'Action node: Send a warning signal to other robots in the swarm.
Returns: True if the signal was successfully sent, False otherwise.', 'protect_target': 'Action node: Coordinate with other robots to form a protective barrier around the target.
Returns: True once the barrier is formed.', 'patrol_surrounding_area': 'Action node: Monitor and patrol the surrounding area to ensure no threats enter.
Returns: True once the area is deemed safe.'}",Form a protective barrier around an important target.,"
<BehaviorTree>
<Sequence>
<Condition>locate_target</Condition>
<Action>send_warning_signal</Action>
<Selector>
<Sequence>
<Condition>barrier_formed</Condition>
<Action>patrol_surrounding_area</Action>
</Sequence>
<Action>protect_target</Action>
</Selector>
</Sequence>
</BehaviorTree>"
Use collective decision-making to choose the strongest robot for a specific task.,"Use the following behaviors to generate XML Behavior tree based on the user command: {'list_available_robots': 'Action node: List all available robots for the specific task.
Returns: True once all robots are listed.', 'evaluate_robot_strength': 'Action node: Evaluate each robot's strength based on factors like size, weight, etc.
Returns: True once all robots are evaluated.', 'choose_strongest_robot': 'Action node: Choose the strongest robot for the task.
Returns: True once the strongest robot is chosen for the task.'}",Choose the strongest robot for a specific task using collective decision-making.,"
<BehaviorTree>
<Sequence>
<Action>list_available_robots</Action>
<Action>evaluate_robot_strength</Action>
<Action>choose_strongest_robot</Action>
</Sequence>
</BehaviorTree>"
Use swarm cooperation to lift a heavy object off the ground.,"Use the following behaviors to generate XML Behavior tree based on the user command: {'assign_roles': 'Action node: Assign roles to robots in the swarm, such as lifting, stabilizing, etc.
Returns: True once all roles are assigned.', 'lift_object': 'Action node: Coordinate with other robots to lift the object off the ground.
Returns: True once the object is lifted.', 'stabilize_object': 'Action node: Coordinate with other robots to stabilize the object while it is being lifted.
Returns: True once the object is stabilized.'}",Lift a heavy object off the ground using swarm cooperation.,"
<BehaviorTree>
<Sequence>
<Action>assign_roles</Action>
<Action>lift_object</Action>
<Selector>
<Sequence>
<Condition>object_lifted</Condition>
<Action>stabilize_object</Action>
</Sequence>
<Action>lower_object</Action>
</Selector>
</Sequence>
</BehaviorTree>"
Use coordinated movement to build a structure.,"Use the following behaviors to generate XML Behavior tree based on the user command: {'move_to_work_site': 'Action node: Move to the designated site for construction.
Returns: True once the robot arrives at the work site.', 'gather_materials': 'Action node: Gather necessary materials for construction.
Returns: True once all materials are gathered.', 'build_structure': 'Action node: Coordinate with other robots to build the structure.
Returns: True once the structure is built.'}",Coordinate with other robots to build a structure.,"
<BehaviorTree>
<Sequence>
<Action>move_to_work_site</Action>
<Action>gather_materials</Action>
<Action>build_structure</Action>
</Sequence>
</BehaviorTree>"
Use swarm tactics to overcome a maze.,"Use the following behaviors to generate XML Behavior tree based on the user command: {'move_forward': 'Action node: Move the robot forward.
Returns: True if the robot successfully moved forward, False otherwise.', 'turn_left': 'Action node: Turn the robot left.
Returns: True if the robot successfully turned left, False otherwise.', 'turn_right': 'Action node: Turn the robot right.
Returns: True if the robot successfully turned right, False otherwise.', 'detect_wall': 'Condition node: Check if there is a wall in front of the robot.
Returns: True if a wall is detected, False otherwise.'}",Navigate a maze using swarm tactics.,"
<BehaviorTree>
<Sequence>
<Selector>
<Sequence>
<Condition>detect_wall</Condition>
<Action>turn_left</Action>
</Sequence>
<Sequence>
<Condition>detect_wall</Condition>
<Action>turn_right</Action>
</Sequence>
</Selector>
<Action>move_forward</Action>
</Sequence>
</BehaviorTree>"
Guide the swarm through a narrow passage while avoiding obstacles.,Use the following behaviors to generate XML Behavior tree based on the user command: move_forward: Action node (same as before). check_obstacles: Condition node - Checks for obstacles in front of the agent. avoid_obstacle: Action node - Makes the agent steer away from the obstacle. set_target_angle: Action node - Sets the target angle for the agent to move towards.,Guide the swarm through a narrow passage while avoiding obstacles.,"
<BehaviorTree>
<Sequence>
<Condition>check_obstacles</Condition>
<Action>avoid_obstacle</Action>
<Action>set_target_angle</Action>
<Action>move_forward</Action>
</Sequence>
</BehaviorTree>"
Collect and deliver a set of items to a specified location.,Use the following behaviors to generate XML Behavior tree based on the user command: collect_items: Action node - Makes the agent collect items within its vicinity. get_delivery_location: Blackboard key selector - Retrieves the delivery location stored on the blackboard. go_to_location: Action node (same as before). deliver_items: Action node - Makes the agent deliver the collected items at the specified location.,Collect and deliver a set of items to a specified location.,"
<BehaviorTree>
<Sequence>
<Action>collect_items</Action>
<Action>get_delivery_location</Action>
<Action>go_to_location</Action>
<Action>deliver_items</Action>
</Sequence>
</BehaviorTree>"
Follow a designated leader while maintaining a specific distance.,Use the following behaviors to generate XML Behavior tree based on the user command: follow_leader: Action node - Makes the agent follow the designated leader. get_leader_location: Blackboard key selector - Retrieves the current location of the leader stored on the blackboard. set_follow_distance: Action node - Sets the desired distance between the agent and the leader.,Follow a designated leader while maintaining a specific distance.,"
<BehaviorTree>
<Sequence>
<Action>get_leader_location</Action>
<Action>set_follow_distance</Action>
<Action>follow_leader</Action>
</Sequence>
</BehaviorTree>"
Defend the home base from incoming enemy attacks.,Use the following behaviors to generate XML Behavior tree based on the user command: get_enemy_location: Blackboard key selector - Retrieves the current location of enemies stored on the blackboard. set_defend_area: Action node - Sets the designated area to defend. attack: Action node (same as before). check_enemy_proximity: Condition node - Checks if enemies are within a certain proximity to the home base.,Defend the home base from incoming enemy attacks.,"
<BehaviorTree>
<Sequence>
<Action>get_enemy_location</Action>
<Action>set_defend_area</Action>
<Condition>check_enemy_proximity</Condition>
<Action>attack</Action>
</Sequence>
</BehaviorTree>"
Collaboratively push a heavy object to a specified location.,Use the following behaviors to generate XML Behavior tree based on the user command: get_pushing_strength: Action node - Retrieves the agent's pushing strength from the blackboard. calculate_pushing_force: Function node - Calculates the required force to move the object based on its weight and the agent's strength. push_object: Action node - Applies the calculated force to the object. get_destination: Blackboard key selector - Retrieves the target location for the object.,Collaboratively push a heavy object to a specified location.,"
<BehaviorTree>
<Sequence>
<Action>get_pushing_strength</Action>
<Function>calculate_pushing_force</Function>
<Action>push_object</Action>
<Action>get_destination</Action>
</Sequence>
</BehaviorTree>"
Survey the surrounding area and report back any potential hazards.,Use the following behaviors to generate XML Behavior tree based on the user command: scan_environment: Action node - Makes the agent scan its surroundings. get_hazard_info: Function node - Retrieves information about potential hazards from the agent's sensors and stores it on the blackboard. report_hazards: Action node - Makes the agent report the stored information to the designated location.,Survey the surrounding area and report back any potential hazards.,"
<BehaviorTree>
<Sequence>
<Action>scan_environment</Action>
<Function>get_hazard_info</Function>
<Action>report_hazards</Action>
</Sequence>
</BehaviorTree>"
Identify and retrieve a specific item from a cluttered environment.,Use the following behaviors to generate XML Behavior tree based on the user command: scan_environment: Action node - Makes the agent scan its surroundings. get_item_location: Function node - Retrieves the location of the specified item from the agent's sensors and stores it on the blackboard. go_to_location: Action node (same as before). pick_up_item: Action node - Makes the agent pick up the specified item.,Identify and retrieve a specific item from a cluttered environment.,"
<BehaviorTree>
<Sequence>
<Action>scan_environment</Action>
<Function>get_item_location</Function>
<Action>go_to_location</Action>
<Action>pick_up_item</Action>
</Sequence>
</BehaviorTree>"
Coordinate and perform a synchronized movement with other robots.,Use the following behaviors to generate XML Behavior tree based on the user command: get_self_location: Function node - Retrieves the agent's current location. get_leader_location: Blackboard key selector - Retrieves the designated leader's location. set_destination: Action node - Sets the designated destination for the synchronized movement. move_to_location: Action node - Moves the agent towards the set destination.,Coordinate and perform a synchronized movement with other robots.,"
<BehaviorTree>
<Sequence>
<Action>get_self_location</Action>
<Action>get_leader_location</Action>
<Action>set_destination</Action>
<Action>move_to_location</Action>
</Sequence>
</BehaviorTree>"
Construct a tower using multiple agents to distribute the weight.,Use the following behaviors to generate XML Behavior tree based on the user command: set_building_area: Action node - Sets the designated area for the tower to be built. get_agent_strength: Action node - Retrieves the agent's strength from the blackboard. calculate_building_height: Function node - Calculates the height of each layer of the tower based on the agents' combined strength. stack_blocks: Action node - Makes the agents stack blocks on top of each other until the desired height is reached.,Construct a tower using multiple agents to distribute the weight.,"
<BehaviorTree>
<Sequence>
<Action>set_building_area</Action>
<Action>get_agent_strength</Action>
<Function>calculate_building_height</Function>
<Action>stack_blocks</Action>
</Sequence>
</BehaviorTree>"
Navigate through a maze to find the designated exit point.,Use the following behaviors to generate XML Behavior tree based on the user command: explore: Action node - Moves the agent towards unexplored areas. set_target_exit: Action node - Sets the designated exit point for the agent. get_current_location: Function node - Retrieves the agent's current location. calculate_distance_to_exit: Function node - Calculates the distance between the agent's current location and the designated exit point. set_next_move: Action node - Sets the desired direction for the agent to move towards.,Navigate through a maze to find the designated exit point.,"
<BehaviorTree>
<Sequence>
<Action>explore</Action>
<Action>set_target_exit</Action>
<Function>get_current_location</Function>
<Function>calculate_distance_to_exit</Function>
<Action>set_next_move</Action>
</Sequence>
</BehaviorTree>"
Cooperatively carry a heavy object together to a specified location.,Use the following behaviors to generate XML Behavior tree based on the user command: get_agent_strength: Action node - Retrieves the agent's strength from the blackboard. calculate_carrying_capacity: Function node - Calculates the combined carrying capacity of all agents involved. check_weight: Condition node - Checks if the object's weight is within the calculated carrying capacity. carry_object: Action node - Makes the agents carry the object together. go_to_location: Action node (same as before).,Cooperatively carry a heavy object together to a specified location.,"
<BehaviorTree>
<Sequence>
<Action>get_agent_strength</Action>
<Function>calculate_carrying_capacity</Function>
<Condition>check_weight</Condition>
<Action>carry_object</Action>
<Action>go_to_location</Action>
</Sequence>
</BehaviorTree>"
Communicate and synchronize tasks between multiple robots.,Use the following behaviors to generate XML Behavior tree based on the user command: send_task: Action node - Makes the agent send a designated task to another robot. receive_task: Action node - Makes the agent receive a task from another robot. execute_task: Action node (same as before). task_complete: Condition node - Checks if the received task has been completed. task_failed: Condition node - Checks if the received task has failed.,Communicate and synchronize tasks between multiple robots.,"
<BehaviorTree>
<Sequence>
<Selector>
<Action>send_task</Action>
<Action>receive_task</Action>
</Selector>
<Condition>task_complete</Condition>
<Condition>task_failed</Condition>
<Action>execute_task</Action>
</Sequence>
</BehaviorTree>"
Search and rescue a trapped individual in a simulated disaster area.,Use the following behaviors to generate XML Behavior tree based on the user command: move_to_location: Action node - Moves the agent towards the designated search area. scan_environment: Action node - Makes the agent scan its surroundings for the trapped individual. identify_trapped_person: Condition node - Checks if the agent has identified the trapped individual. rescue_person: Action node - Makes the agent rescue the trapped individual.,Search and rescue a trapped individual in a simulated disaster area.,"
<BehaviorTree>
<Sequence>
<Action>move_to_location</Action>
<Action>scan_environment</Action>
<Condition>identify_trapped_person</Condition>
<Action>rescue_person</Action>
</Sequence>
</BehaviorTree>"
Navigate through a difficult terrain while carrying a fragile object without dropping it.,Use the following behaviors to generate XML Behavior tree based on the user command: get_current_location: Function node - Retrieves the agent's current location. calculate_distance_to_destination: Function node - Calculates the remaining distance to the target destination. check_terrain: Condition node - Checks for difficult terrain in front of the agent. avoid_terrain: Action node - Makes the agent avoid the difficult terrain. hold_object: Action node - Makes the agent hold onto the fragile object.,Navigate through a difficult terrain while carrying a fragile object without dropping it.,"
<BehaviorTree>
<Sequence>
<Function>get_current_location</Function>
<Function>calculate_distance_to_destination</Function>
<Condition>check_terrain</Condition>
<Action>avoid_terrain</Action>
<Action>hold_object</Action>
</Sequence>
</BehaviorTree>"
Harvest resources from a designated area and bring them back to the base.,Use the following behaviors to generate XML Behavior tree based on the user command: move_to_location: Action node - Moves the agent towards the designated harvesting area. harvest_resources: Action node - Makes the agent harvest resources within its vicinity. return_to_base: Action node - Makes the agent return to the base. drop_off_resources: Action node - Makes the agent drop off the harvested resources at the base.,Harvest resources from a designated area and bring them back to the base.,"
<BehaviorTree>
<Sequence>
<Action>move_to_location</Action>
<Action>harvest_resources</Action>
<Action>return_to_base</Action>
<Action>drop_off_resources</Action>
</Sequence>
</BehaviorTree>"
Move in a specific formation while avoiding collisions with other robots.,Use the following behaviors to generate XML Behavior tree based on the user command: set_formation: Action node - Sets the desired formation for the agents to move in. get_self_location: Function node - Retrieves the agent's current location. calculate_spacing: Function node - Calculates the required spacing between agents to avoid collisions. move_in_formation: Action node - Makes the agents move in the designated formation.,Move in a specific formation while avoiding collisions with other robots.,"
<BehaviorTree>
<Sequence>
<Action>set_formation</Action>
<Function>get_self_location</Function>
<Function>calculate_spacing</Function>
<Action>move_in_formation</Action>
</Sequence>
</BehaviorTree>"
Spread out and explore a large unknown area.,Use the following behaviors to generate XML Behavior tree based on the user command: start_spreading: Action node - Initiates the spreading out behavior. move_forward: Action node (same as before). get_current_location: Function node - Retrieves the agent's current location. calculate_distance_travelled: Function node - Calculates the distance travelled by the agent since starting to spread out. set_new_target: Action node - Sets a new target location for the agent to move towards.,Spread out and explore a large unknown area.,"
<BehaviorTree>
<Sequence>
<Action>start_spreading</Action>
<Action>move_forward</Action>
<Function>get_current_location</Function>
<Function>calculate_distance_travelled</Function>
<Action>set_new_target</Action>
</Sequence>
</BehaviorTree>"
Deliver the package to the specified location.,Use the following behaviors to generate XML Behavior tree based on the user command: navigate_to: Action node- Guides the agent to the specified location. is_at_destination: Condition node - Checks if the agent has reached the destination. deliver_package: Action node - Performs the task of delivering the package.,Deliver the package to the specified location.,"
<BehaviorTree>
<Sequence>
<Action>navigate_to</Action>
<Selector>
<Condition>is_at_destination</Condition>
<Action>deliver_package</Action>
</Selector>
</Sequence>
</BehaviorTree>"
Collect all the scattered objects in the room.,Use the following behaviors to generate XML Behavior tree based on the user command: scan_room: Action node - Scans the room for scattered objects. pick_up: Action node - Picks up the objects found. is_room_empty: Condition node - Checks if the room is empty of objects.,Collect all the scattered objects in the room.,"
<BehaviorTree>
<Sequence>
<Action>scan_room</Action>
<Selector>
<Condition>is_room_empty</Condition>
<Action>pick_up</Action>
</Selector>
</Sequence>
</BehaviorTree>"
Retrieve the designated item from the storage unit.,Use the following behaviors to generate XML Behavior tree based on the user command: navigate_to_storage: Action node - Guides the agent to the storage unit. search_storage: Action node - Searches for the designated item. retrieve_item: Action node - Retrieves the item. is_item_retrieved: Condition node - Checks if the item has been retrieved.,Retrieve the designated item from the storage unit.,"
<BehaviorTree>
<Sequence>
<Action>navigate_to_storage</Action>
<Sequence>
<Action>search_storage</Action>
<Action>retrieve_item</Action>
</Sequence>
<Condition>is_item_retrieved</Condition>
</Sequence>
</BehaviorTree>"
Maintain a constant distance from the object in front of the robot.,Use the following behaviors to generate XML Behavior tree based on the user command: measure_distance: Action node - Measures the distance from the object in front. adjust_distance: Action node - Adjusts the robot's speed accordingly. is_distance_optimal: Condition node - Checks if the distance is the desired distance.,Maintain a constant distance from the object in front of the robot.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>measure_distance</Action>
<Action>adjust_distance</Action>
</Sequence>
<Condition>is_distance_optimal</Condition>
</Selector>
</BehaviorTree>"
Clear the path for other robots to pass through.,Use the following behaviors to generate XML Behavior tree based on the user command: detect_obstacle: Action node - Detects if there is an obstacle in the path. remove_obstacle: Action node - Removes the obstacle. is_path_clear: Condition node - Checks if the path is clear.,Clear the path for other robots to pass through.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>detect_obstacle</Action>
<Action>remove_obstacle</Action>
</Sequence>
<Condition>is_path_clear</Condition>
</Selector>
</BehaviorTree>"
Work together with other robots to complete a task.,Use the following behaviors to generate XML Behavior tree based on the user command: communicate: Action node - Allows the agent to communicate with other robots. assign_task: Action node - Assigns specific tasks to each robot. is_task_completed: Condition node - Checks if the task has been completed by all robots.,Work together with other robots to complete a task.,"
<BehaviorTree>
<Sequence>
<Action>communicate</Action>
<Selector>
<Action>assign_task</Action>
<Condition>is_task_completed</Condition>
</Selector>
</Sequence>
</BehaviorTree>"
Investigate and report any potential hazards in the environment.,Use the following behaviors to generate XML Behavior tree based on the user command: scan_environment: Action node - Scans the environment for potential hazards. report_hazard: Action node - Reports any hazards found. is_hazard_present: Condition node - Checks if there are any hazards present.,Investigate and report any potential hazards in the environment.,"
<BehaviorTree>
<Sequence>
<Action>scan_environment</Action>
<Selector>
<Action>report_hazard</Action>
<Condition>is_hazard_present</Condition>
</Selector>
</Sequence>
</BehaviorTree>"
Explore the surrounding area and create a map of the environment.,Use the following behaviors to generate XML Behavior tree based on the user command: move_forward: Action node - Moves the agent forward. turn_left: Action node - Turns the agent left by 90 degrees. turn_right: Action node - Turns the agent right by 90 degrees. create_map: Action node - Creates a map of the environment. is_map_complete: Condition node - Checks if the map is complete.,Explore the surrounding area and create a map of the environment.,"
<BehaviorTree>
<Sequence>
<Selector>
<Sequence>
<Action>move_forward</Action>
<Action>turn_left</Action>
<Action>create_map</Action>
</Sequence>
<Selector>
<Action>turn_right</Action>
<Action>create_map</Action>
</Selector>
</Sequence>
<Condition>is_map_complete</Condition>
</BehaviorTree>"
Make coordinated movements to form a specific shape as a group.,Use the following behaviors to generate XML Behavior tree based on the user command: communicate: Action node - Allows the agent to communicate with other robots. form_shape: Action node - Guides the agent to move to form a specific shape. is_shape_formed: Condition node - Checks if the shape has been formed.,Make coordinated movements to form a specific shape as a group.,"
<BehaviorTree>
<Sequence>
<Action>communicate</Action>
<Selector>
<Action>form_shape</Action>
<Condition>is_shape_formed</Condition>
</Selector>
</Sequence>
</BehaviorTree>"
Repair any malfunctions in the robot.,Use the following behaviors to generate XML Behavior tree based on the user command: detect_malfunction: Action node - Detects any malfunctions in the robot. fix_malfunction: Action node - Fixes the malfunction. is_robot_functional: Condition node - Checks if the robot is functional.,Repair any malfunctions in the robot.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>detect_malfunction</Action>
<Action>fix_malfunction</Action>
</Sequence>
<Condition>is_robot_functional</Condition>
</Selector>
</BehaviorTree>"
Identify and retrieve the specified object from a cluttered environment.,Use the following behaviors to generate XML Behavior tree based on the user command: scan_environment: Action node - Scans the environment for the specified object. navigate_to_object: Action node - Guides the agent to the location of the object. retrieve_object: Action node - Picks up the object. is_object_retrieved: Condition node - Checks if the object has been retrieved.,Identify and retrieve the specified object from a cluttered environment.,"
<BehaviorTree>
<Sequence>
<Action>scan_environment</Action>
<Sequence>
<Action>navigate_to_object</Action>
<Action>retrieve_object</Action>
</Sequence>
<Condition>is_object_retrieved</Condition>
</Sequence>
</BehaviorTree>"
Build a structure using materials provided in the environment.,Use the following behaviors to generate XML Behavior tree based on the user command: collect_material: Action node - Collects the materials needed for the structure. navigate_to_location: Action node - Guides the agent to the desired location for the structure. build_structure: Action node - Constructs the structure using the collected materials. is_structure_complete: Condition node - Checks if the structure is complete.,Build a structure using materials provided in the environment.,"
<BehaviorTree>
<Sequence>
<Selector>
<Sequence>
<Action>collect_material</Action>
<Action>build_structure</Action>
</Sequence>
<Selector>
<Action>navigate_to_location</Action>
<Condition>is_structure_complete</Condition>
</Selector>
</Sequence>
</BehaviorTree>"
Protect a specified area from intruders.,Use the following behaviors to generate XML Behavior tree based on the user command: scan_area: Action node - Scans the specified area for any intruders. sound_alarm: Action node - Activates an alarm if an intruder is detected. is_area_secure: Condition node - Checks if the area is free of intruders.,Protect a specified area from intruders.,"
<BehaviorTree>
<Sequence>
<Action>scan_area</Action>
<Selector>
<Action>sound_alarm</Action>
<Condition>is_area_secure</Condition>
</Selector>
</Sequence>
</BehaviorTree>"
Follow a moving target and keep a safe distance.,Use the following behaviors to generate XML Behavior tree based on the user command: track_target: Action node - Tracks the movements of the target. maintain_distance: Action node - Adjusts the robot's speed to keep a safe distance from the target. is_target_safe: Condition node - Checks if the target is safe to follow.,Follow a moving target and keep a safe distance.,"
<BehaviorTree>
<Sequence>
<Action>track_target</Action>
<Selector>
<Action>maintain_distance</Action>
<Condition>is_target_safe</Condition>
</Selector>
</Sequence>
</BehaviorTree>"
Collect data from different points and return to base.,Use the following behaviors to generate XML Behavior tree based on the user command: collect_data: Action node - Collects data from each designated point. return_to_base: Action node - Guides the agent to the base to store the collected data. store_data: Action node - Stores the collected data at the base. is_data_stored: Condition node - Checks if the data has been stored.,Collect data from different points and return to base.,"
<BehaviorTree>
<Sequence>
<Action>collect_data</Action>
<Sequence>
<Action>return_to_base</Action>
<Action>store_data</Action>
</Sequence>
<Condition>is_data_stored</Condition>
</Sequence>
</BehaviorTree>"
Coordinate with other robots to extinguish a fire.,Use the following behaviors to generate XML Behavior tree based on the user command: communicate: Action node - Allows the agent to communicate with other robots. detect_fire: Action node - Detects the fire in the environment. extinguish_fire: Action node - Activates a fire extinguisher to put out the fire. is_fire_extinguished: Condition node - Checks if the fire has been extinguished.,Coordinate with other robots to extinguish a fire.,"
<BehaviorTree>
<Sequence>
<Action>communicate</Action>
<Selector>
<Sequence>
<Action>detect_fire</Action>
<Action>extinguish_fire</Action>
</Sequence>
<Condition>is_fire_extinguished</Condition>
</Selector>
</Sequence>
</BehaviorTree>"
Work together to lift and move an object to a designated location.,Use the following behaviors to generate XML Behavior tree based on the user command: communicate: Action node - Allows the agent to communicate with other robots. lift_object: Action node - Lifts the object with the help of other robots. move_object: Action node - Moves the object to the designated location. is_object_moved: Condition node - Checks if the object has been moved.,Work together to lift and move an object to a designated location.,"
<BehaviorTree>
<Sequence>
<Action>communicate</Action>
<Selector>
<Sequence>
<Action>lift_object</Action>
<Action>move_object</Action>
</Sequence>
<Condition>is_object_moved</Condition>
</Selector>
</Sequence>
</BehaviorTree>"
Search for and rescue a trapped individual.,Use the following behaviors to generate XML Behavior tree based on the user command: scan_environment: Action node - Scans the environment for the trapped individual. navigate_to_location: Action node - Guides the agent to the location of the trapped individual. free_individual: Action node - Frees the trapped individual. is_individual_rescued: Condition node - Checks if the individual has been rescued.,Search for and rescue a trapped individual.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>scan_environment</Action>
<Selector>
<Action>navigate_to_location</Action>
<Condition>is_individual_rescued</Condition>
</Selector>
</Sequence>
<Action>free_individual</Action>
</Selector>
</BehaviorTree>"
Move towards the nearest robot in the swarm and form a triangle formation.,"Use the following behaviors to generate XML Behavior tree based on the user command: find_nearest_robot: Action node - Finds the nearest robot in the swarm. move_to_target: Action node - Moves towards a target, in this case the nearest robot. form_triangle_formation: Action node - Coordinates with other robots to form a triangle formation.",Move towards the nearest robot in the swarm and form a triangle formation.,"
<BehaviorTree>
<Sequence>
<Action>find_nearest_robot</Action>
<Action>move_to_target</Action>
<Action>form_triangle_formation</Action>
</Sequence>
</BehaviorTree>"
Continuously monitor battery levels and charge if levels fall below a certain threshold.,Use the following behaviors to generate XML Behavior tree based on the user command: monitor_battery: Action node - Monitors the current battery level. is_battery_low: Condition node - Checks if the battery level falls below a predefined threshold. charge_battery: Action node - Activates the charging process.,Continuously monitor battery levels and charge if levels fall below a certain threshold.,"
<BehaviorTree>
<Sequence>
<Action>monitor_battery</Action>
<Condition>is_battery_low</Condition>
<Action>charge_battery</Action>
</Sequence>
</BehaviorTree>"
Prioritize collecting resources over defending against enemies.,Use the following behaviors to generate XML Behavior tree based on the user command: collect_resource: Action node - Collects a nearby resource. defend_against_enemy: Action node - Defends against a nearby enemy. get_resource_priority: Function node - Calculates the priority for collecting resources. get_enemy_threat: Function node (same as before). utility_score: Function node (same as before).,Prioritize collecting resources over defending against enemies.,"
<BehaviorTree>
<Sequence>
<Action>get_resource_priority</Action>
<Condition>greater_than enemy_threat</Condition>
<Action>collect_resource</Action>
</Sequence>
<Action>defend_against_enemy</Action>
</BehaviorTree>"
Locate and retrieve a specific item from a designated location in the environment.,Use the following behaviors to generate XML Behavior tree based on the user command: locate_item: Action node - Scans the environment to locate the designated item. move_to_location: Action node - Moves towards the designated location. retrieve_item: Action node - Retrieves the item once it has been located.,Locate and retrieve a specific item from a designated location in the environment.,"
<BehaviorTree>
<Sequence>
<Action>locate_item</Action>
<Action>move_to_location</Action>
<Action>retrieve_item</Action>
</Sequence>
</BehaviorTree>"
Check the current time and perform an action depending on whether it is morning or evening.,Use the following behaviors to generate XML Behavior tree based on the user command: check_time: Action node - Retrieves the current time from the environment. is_morning: Condition node - Checks if it is currently morning. is_evening: Condition node - Checks if it is currently evening. perform_morning_action: Action node - Performs an action suitable for the morning. perform_evening_action: Action node - Performs an action suitable for the evening.,Check the current time and perform an action depending on whether it is morning or evening.,"
<BehaviorTree>
<Sequence>
<Action>check_time</Action>
<Condition>is_morning</Condition>
<Action>perform_morning_action</Action>
</Sequence>
<Sequence>
<Condition>is_evening</Condition>
<Action>perform_evening_action</Action>
</Sequence>
</BehaviorTree>"
Follow the movement of the leader robot in the swarm and maintain a certain distance from it.,Use the following behaviors to generate XML Behavior tree based on the user command: follow_leader: Action node - Follows the movement of the leader robot. maintain_distance: Action node - Adjusts the robot's position to maintain a certain distance from the leader.,Follow the movement of the leader robot in the swarm and maintain a certain distance from it.,"
<BehaviorTree>
<Sequence>
<Action>follow_leader</Action>
<Action>maintain_distance</Action>
</Sequence>
</BehaviorTree>"
Detect and avoid obstacles while navigating towards a specific location.,Use the following behaviors to generate XML Behavior tree based on the user command: detect_obstacles: Action node - Scans the environment for obstacles. avoid_obstacles: Action node - Performs maneuvers to avoid obstacles. move_to_location: Action node - Moves towards the designated location.,Detect and avoid obstacles while navigating towards a specific location.,"
<BehaviorTree>
<Sequence>
<Action>detect_obstacles</Action>
<Action>avoid_obstacles</Action>
<Action>move_to_location</Action>
</Sequence>
</BehaviorTree>"
Coordinate with other robots in the swarm to perform a complex task together.,Use the following behaviors to generate XML Behavior tree based on the user command: communicate_with_swarm: Action node - Establishes communication with other robots in the swarm. perform_task: Action node - Performs a specific task as part of the collective effort. share_progress: Action node - Shares progress and important information with the other robots.,Coordinate with other robots in the swarm to perform a complex task together.,"
<BehaviorTree>
<Sequence>
<Action>communicate_with_swarm</Action>
<Action>perform_task</Action>
<Action>share_progress</Action>
</Sequence>
</BehaviorTree>"
Prioritize exploring unknown areas of the environment over repeated visits to already explored areas.,Use the following behaviors to generate XML Behavior tree based on the user command: explore_unknown_areas: Action node - Explores unknown areas of the environment. check_visited_status: Condition node - Checks if the current location has been visited before. revisit_area: Action node - Revisits an already explored area.,Prioritize exploring unknown areas of the environment over repeated visits to already explored areas.,"
<BehaviorTree>
<Sequence>
<Action>explore_unknown_areas</Action>
<Condition>not_visited</Condition>
<Action>revisit_area</Action>
</Sequence>
</BehaviorTree>"
Avoid the path of a moving object while navigating towards a specific location.,Use the following behaviors to generate XML Behavior tree based on the user command: detect_moving_object: Action node - Uses sensors to detect a moving object. avoid_object: Action node - Performs maneuvers to avoid the object. move_to_location: Action node - Moves towards the designated location.,Avoid the path of a moving object while navigating towards a specific location.,"
<BehaviorTree>
<Sequence>
<Action>detect_moving_object</Action>
<Action>avoid_object</Action>
<Action>move_to_location</Action>
</Sequence>
</BehaviorTree>"
Scan the environment for a designated color and perform a specific action if it is detected.,Use the following behaviors to generate XML Behavior tree based on the user command: scan_color: Action node - Scans the environment for a designated color. check_color_detected: Condition node - Checks if the designated color was detected. perform_color_action: Action node - Performs a specific action if the color is detected.,Scan the environment for a designated color and perform a specific action if it is detected.,"
<BehaviorTree>
<Sequence>
<Action>scan_color</Action>
<Condition>check_color_detected</Condition>
<Action>perform_color_action</Action>
</Sequence>
</BehaviorTree>"
"Respond to external stimuli, such as a loud sound or a bright light, by changing behavior.",Use the following behaviors to generate XML Behavior tree based on the user command: detect_stimulus: Action node - Uses sensors to detect external stimuli. respond_to_sound: Action node - Reacts to a loud sound. respond_to_light: Action node - Reacts to a bright light.,"Respond to external stimuli, such as a loud sound or a bright light, by changing behavior.","
<BehaviorTree>
<Sequence>
<Action>detect_stimulus</Action>
<Condition>sound_detected</Condition>
<Action>respond_to_sound</Action>
</Sequence>
<Sequence>
<Condition>light_detected</Condition>
<Action>respond_to_light</Action>
</Sequence>
</BehaviorTree>"
Continuously monitor the state of a designated object and perform actions depending on its status.,Use the following behaviors to generate XML Behavior tree based on the user command: monitor_object: Action node - Monitors the state of the designated object. is_object_damaged: Condition node - Checks if the object is damaged. is_object_moved: Condition node - Checks if the object has been moved. repair_object: Action node - Performs actions to repair the object. relocate_object: Action node - Moves the object back to its designated location.,Continuously monitor the state of a designated object and perform actions depending on its status.,"
<BehaviorTree>
<Selector>
<Sequence>
<Action>monitor_object</Action>
<Condition>is_object_damaged</Condition>
<Action>repair_object</Action>
</Sequence>
<Sequence>
<Condition>is_object_moved</Condition>
<Action>relocate_object</Action>
</Sequence>
</Selector>
</BehaviorTree>"
Follow a specific path in the environment while avoiding obstacles.,Use the following behaviors to generate XML Behavior tree based on the user command: follow_path: Action node - Follows a specific path in the environment. detect_obstacles: Action node - Scans the environment for obstacles. avoid_obstacles: Action node - Performs maneuvers to avoid obstacles.,Follow a specific path in the environment while avoiding obstacles.,"
<BehaviorTree>
<Sequence>
<Action>follow_path</Action>
<Selector>
<Sequence>
<Action>detect_obstacles</Action>
<Action>avoid_obstacles</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
Cooperate with other robots to transport a heavy object to a designated location.,Use the following behaviors to generate XML Behavior tree based on the user command: communicate_with_swarm: Action node - Establishes communication with other robots. transport_object: Action node - Coordinates with other robots to transport the heavy object. move_to_location: Action node - Moves towards the designated location.,Cooperate with other robots to transport a heavy object to a designated location.,"
<BehaviorTree>
<Sequence>
<Action>communicate_with_swarm</Action>
<Action>transport_object</Action>
</Sequence>
<Action>move_to_location</Action>
</BehaviorTree>"
Enter a low-power mode to save energy when battery levels are below a certain threshold.,Use the following behaviors to generate XML Behavior tree based on the user command: monitor_battery: Action node (same as before). is_battery_low: Condition node (same as before). enter_low_power_mode: Action node - Puts the robot into a low-power mode.,Enter a low-power mode to save energy when battery levels are below a certain threshold.,"
<BehaviorTree>
<Sequence>
<Action>monitor_battery</Action>
<Condition>is_battery_low</Condition>
<Action>enter_low_power_mode</Action>
</Sequence>
</BehaviorTree>"
Continuously monitor for changes in the environment and react accordingly.,Use the following behaviors to generate XML Behavior tree based on the user command: scan_environment: Action node - Scans the environment for changes. react_to_changes: Action node - Performs specific actions depending on the changes detected.,Continuously monitor for changes in the environment and react accordingly.,"
<BehaviorTree>
<Sequence>
<Action>scan_environment</Action>
<Action>react_to_changes</Action>
</Sequence>
</BehaviorTree>"
Explore the environment while periodically checking in with the other robots in the swarm.,Use the following behaviors to generate XML Behavior tree based on the user command: explore: Action node (same as before). check_in: Action node - Communicates with other robots in the swarm. get_swarm_position: Function node - Retrieves the current position of the swarm. return_to_swarm: Action node - Returns to the designated location of the swarm.,Explore the environment while periodically checking in with the other robots in the swarm.,"
<BehaviorTree>
<Sequence>
<Action>explore</Action>
<Selector>
<Sequence>
<Action>check_in</Action>
<Condition>not_at_swarm_position</Condition>
<Action>return_to_swarm</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
"Detect an obstacle, stop and wait for further instructions.",Use the following behaviors to generate XML Behavior tree based on the user command: detect_obstacle: Condition node - Checks if an obstacle is detected. stop: Action node - Stops the robot's movement. wait_for_instructions: Action node - Temporarily pauses the behavior tree. The subtree node for this task should loop until a new command is received.,"Detect an obstacle, stop and wait for further instructions.","
<BehaviorTree>
<Selector>
<Condition>detect_obstacle</Condition>
<Sequence>
<Action>stop</Action>
<Action>wait_for_instructions</Action>
</Sequence>
</Selector>
</BehaviorTree>"
Patrol the area and report back every 5 minutes.,Use the following behaviors to generate XML Behavior tree based on the user command: patrol_area: Subtree node - Represents a behavior tree for patrolling an area. report_back: Action node - Sends a report back to the starting location. The subtree node for this task should loop with a set timer of 5 minutes.,Patrol the area and report back every 5 minutes.,"
<BehaviorTree>
<Sequence>
<Action>patrol_area</Action>
<Action>report_back</Action>
</Sequence>
</BehaviorTree>"
Follow a specified path while avoiding obstacles.,Use the following behaviors to generate XML Behavior tree based on the user command: follow_path: Action node - Executes predefined coordinates to follow a specified path. avoid_obstacles: Condition node - Checks for obstacles and redirects the robot accordingly.,Follow a specified path while avoiding obstacles.,"
<BehaviorTree>
<Sequence>
<Action>follow_path</Action>
<Condition>avoid_obstacles</Condition>
</Sequence>
</BehaviorTree>"
Retrieve an item from a specific location and transport it to another designated location.,Use the following behaviors to generate XML Behavior tree based on the user command: retrieve_item: Subtree node - Represents a behavior tree for retrieving an item from a specific location. transport_item: Subtree node - Represents a behavior tree for transporting an item to a designated location.,Retrieve an item from a specific location and transport it to another designated location.,"
<BehaviorTree>
<Sequence>
<Action>retrieve_item</Action>
<Action>transport_item</Action>
</Sequence>
</BehaviorTree>"
Collect resources from various locations and return to a base.,Use the following behaviors to generate XML Behavior tree based on the user command: collect_resource: Subtree node - Represents a behavior tree for collecting resources from various locations. return_to_base: Subtree node - Represents a behavior tree for returning to a designated base location.,Collect resources from various locations and return to a base.,"
<BehaviorTree>
<Sequence>
<Action>collect_resource</Action>
<Action>return_to_base</Action>
</Sequence>
</BehaviorTree>"
Divide into smaller groups and explore different areas.,Use the following behaviors to generate XML Behavior tree based on the user command: divide_into_groups: Subtree node - Represents a behavior tree for dividing the swarm into smaller groups. explore_area: Subtree node - Represents a behavior tree for exploring a designated area.,Divide into smaller groups and explore different areas.,"
<BehaviorTree>
<Sequence>
<Action>divide_into_groups</Action>
<Action>explore_area</Action>
</Sequence>
</BehaviorTree>"
Gather information from a specific location and share it with the rest of the swarm.,Use the following behaviors to generate XML Behavior tree based on the user command: gather_info: Subtree node - Represents a behavior tree for gathering information from a specific location. share_info: Action node - Shares the collected information with the rest of the swarm.,Gather information from a specific location and share it with the rest of the swarm.,"
<BehaviorTree>
<Sequence>
<Action>gather_info</Action>
<Action>share_info</Action>
</Sequence>
</BehaviorTree>"
Follow a designated leader and adjust movement accordingly.,Use the following behaviors to generate XML Behavior tree based on the user command: follow_leader: Subtree node - Represents a behavior tree for following a designated leader. adjust_movement: Action node - Adjusts the movement of the robots based on the leader's movements.,Follow a designated leader and adjust movement accordingly.,"
<BehaviorTree>
<Sequence>
<Action>follow_leader</Action>
<Action>adjust_movement</Action>
</Sequence>
</BehaviorTree>"
Search and rescue a lost member of the swarm.,Use the following behaviors to generate XML Behavior tree based on the user command: search_for_lost: Subtree node - Represents a behavior tree for searching for a lost member of the swarm. rescue: Action node - Executes the rescue mission once the lost member is found.,Search and rescue a lost member of the swarm.,"
<BehaviorTree>
<Sequence>
<Action>search_for_lost</Action>
<Action>rescue</Action>
</Sequence>
</BehaviorTree>"
Communicate with a non-responsive member of the swarm.,Use the following behaviors to generate XML Behavior tree based on the user command: communicate: Subtree node - Represents a behavior tree for communication with a non-responsive member of the swarm. retry: Action node - Resends the communication if no response is received.,Communicate with a non-responsive member of the swarm.,"
<BehaviorTree>
<Sequence>
<Action>communicate</Action>
<Action>retry</Action>
</Sequence>
</BehaviorTree>"
Navigate through a predefined maze.,Use the following behaviors to generate XML Behavior tree based on the user command: navigate_maze: Action node - Executes predefined actions to navigate through a maze. check_finished: Condition node - Checks if the maze has been successfully completed.,Navigate through a predefined maze.,"
<BehaviorTree>
<Sequence>
<Action>navigate_maze</Action>
<Condition>check_finished</Condition>
</Sequence>
</BehaviorTree>"
Protect a designated area from external threats.,Use the following behaviors to generate XML Behavior tree based on the user command: secure_area: Subtree node - Represents a behavior tree for securing a designated area. monitor: Action node - Monitors for external threats.,Protect a designated area from external threats.,"
<BehaviorTree>
<Selector>
<Action>secure_area</Action>
<Action>monitor</Action>
</Selector>
</BehaviorTree>"
Build a structure using collective efforts of the swarm.,Use the following behaviors to generate XML Behavior tree based on the user command: collect_materials: Subtree node - Represents a behavior tree for collecting materials for building. construct: Subtree node - Represents a behavior tree for constructing a structure using the materials collected.,Build a structure using collective efforts of the swarm.,"
<BehaviorTree>
<Sequence>
<Action>collect_materials</Action>
<Action>construct</Action>
</Sequence>
</BehaviorTree>"
Retrieve a specific object from a hard-to-reach location.,Use the following behaviors to generate XML Behavior tree based on the user command: navigate_difficult_terrain: Action node - Executes predefined actions to navigate through difficult terrain. retrieve_object: Subtree node - Represents a behavior tree for retrieving a specific object from a hard-to-reach location.,Retrieve a specific object from a hard-to-reach location.,"
<BehaviorTree>
<Sequence>
<Action>navigate_difficult_terrain</Action>
<Action>retrieve_object</Action>
</Sequence>
</BehaviorTree>"
Perform a coordinated dance routine.,Use the following behaviors to generate XML Behavior tree based on the user command: synchronize_movement: Action node - Coordinates the movement of the robots for the dance routine. follow_sequence: Subtree node - Represents a behavior tree for following a predefined dance sequence.,Perform a coordinated dance routine.,"
<BehaviorTree>
<Sequence>
<Action>synchronize_movement</Action>
<Action>follow_sequence</Action>
</Sequence>
</BehaviorTree>"
Search and gather food resources.,Use the following behaviors to generate XML Behavior tree based on the user command: search_for_food: Subtree node - Represents a behavior tree for searching for food resources. gather_food: Action node - Executes actions to gather the food once it is found.,Search and gather food resources.,"
<BehaviorTree>
<Sequence>
<Action>search_for_food</Action>
<Action>gather_food</Action>
</Sequence>
</BehaviorTree>"
Cooperate to move a heavy object.,Use the following behaviors to generate XML Behavior tree based on the user command: coordinate_movement: Action node - Coordinates the movement of multiple robots to move a heavy object. apply_force: Subtree node - Represents a behavior tree for applying force to the object.,Cooperate to move a heavy object.,"
<BehaviorTree>
<Sequence>
<Action>coordinate_movement</Action>
<Action>apply_force</Action>
</Sequence>
</BehaviorTree>"
Monitor environmental conditions and report back.,Use the following behaviors to generate XML Behavior tree based on the user command: check_environment: Condition node - Checks for any changes in environmental conditions. report_back: Action node - Sends a report back to the starting location.,Monitor environmental conditions and report back.,"
<BehaviorTree>
<Sequence>
<Condition>check_environment</Condition>
<Action>report_back</Action>
</Sequence>
</BehaviorTree>"
"Collect resources until inventory is full. If an enemy is spotted, drop resources and attack it.",Use the following behaviors to generate XML Behavior tree based on the user command: collect_resources: Action node - Makes the agent collect nearby resources. check_inventory: Condition node - Checks if the inventory is full. drop_resources: Action node - Makes the agent drop all resources. is_enemy_near: Condition node (same as before). attack: Action node (same as before).,"Collect resources until inventory is full. If an enemy is spotted, drop resources and attack it.","
<BehaviorTree>
<Sequence>
<Selector>
<Sequence>
<Action>collect_resources</Action>
<Condition>check_inventory</Condition>
</Sequence>
<Selector>
<Condition>is_enemy_near</Condition>
<Sequence>
<Action>drop_resources</Action>
<Action>attack</Action>
</Sequence>
</Selector>
</Sequence>
</BehaviorTree>"
"Follow the leader robot and perform a formation. If the leader moves too far, catch up and resume formation.",Use the following behaviors to generate XML Behavior tree based on the user command: follow_leader: Action node - Makes the agent follow the leader robot. maintain_distance: Condition node - Checks if the distance between the leader and follower is within a certain range. catch_up: Action node - Makes the agent move faster to catch up with the leader. perform_formation: Action node - Makes the agent move in formation with the leader.,"Follow the leader robot and perform a formation. If the leader moves too far, catch up and resume formation.","
<BehaviorTree>
<Selector>
<Sequence>
<Action>follow_leader</Action>
<Condition>maintain_distance</Condition>
<Action>perform_formation</Action>
</Sequence>
<Sequence>
<Action>follow_leader</Action>
<Condition>not maintain_distance</Condition>
<Action>catch_up</Action>
<Action>perform_formation</Action>
</Sequence>
</Selector>
</BehaviorTree>"
"When in danger, activate shield. If shield has been active for more than 5 seconds, deactivate it.",Use the following behaviors to generate XML Behavior tree based on the user command: danger_detected: Condition node - Checks if the agent is in danger. activate_shield: Action node - Activates the agent's shield. shield_active_timer: Condition node - Checks if the shield has been active for 5 seconds. deactivate_shield: Action node - Deactivates the agent's shield.,"When in danger, activate shield. If shield has been active for more than 5 seconds, deactivate it.","
<BehaviorTree>
<Sequence>
<Condition>danger_detected</Condition>
<Sequence>
<Action>activate_shield</Action>
<Condition>shield_active_timer</Condition>
<Action>deactivate_shield</Action>
</Sequence>
</Sequence>
</BehaviorTree>"
"Patrol a designated area. If an enemy is spotted, pursue and attack it.",Use the following behaviors to generate XML Behavior tree based on the user command: patrol: Action node - Makes the agent patrol a designated area. is_enemy_near: Condition node - Checks if an enemy is spotted. pursue: Action node - Makes the agent pursue the enemy. attack: Action node - Makes the agent attack the enemy.,"Patrol a designated area. If an enemy is spotted, pursue and attack it.","
<BehaviorTree>
<Selector>
<Sequence>
<Condition>is_enemy_near</Condition>
<Sequence>
<Action>pursue</Action>
<Action>attack</Action>
</Sequence>
</Sequence>
<Action>patrol</Action>
</Selector>
</BehaviorTree>"
"Deliver resources to a designated location. If resources are not collected within 2 minutes, abandon and search for more.",Use the following behaviors to generate XML Behavior tree based on the user command: deliver_resources: Action node - Makes the agent deliver resources to the designated location. resources_collected_timer: Condition node - Checks if resources have been collected within 2 minutes. abandon_delivery: Action node - Abandons the delivery and starts searching for more resources.,"Deliver resources to a designated location. If resources are not collected within 2 minutes, abandon and search for more.","
<BehaviorTree>
<Sequence>
<Selector>
<Sequence>
<Action>deliver_resources</Action>
<Condition>resources_collected_timer</Condition>
</Sequence>
<Action>abandon_delivery</Action>
</Selector>
</Sequence>
</BehaviorTree>"
"Investigate a suspicious noise. If nothing is found, return to previous task.",Use the following behaviors to generate XML Behavior tree based on the user command: investigate_noise: Action node - Makes the agent move towards the suspicious noise. is_noise_found: Condition node - Checks if the agent has found the source of the noise. return_to_previous_task: Action node - Makes the agent return to its previous task.,"Investigate a suspicious noise. If nothing is found, return to previous task.","
<BehaviorTree>
<Selector>
<Sequence>
<Action>investigate_noise</Action>
<Condition>is_noise_found</Condition>
</Sequence>
<Action>return_to_previous_task</Action>
</Selector>
</BehaviorTree>"
"Create a supply chain with other robots to transport resources. If the chain is broken, regroup and repair.",Use the following behaviors to generate XML Behavior tree based on the user command: create_supply_chain: Action node - Makes the agent create a supply chain with other robots. is_in_chain: Condition node - Checks if the agent is currently in a supply chain. regroup: Action node - Makes the agent regroup with other members of the supply chain. repair: Action node - Makes the agent repair any broken links in the supply chain.,"Create a supply chain with other robots to transport resources. If the chain is broken, regroup and repair.","
<BehaviorTree>
<Selector>
<Sequence>
<Action>create_supply_chain</Action>
<Condition>is_in_chain</Condition>
</Sequence>
<Sequence>
<Action>regroup</Action>
<Action>repair</Action>
</Sequence>
</Selector>
</BehaviorTree>"
"Gather information from the environment and share it with the rest of the swarm. If new information is received, update current knowledge.",Use the following behaviors to generate XML Behavior tree based on the user command: gather_information: Action node - Makes the agent gather information from the environment. share_information: Action node - Makes the agent share its knowledge with the rest of the swarm. is_new_information_received: Condition node - Checks if the agent has received new information. update_knowledge: Action node - Updates the agent's current knowledge with the new information.,"Gather information from the environment and share it with the rest of the swarm. If new information is received, update current knowledge.","
<BehaviorTree>
<Selector>
<Sequence>
<Action>gather_information</Action>
<Condition>is_new_information_received</Condition>
<Action>update_knowledge</Action>
</Sequence>
<Action>share_information</Action>
</Selector>
</BehaviorTree>"
"Perform a synchronized dance routine with other robots. If someone makes a mistake, restart from the beginning.",Use the following behaviors to generate XML Behavior tree based on the user command: perform_dance_routine: Action node - Makes the agent perform the synchronized dance routine. is_everyone_in_position: Condition node - Checks if all robots are in their correct positions for the routine. restart: Action node - Restarts the dance routine from the beginning.,"Perform a synchronized dance routine with other robots. If someone makes a mistake, restart from the beginning.","
<BehaviorTree>
<Sequence>
<Selector>
<Sequence>
<Action>perform_dance_routine</Action>
<Condition>is_everyone_in_position</Condition>
</Sequence>
<Action>restart</Action>
</Selector>
</Sequence>
</BehaviorTree>"
"Search for a specific object and retrieve it. If the object is not found within 5 minutes, return to the starting point and try again.",Use the following behaviors to generate XML Behavior tree based on the user command: search_object: Action node - Makes the agent search for the specific object. is_object_found: Condition node - Checks if the agent has found the object. return_to_start: Action node - Makes the agent return to the starting point. try_again_timer: Condition node - Checks if 5 minutes have passed since the last attempt.,"Search for a specific object and retrieve it. If the object is not found within 5 minutes, return to the starting point and try again.","
<BehaviorTree>
<Selector>
<Sequence>
<Action>search_object</Action>
<Condition>is_object_found</Condition>
</Sequence>
<Sequence>
<Condition>try_again_timer</Condition>
<Action>return_to_start</Action>
<Action>search_object</Action>
</Sequence>
</Selector>
</BehaviorTree>"
"Follow a predetermined path while avoiding obstacles. If the path is blocked, find an alternative and continue.",Use the following behaviors to generate XML Behavior tree based on the user command: follow_path: Action node - Makes the agent follow a predetermined path. is_path_blocked: Condition node - Checks if the path is blocked by an obstacle. find_alternative_path: Action node - Makes the agent find an alternative path. continue_on_alternative: Action node - Makes the agent continue following the alternative path.,"Follow a predetermined path while avoiding obstacles. If the path is blocked, find an alternative path and continue.","
<BehaviorTree>
<Selector>
<Sequence>
<Action>follow_path</Action>
<Condition>is_path_blocked</Condition>
<Sequence>
<Action>find_alternative_path</Action>
<Action>continue_on_alternative</Action>
</Sequence>
</Sequence>
</Selector>
</BehaviorTree>"
"Coordinate with other robots to form a barrier and defend a specific area. If the barrier is broken, reinforce and resume defense.",Use the following behaviors to generate XML Behavior tree based on the user command: form_barrier: Action node - Makes the agent coordinate with other robots to form a barrier. is_barrier_broken: Condition node - Checks if the barrier has been broken. reinforce_barrier: Action node - Makes the agent reinforce the barrier. defend_area: Action node - Makes the agent defend the specific area.,"Coordinate with other robots to form a barrier and defend a specific area. If the barrier is broken, reinforce and resume defense.","
<BehaviorTree>
<Selector>
<Sequence>
<Action>form_barrier</Action>
<Condition>is_barrier_broken</Condition>
<Action>reinforce_barrier</Action>
</Sequence>
<Action>defend_area</Action>
</Selector>
</BehaviorTree>"
"Exchange resources with other robots to maintain balanced inventories. If no resources are needed, continue with current task.",Use the following behaviors to generate XML Behavior tree based on the user command: exchange_resources: Action node - Makes the agent exchange resources with other robots. is_resource_needed: Condition node - Checks if the agent is in need of any resources. continue_task: Action node - Makes the agent continue with its current task.,"Exchange resources with other robots to maintain balanced inventories. If no resources are needed, continue with current task.","
<BehaviorTree>
<Selector>
<Sequence>
<Action>exchange_resources</Action>
<Condition>is_resource_needed</Condition>
</Sequence>
<Action>continue_task</Action>
</Selector>
</BehaviorTree>"
"Perform a rescue mission by locating and retrieving a trapped individual. If the individual cannot be found, continue searching.",Use the following behaviors to generate XML Behavior tree based on the user command: rescue_mission: Action node - Makes the agent perform a rescue mission. is_individual_found: Condition node - Checks if the trapped individual has been located. continue_search: Action node - Makes the agent continue searching for the individual.,"Perform a rescue mission by locating and retrieving a trapped individual. If the individual cannot be found, continue searching.","
<BehaviorTree>
<Selector>
<Sequence>
<Action>rescue_mission</Action>
<Condition>is_individual_found</Condition>
</Sequence>
<Action>continue_search</Action>
</Selector>
</BehaviorTree>"
"Compete with other robots in a race. If a shortcut is available, take it for a chance to win.",Use the following behaviors to generate XML Behavior tree based on the user command: compete_in_race: Action node - Makes the agent compete in the race. is_shortcut_available: Condition node - Checks if a shortcut is available. take_shortcut: Action node - Makes the agent take the shortcut.,"Compete with other robots in a race. If a shortcut is available, take it for a chance to win.","
<BehaviorTree>
<Selector>
<Sequence>
<Action>compete_in_race</Action>
<Condition>is_shortcut_available</Condition>
</Sequence>
<Action>take_shortcut</Action>
</Selector>
</BehaviorTree>"
"Navigate through a maze and reach the designated end point. If the correct path is not taken, backtrack and try again.",Use the following behaviors to generate XML Behavior tree based on the user command: navigate_maze: Action node - Makes the agent navigate through the maze. is_wrong_path_taken: Condition node - Checks if the wrong path was taken. backtrack: Action node - Makes the agent backtrack and try again.,"Navigate through a maze and reach the designated end point. If the correct path is not taken, backtrack and try again.","
<BehaviorTree>
<Selector>
<Sequence>
<Action>navigate_maze</Action>
<Condition>is_wrong_path_taken</Condition>
<Action>backtrack</Action>
<Action>navigate_maze</Action>
</Sequence>
</Selector>
</BehaviorTree>"
Create a behavior tree to efficiently distribute resources among a swarm of robots.,Use the following behaviors to generate XML Behavior tree based on the user command: distribute_resources: Action node - Distribute the available resources among the swarm of robots. get_robot_count: Function node - Calculates the number of robots in the swarm. get_resource_amount: Function node - Calculates the amount of resources available. calculate_distribution: Function node - Calculates the distribution of resources among the robots.,Distribute resources among the swarm of robots.,"
<BehaviorTree>
<Sequence>
<Selector>
<Condition>greater_than resource_amount</Condition>
<Action>distribute_resources</Action>
</Selector>
<Action>calculate_distribution</Action>
</Sequence>
</BehaviorTree>"
Create a behavior tree to efficiently coordinate a swarm of robots to locate a predefined target location.,Use the following behaviors to generate XML Behavior tree based on the user command: move_towards_target: Action node - Move the robot towards the target location. check_target_reached: Condition node - Check if the target location has been reached. coordinate_movement: Function node - Determines the direction and speed of movement for the swarm of robots.,Locate the target location using a swarm of robots.,"
<BehaviorTree>
<Sequence>
<Condition>not target_reached</Condition>
<Action>move_towards_target</Action>
</Sequence>
</BehaviorTree>"
Generate a behavior tree for a robot swarm to gather and transport resources to a central location.,Use the following behaviors to generate XML Behavior tree based on the user command: gather_resources: Action node - Gather resources from the environment. transport_resources: Action node - Transport resources to the designated central location. enough_resources: Condition node - Check if the required amount of resources has been gathered.,Gather and transport resources to a central location.,"
<BehaviorTree>
<Sequence>
<Condition>not enough_resources</Condition>
<Selector>
<Sequence>
<Action>gather_resources</Action>
<Action>transport_resources</Action>
</Sequence>
<Action>return_to_central_location</Action>
</Selector>
</Sequence>
</BehaviorTree>"
Create a behavior tree for robots to work together in a coordinated manner to build a structure.,Use the following behaviors to generate XML Behavior tree based on the user command: build_structure: Action node - Construct the designated structure. get_required_materials: Function node - Calculate the materials needed for the structure. coordinate_tasks: Function node - Coordinate the tasks of individual robots to efficiently complete the building process.,Work together to build a structure.,"
<BehaviorTree>
<Sequence>
<Condition>not structure_built</Condition>
<Action>wait_for_materials</Action>
<Action>get_required_materials</Action>
</Sequence>
</BehaviorTree>"
Generate a behavior tree to coordinate a swarm of robots to surround and contain a target.,Use the following behaviors to generate XML Behavior tree based on the user command: move_towards_target: Action node - Move the robots towards the target. check_target_contained: Condition node - Check if the target has been surrounded and contained. surround_target: Action node - Strategically surround the target.,Surround and contain a target using a swarm of robots.,"
<BehaviorTree>
<Sequence>
<Condition>not target_contained</Condition>
<Selector>
<Sequence>
<Action>move_towards_target</Action>
<Action>surround_target</Action>
</Sequence>
<Action>wait_for_instructions</Action>
</Selector>
</Sequence>
</BehaviorTree>"
Develop a behavior tree to coordinate robots to perform a rescue mission in a hazardous environment.,Use the following behaviors to generate XML Behavior tree based on the user command: rescue_victims: Action node - Locate and rescue any trapped victims in the hazardous environment. navigate_hazardous_area: Action node - Navigate through the hazardous environment. check_safe_exit: Condition node - Check if there is a safe exit available for the rescued victims.,Perform a rescue mission in a hazardous environment.,"
<BehaviorTree>
<Sequence>
<Condition>not safe_exit_found</Condition>
<Selector>
<Sequence>
<Action>rescue_victims</Action>
<Action>navigate_hazardous_area</Action>
</Sequence>
<Action>wait_for_instructions</Action>
</Selector>
</Sequence>
</BehaviorTree>"
Create a behavior tree to coordinate a swarm of robots to efficiently harvest and plant crops in a designated area.,Use the following behaviors to generate XML Behavior tree based on the user command: harvest_crops: Action node - Harvest the crops in the designated area. plant_crops: Action node - Plant new crops in the designated area. check_crop_growth: Condition node - Check the progress of crop growth.,Harvest and plant crops in a designated area.,"
<BehaviorTree>
<Sequence>
<Condition>not crops_grown</Condition>
<Selector>
<Sequence>
<Action>harvest_crops</Action>
<Action>plant_crops</Action>
</Sequence>
<Action>wait_for_instructions</Action>
</Selector>
</Sequence>
</BehaviorTree>"
Generate a behavior tree to coordinate robots to perform a search and rescue mission for a missing person in a large area.,Use the following behaviors to generate XML Behavior tree based on the user command: search_area: Action node - Systematically search the designated area for the missing person. rescue_person: Action node - Locate and rescue the missing person. check_rescue_complete: Condition node - Check if the rescue mission has been successfully completed.,Perform a search and rescue mission for a missing person in a large area.,"
<BehaviorTree>
<Sequence>
<Condition>not rescue_complete</Condition>
<Selector>
<Sequence>
<Action>search_area</Action>
<Action>rescue_person</Action>
</Sequence>
<Action>wait_for_instructions</Action>
</Selector>
</Sequence>
</BehaviorTree>"
Create a behavior tree to coordinate swarm robots to collect and analyze environmental data.,Use the following behaviors to generate XML Behavior tree based on the user command: collect_data: Action node - Gather environmental data from various sensors. analyze_data: Action node - Process and analyze the collected data. check_data_accuracy: Condition node - Check if the data collected is accurate and reliable.,Collect and analyze environmental data.,"
<BehaviorTree>
<Sequence>
<Condition>not data_analyzed</Condition>
<Selector>
<Sequence>
<Action>collect_data</Action>
<Action>analyze_data</Action>
</Sequence>
<Action>wait_for_instructions</Action>
</Selector>
</Sequence>
</BehaviorTree>"
Generate a behavior tree to coordinate robots to work together to construct a bridge over a gap.,Use the following behaviors to generate XML Behavior tree based on the user command: create_bridge: Action node - Assemble the bridge pieces to construct a bridge over the gap. check_bridge_complete: Condition node - Check if the bridge has been successfully assembled. navigate_to_next_building_site: Action node - Move to the next designated building site.,Construct a bridge over a gap.,"
<BehaviorTree>
<Sequence>
<Condition>not bridge_complete</Condition>
<Selector>
<Sequence>
<Action>create_bridge</Action>
<Action>navigate_to_next_building_site</Action>
</Sequence>
<Action>wait_for_instructions</Action>
</Selector>
</Sequence>
</BehaviorTree>"
Develop a behavior tree to coordinate robots to efficiently sort and transport different types of objects to different designated locations.,Use the following behaviors to generate XML Behavior tree based on the user command: sort_objects: Action node - Use sensors and algorithms to sort the objects into different categories. transport_objects: Action node - Transport the sorted objects to their designated locations. check_all_objects_sorted: Condition node - Check if all objects have been successfully sorted.,Sort and transport objects to designated locations.,"
<BehaviorTree>
<Sequence>
<Condition>not all_objects_sorted</Condition>
<Selector>
<Sequence>
<Action>sort_objects</Action>
<Action>transport_objects</Action>
</Sequence>
<Action>wait_for_instructions</Action>
</Selector>
</Sequence>
</BehaviorTree>"
Create a behavior tree to coordinate swarm robots to efficiently construct a protective barrier around a designated area.,Use the following behaviors to generate XML Behavior tree based on the user command: construct_barrier: Action node - Strategically place barrier pieces to form a protective barrier. check_barrier_complete: Condition node - Check if the barrier is fully constructed. navigate_to_next_barrier_site: Action node - Move to the next designated barrier construction site.,Construct a protective barrier around a designated area.,"
<BehaviorTree>
<Sequence>
<Condition>not barrier_complete</Condition>
<Selector>
<Sequence>
<Action>construct_barrier</Action>
<Action>navigate_to_next_barrier_site</Action>
</Sequence>
<Action>wait_for_instructions</Action>
</Selector>
</Sequence>
</BehaviorTree>"
Generate a behavior tree to coordinate robots to effectively extinguish a fire in a designated area.,Use the following behaviors to generate XML Behavior tree based on the user command: locate_fire: Action node - Use sensors to locate the source of the fire. extinguish_fire: Action node - Use water or other means to extinguish the fire. check_fire_extinguished: Condition node - Check if the fire has been fully extinguished.,Extinguish a fire in a designated area.,"
<BehaviorTree>
<Sequence>
<Condition>not fire_extinguished</Condition>
<Selector>
<Sequence>
<Action>locate_fire</Action>
<Action>extinguish_fire</Action>
</Sequence>
<Action>wait_for_instructions</Action>
</Selector>
</Sequence>
</BehaviorTree>"
Develop a behavior tree to coordinate robots to effectively navigate through a maze and reach the designated exit.,Use the following behaviors to generate XML Behavior tree based on the user command: navigate_through_maze: Action node - Systematically explore the maze to find the exit. check_exit_reached: Condition node - Check if the exit has been successfully reached. ensure_path_is_clear: Action node - Use sensors to ensure the path to the exit is clear.,Navigate through a maze and reach the designated exit.,"
<BehaviorTree>
<Sequence>
<Condition>not exit_reached</Condition>
<Selector>
<Sequence>
<Action>navigate_through_maze</Action>
<Action>ensure_path_is_clear</Action>
</Sequence>
<Action>wait_for_instructions</Action>
</Selector>
</Sequence>
</BehaviorTree>"
Create a behavior tree to coordinate swarm robots to efficiently construct a structure in an underwater environment.,Use the following behaviors to generate XML Behavior tree based on the user command: build_structure: Action node - Assemble and construct the designated structure using specialized underwater tools. check_structure_complete: Condition node - Check if the structure has been successfully built. navigate_to_next_building_site: Action node - Move to the next designated building site.,Construct a structure in an underwater environment.,"
<BehaviorTree>
<Sequence>
<Condition>not structure_complete</Condition>
<Selector>
<Sequence>
<Action>build_structure</Action>
<Action>navigate_to_next_building_site</Action>
</Sequence>
<Action>wait_for_instructions</Action>
</Selector>
</Sequence>
</BehaviorTree>"
Generate a behavior tree to coordinate robots to efficiently transport and assemble parts to build a large-scale structure.,Use the following behaviors to generate XML Behavior tree based on the user command: transport_parts: Action node - Transport the designated parts to the construction site. assemble_structure: Action node - Assemble the parts to construct the structure. check_structure_complete: Condition node - Check if the structure has been fully assembled.,Transport and assemble parts to build a large-scale structure.,"
<BehaviorTree>
<Sequence>
<Condition>not structure_complete</Condition>
<Selector>
<Sequence>
<Action>transport_parts</Action>
<Action>assemble_structure</Action>
</Sequence>
<Action>wait_for_instructions</Action>
</Selector>
</Sequence>
</BehaviorTree>"
Develop a behavior tree to coordinate swarm robots to effectively track and herd a group of animals.,Use the following behaviors to generate XML Behavior tree based on the user command: track_animals: Action node - Use sensors to track the animals and their movements. herd_animals: Action node - Strategically guide the animals towards a designated location. check_herd_complete: Condition node - Check if all animals have been successfully herded to the designated location.,Track and herd a group of animals.,"
<BehaviorTree>
<Sequence>
<Condition>not herd_complete</Condition>
<Selector>
<Sequence>
<Action>track_animals</Action>
<Action>herd_animals</Action>
</Sequence>
<Action>wait_for_instructions</Action>
</Selector>
</Sequence>
</BehaviorTree>"
Create a behavior tree to coordinate swarm robots to efficiently perform maintenance work on a large-scale structure.,Use the following behaviors to generate XML Behavior tree based on the user command: perform_maintenance: Action node - Use specialized tools to perform maintenance work on the designated areas of the structure. check_maintenance_complete: Condition node - Check if the maintenance work has been successfully completed. move_to_next_maintenance_site: Action node - Move to the next designated maintenance site.,Perform maintenance work on a large-scale structure.,"
<BehaviorTree>
<Sequence>
<Condition>not maintenance"
