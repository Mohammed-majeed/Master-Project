[
  {
    "id": "seed_task_1",
    "USER COMMAND": "generate behavior tree to 'Find the target and change color to green, then return home and change color to white.'Output only the XML behavior tree without extra text.",
    "INSTRUCTIONS": {
      "agent_movement_freeze": "Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.",
      "avoid_obstacle": "Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.",
      "change_color_to_green": "Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.",
      "change_color_to_white": "Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.",
      "continue_movement_agent": "Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.",
      "form_line": "Action node: Direct the agent to form a line towards the center of the window. This function adjusts the agent’s position to align it with the center. Returns: Always returns True, indicating the action was executed.",
      "is_agent_in_nest": "Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.",
      "is_line_formed": "Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: True if the line is formed with the center, False otherwise.",
      "is_obstacle_detected": "Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.",
      "is_path_clear": "Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.",
      "is_target_detected": "Action node: Check if the target is within a detectable distance from the agent’s position. Returns: True if the target is within 20 units of distance, False otherwise.",
      "is_target_reached": "Condition node: Check if the agent has reached the target. Returns: True if the target is within 15 units of distance, False otherwise.",
      "task_completed": "Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.",
      "wander": "Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed."
    },
    "INSTANCES": [
      {
        "INPUT": "Find the target and change color to green, then return home and change color to white.",
        "OUTPUT": "<BehaviorTree><Sequence><Selector><Sequence><Condition>is_target_detected</Condition><Action>change_color_to_green</Action><Action>task_completed</Action></Sequence><Action>wander</Action></Selector><Sequence><Condition>is_agent_in_nest</Condition><Action>change_color_to_white</Action></Sequence></Sequence></BehaviorTree>"
      }
    ]
  },
  {
    "id": "seed_task_2",
    "USER COMMAND": "generate behavior tree to 'Find food and change color to green, then return to the nest, change color to white, and freeze movement.'Output only the XML behavior tree without extra text.",
    "INSTRUCTIONS": {
      "agent_movement_freeze": "Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.",
      "avoid_obstacle": "Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.",
      "change_color_to_green": "Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.",
      "change_color_to_white": "Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.",
      "continue_movement_agent": "Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.",
      "form_line": "Action node: Direct the agent to form a line towards the center of the window. This function adjusts the agent’s position to align it with the center. Returns: Always returns True, indicating the action was executed.",
      "is_agent_in_nest": "Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.",
      "is_line_formed": "Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: True if the line is formed with the center, False otherwise.",
      "is_obstacle_detected": "Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.",
      "is_path_clear": "Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.",
      "is_target_detected": "Action node: Check if the target is within a detectable distance from the agent’s position. Returns: True if the target is within 20 units of distance, False otherwise.",
      "is_target_reached": "Condition node: Check if the agent has reached the target. Returns: True if the target is within 15 units of distance, False otherwise.",
      "task_completed": "Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.",
      "wander": "Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed."
    },
    "INSTANCES": [
      {
        "INPUT": "Find food and change color to green, then return to the nest, change color to white, and freeze movement.",
        "OUTPUT": "<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_green</Action> <Action>task_completed</Action> </Sequence> <Action>wander</Action> </Selector> <Sequence> <Condition>is_agent_in_nest</Condition> <Action>change_color_to_white</Action> <Action>agent_movement_freeze</Action> </Sequence> </Sequence> </BehaviorTree>"
      }
    ]
  },
  {
    "id": "seed_task_3",
    "USER COMMAND": "generate behavior tree to 'Detect an obstacle, change color to green, try to find the goal, then change color to white.'Output only the XML behavior tree without extra text.",
    "INSTRUCTIONS": {
      "agent_movement_freeze": "Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.",
      "avoid_obstacle": "Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.",
      "change_color_to_green": "Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.",
      "change_color_to_white": "Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.",
      "continue_movement_agent": "Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.",
      "form_line": "Action node: Direct the agent to form a line towards the center of the window. This function adjusts the agent’s position to align it with the center. Returns: Always returns True, indicating the action was executed.",
      "is_agent_in_nest": "Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.",
      "is_line_formed": "Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: True if the line is formed with the center, False otherwise.",
      "is_obstacle_detected": "Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.",
      "is_path_clear": "Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.",
      "is_target_detected": "Action node: Check if the target is within a detectable distance from the agent’s position. Returns: True if the target is within 20 units of distance, False otherwise.",
      "is_target_reached": "Condition node: Check if the agent has reached the target. Returns: True if the target is within 15 units of distance, False otherwise.",
      "task_completed": "Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.",
      "wander": "Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed."
    },
    "INSTANCES": [
      {
        "INPUT": "Detect an obstacle, change color to green, try to find the goal, then change color to white.",
        "OUTPUT": "<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_obstacle_detected</Condition> <Action>change_color_to_green</Action> </Sequence> <Action>avoid_obstacle</Action> </Selector> <Selector> <Sequence> <Condition>is_target_detected</Condition> <Action>change_color_to_white</Action> <Action>task_completed</Action> </Sequence> <Action>wander</Action> </Selector> </Sequence> </BehaviorTree>"
      }
    ]
  },
  {
    "id": "seed_task_4",
    "USER COMMAND": "generate behavior tree to 'Form a line and then change color to green.'Output only the XML behavior tree without extra text.",
    "INSTRUCTIONS": {
      "agent_movement_freeze": "Action node: Freeze the agent’s movement, typically to indicate a stop in activity or end of tasks. Returns: Always returns True, indicating the action was executed.",
      "avoid_obstacle": "Action node: Execute an action to avoid detected obstacles. Returns: Always returns True, indicating the action was executed.",
      "change_color_to_green": "Action node: Change the agent’s color to green, usually indicating a successful operation or state. Returns: Always returns True, indicating the action was executed.",
      "change_color_to_white": "Action node: Change the agent’s color to white, usually indicating a neutral or initial state. Returns: Always returns True, indicating the action was executed.",
      "continue_movement_agent": "Action node: Continue the agent’s movement after it has been previously frozen. Returns: Always returns True, indicating the action was executed.",
      "form_line": "Action node: Direct the agent to form a line towards the center of the window. This function adjusts the agent’s position to align it with the center. Returns: Always returns True, indicating the action was executed.",
      "is_agent_in_nest": "Condition node: Determine if the agent is in the nest. Returns: True if the agent is in the nest, False otherwise.",
      "is_line_formed": "Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: True if the line is formed with the center, False otherwise.",
      "is_obstacle_detected": "Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: True if an obstacle is detected, False otherwise.",
      "is_path_clear": "Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: True if no obstacles are detected ahead, False if obstacles are present.",
      "is_target_detected": "Action node: Check if the target is within a detectable distance from the agent’s position. Returns: True if the target is within 20 units of distance, False otherwise.",
      "is_target_reached": "Condition node: Check if the agent has reached the target. Returns: True if the target is within 15 units of distance, False otherwise.",
      "task_completed": "Action node: Signal that the agent has completed its designated task by freezing movement and updating state. Returns: Always returns True, indicating that the task completion action was executed.",
      "wander": "Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns True, indicating the action was executed."
    },
    "INSTANCES": [
      {
        "INPUT": "Form a line and then change color to green.",
        "OUTPUT": "<BehaviorTree> <Sequence> <Selector> <Sequence> <Condition>is_line_formed</Condition> <Action>change_color_to_green</Action> <Action>agent_movement_freeze</Action> <Action>task_completed</Action> </Sequence> <Action>form_line</Action> </Selector> </Sequence> </BehaviorTree>"
      }
    ]
  },
  {
    "id": "seed_task_5",
    "USER COMMAND": "Patrol a designated area. If health falls below a threshold, find health and restore it before resuming patrol.",
    "INSTRUCTIONS": "Use the following behaviors to generate XML Behavior tree based on the user command: patrol_area: Subtree node (same as before). monitor_health: Action node (same as before). get_health_pack: Subtree node (same as before). restore_health: Action node (same as before). is_health_low: Condition node (same as before).",
    "INSTANCES": [
      {
        "INPUT": "Patrol a designated area. If health falls below a threshold, find health and restore it before resuming patrol.",
        "OUTPUT": "<BehaviorTree><Sequence><Action>patrol_area</Action><Selector><Sequence><Action>monitor_health</Action><Condition>is_health_low</Condition><Sequence><Action>get_health_pack</Action><Action>restore_health</Action></Sequence></Sequence></Sequence></BehaviorTree>"
      }
    ]
  },
  {
    "id": "seed_task_6",
    "USER COMMAND": "Move forward while keeping an eye on health. If health drops below a threshold, find health and restore it.",
    "INSTRUCTIONS": "Use the following behaviors to generate XML Behavior tree based on the user command: move_forward: Action node (same as before). monitor_health: Action node - Continuously checks the agent's health. get_health_pack: Subtree node - Represents a behavior tree for finding health packs. restore_health: Action node - Makes the agent use a health pack to restore health. is_health_low: Condition node - Checks if health is below a specific threshold.",
    "INSTANCES": [
      {
        "INPUT": "Move forward while keeping an eye on health. If health drops below a threshold, find health and restore it.",
        "OUTPUT": "<BehaviorTree><Selector><Sequence><Action>move_forward</Action></Sequence><Sequence><Action>monitor_health</Action><Selector><Sequence><Condition>is_health_low</Condition><Action>get_health_pack</Action><Action>restore_health</Action></Sequence></Selector></Sequence></Selector></BehaviorTree>"
      }
    ]
  },
  {
    "id": "seed_task_7",
    "USER COMMAND": "generate behavior tree for a robot to patrol an area and report any intruders",
    "INSTRUCTIONS": "Use only the following behaviors to generate XML Behavior tree based on the user command: {'move_to_next_waypoint': 'Action node: Move the robot to the next waypoint in the patrol route.\nReturns: True if the robot successfully moved to the next waypoint, False otherwise.', 'scan_for_intruders': 'Action node: Scan the current area for any intruders using sensors.\nReturns: True if one or more intruders were detected, False otherwise.', 'report_intruder': 'Action node: Send an alert signal indicating an intruder has been detected.\nReturns: Always returns True.', 'is_patrol_complete': 'Condition node: Check if the robot has completed patrolling the entire area.\nReturns: True if the patrol is complete, False otherwise.'} to construct a behavior tree in XML format for the given command.",
    "INSTANCES": [
      {
        "INPUT": "Patrol an area and report any intruders found",
        "OUTPUT": "<BehaviorTree><Sequence><Condition>is_patrol_complete</Condition><Sequence><Action>move_to_next_waypoint</Action><Action>scan_for_intruders</Action><Selector><Action>report_intruder</Action><Action>wait</Action></Selector></Sequence></Sequence>\n</BehaviorTree>"
      }
    ]
  },
  {
    "id": "seed_task_8",
    "USER COMMAND": "generate behavior tree for a robot to explore an unknown environment and map it",
    "INSTRUCTIONS": "Use only the following behaviors to generate XML Behavior tree based on the user command: {'move_forward': 'Action node: Move the robot one step forward in the current direction.\nReturns: True if the robot can move forward, False otherwise.', 'turn_left': 'Action node: Turn the robot 90 degrees to the left.\nReturns: Always returns True.', 'turn_right': 'Action node: Turn the robot 90 degrees to the right.\nReturns: Always returns True.', 'update_map': 'Action node: Update the robot's internal map of the environment based on its current location and sensor readings.\nReturns: True if the map was updated successfully, False otherwise.', 'is_path_blocked': 'Condition node: Check if the path in the current direction is blocked or impassable.\nReturns: True if the path is blocked, False otherwise.', 'is_area_mapped': 'Condition node: Check if the current area has already been mapped and explored.\nReturns: True if the area is mapped, False otherwise.'} to construct a behavior tree in XML format for the given command.",
    "INSTANCES": [
      {
        "INPUT": "Explore an unknown area and create a map of it",
        "OUTPUT": "<BehaviorTree><Sequence><Condition>is_area_mapped</Condition><Selector><Sequence><Condition>is_path_blocked</Condition><Selector><Action>turn_left</Action><Action>turn_right</Action></Selector></Sequence><Sequence><Action>move_forward</Action><Action>update_map</Action></Sequence></Selector></Sequence>\n</BehaviorTree>"
      }
    ]
  },
  {
    "id": "seed_task_9",
    "USER COMMAND": "generate behavior tree for a robot to assist in a search and rescue operation",
    "INSTRUCTIONS": "Use only the following behaviors to generate XML Behavior tree based on the user command: {'move_to_next_area': 'Action node: Move the robot to the next unsearched area.\nReturns: True if the robot successfully moved to the next area, False otherwise.', 'scan_for_survivors': 'Action node: Scan the current area for any survivors using sensors.\nReturns: True if one or more survivors were detected, False otherwise.', 'mark_area_searched': 'Action node: Mark the current area as searched so it is not revisited.\nReturns: Always returns True.', 'is_search_complete': 'Condition node: Check if the entire search area has been fully searched.\nReturns: True if the search is complete, False otherwise.', 'is_survivor_detected': 'Condition node: Check if a survivor has been detected in the current area.\nReturns: True if a survivor is detected, False otherwise.'}  to construct a behavior tree in XML format for the given command.",
    "INSTANCES": [
      {
        "INPUT": "Search an area and locate any survivors",
        "OUTPUT": "<BehaviorTree><Sequence><Condition>is_search_complete</Condition><Sequence><Action>move_to_next_area</Action><Action>scan_for_survivors</Action><Selector><Sequence><Condition>is_survivor_detected</Condition><Action>call_for_rescue</Action></Sequence><Action>mark_area_searched</Action></Selector></Sequence></Sequence>\n</BehaviorTree>"
      }
    ]
  }
]
